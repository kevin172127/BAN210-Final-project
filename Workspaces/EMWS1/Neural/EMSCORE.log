MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "August 07, 2022" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "19:52:52" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                August 07, 2022
Time:                19:52:52
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O1SD006A "C:\Users\brahm\OneDrive\Desktop\BAN210_Project\Workspaces\EMWS1\Neural\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O1SD006A new;
MPRINT(EM_DIAGRAM):   run;
29370      data work.outkey;
MPRINT(EM_DIAGRAM):    data work.outkey;
29371      set EMWS1.Neural_OUTKEY;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_OUTKEY;
29372      if upcase(ROLE) = 'HIDDEN';
MPRINT(EM_DIAGRAM):   if upcase(ROLE) = 'HIDDEN';
29373      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 29 observations read from the data set EMWS1.NEURAL_OUTKEY.
NOTE: The data set WORK.OUTKEY has 3 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

29374      filename emflow "C:\Users\brahm\OneDrive\Desktop\BAN210_Project\Workspaces\EMWS1\Neural\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\brahm\OneDrive\Desktop\BAN210_Project\Workspaces\EMWS1\Neural\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
29375      *------------------------------------------------------------*;
29376      * Neural: Scoring DATA data;
29377      *------------------------------------------------------------*;
29378      data EMWS1.Neural_TRAIN
29379      / view=EMWS1.Neural_TRAIN
29380      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_TRAIN / view=EMWS1.Neural_TRAIN ;
29381      set EMWS1.Varsel_TRAIN
29382      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Varsel_TRAIN ;
29383      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\brahm\OneDrive\Desktop\BAN210_Project\Workspaces\EMWS1\Neural\EMFLOWSCORE.sas.
29384     +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
29385     +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
29386     +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
29387     +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
29388     + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
29389     + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
29390     + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
29391     + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
29392     + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
29393     + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
29394     + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
29395     +LENGTH _WARN_ $4
29396     +      F_class  $ 20
29397     +      I_class  $ 20
29398     +      U_class  $ 20
29399     +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_class $ 20 I_class $ 20 U_class $ 20 ;
29400     +      label S_REP_deg_malig = 'Standard: REP_deg_malig' ;
MPRINT(EM_DIAGRAM):   label S_REP_deg_malig = 'Standard: REP_deg_malig' ;
29401     +
29402     +      label G_age0 = 'Dummy: G_age=0' ;
MPRINT(EM_DIAGRAM):   label G_age0 = 'Dummy: G_age=0' ;
29403     +
29404     +      label G_age1 = 'Dummy: G_age=1' ;
MPRINT(EM_DIAGRAM):   label G_age1 = 'Dummy: G_age=1' ;
29405     +
29406     +      label G_age2 = 'Dummy: G_age=2' ;
MPRINT(EM_DIAGRAM):   label G_age2 = 'Dummy: G_age=2' ;
29407     +
29408     +      label G_breast_quad0 = 'Dummy: G_breast_quad=0' ;
MPRINT(EM_DIAGRAM):   label G_breast_quad0 = 'Dummy: G_breast_quad=0' ;
29409     +
29410     +      label G_breast_quad1 = 'Dummy: G_breast_quad=1' ;
MPRINT(EM_DIAGRAM):   label G_breast_quad1 = 'Dummy: G_breast_quad=1' ;
29411     +
29412     +      label G_breast_quad2 = 'Dummy: G_breast_quad=2' ;
MPRINT(EM_DIAGRAM):   label G_breast_quad2 = 'Dummy: G_breast_quad=2' ;
29413     +
29414     +      label G_inv_nodes0 = 'Dummy: G_inv_nodes=0' ;
MPRINT(EM_DIAGRAM):   label G_inv_nodes0 = 'Dummy: G_inv_nodes=0' ;
29415     +
29416     +      label G_inv_nodes1 = 'Dummy: G_inv_nodes=1' ;
MPRINT(EM_DIAGRAM):   label G_inv_nodes1 = 'Dummy: G_inv_nodes=1' ;
29417     +
29418     +      label G_tumor_size0 = 'Dummy: G_tumor_size=0' ;
MPRINT(EM_DIAGRAM):   label G_tumor_size0 = 'Dummy: G_tumor_size=0' ;
29419     +
29420     +      label G_tumor_size1 = 'Dummy: G_tumor_size=1' ;
MPRINT(EM_DIAGRAM):   label G_tumor_size1 = 'Dummy: G_tumor_size=1' ;
29421     +
29422     +      label G_tumor_size2 = 'Dummy: G_tumor_size=2' ;
MPRINT(EM_DIAGRAM):   label G_tumor_size2 = 'Dummy: G_tumor_size=2' ;
29423     +
29424     +      label G_tumor_size3 = 'Dummy: G_tumor_size=3' ;
MPRINT(EM_DIAGRAM):   label G_tumor_size3 = 'Dummy: G_tumor_size=3' ;
29425     +
29426     +      label irradiatno = 'Dummy: irradiat=no' ;
MPRINT(EM_DIAGRAM):   label irradiatno = 'Dummy: irradiat=no' ;
29427     +
29428     +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
29429     +
29430     +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
29431     +
29432     +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
29433     +
29434     +      label I_class = 'Into: class' ;
MPRINT(EM_DIAGRAM):   label I_class = 'Into: class' ;
29435     +
29436     +      label F_class = 'From: class' ;
MPRINT(EM_DIAGRAM):   label F_class = 'From: class' ;
29437     +
29438     +      label U_class = 'Unnormalized Into: class' ;
MPRINT(EM_DIAGRAM):   label U_class = 'Unnormalized Into: class' ;
29439     +
29440     +      label P_classrecurrence_events = 'Predicted: class=recurrence-events' ;
MPRINT(EM_DIAGRAM):   label P_classrecurrence_events = 'Predicted: class=recurrence-events' ;
29441     +
29442     +      label R_classrecurrence_events = 'Residual: class=recurrence-events' ;
MPRINT(EM_DIAGRAM):   label R_classrecurrence_events = 'Residual: class=recurrence-events' ;
29443     +
29444     +      label P_classno_recurrence_events =
29445     +'Predicted: class=no-recurrence-events' ;
MPRINT(EM_DIAGRAM):   label P_classno_recurrence_events = 'Predicted: class=no-recurrence-events' ;
29446     +
29447     +      label R_classno_recurrence_events =
29448     +'Residual: class=no-recurrence-events' ;
MPRINT(EM_DIAGRAM):   label R_classno_recurrence_events = 'Residual: class=no-recurrence-events' ;
29449     +
29450     +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
29451     +
29452     +*** Generate dummy variables for G_age ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for G_age ;
29453     +drop G_age0 G_age1 G_age2 ;
MPRINT(EM_DIAGRAM):   drop G_age0 G_age1 G_age2 ;
29454     +if missing( G_age ) then do;
MPRINT(EM_DIAGRAM):   if missing( G_age ) then do;
29455     +   G_age0 = .;
MPRINT(EM_DIAGRAM):   G_age0 = .;
29456     +   G_age1 = .;
MPRINT(EM_DIAGRAM):   G_age1 = .;
29457     +   G_age2 = .;
MPRINT(EM_DIAGRAM):   G_age2 = .;
29458     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
29459     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
29460     +end;
MPRINT(EM_DIAGRAM):   end;
29461     +else do;
MPRINT(EM_DIAGRAM):   else do;
29462     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
29463     +   _dm12 = put( G_age , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( G_age , BEST12. );
29464     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
29465     +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
29466     +      G_age0 = 0;
MPRINT(EM_DIAGRAM):   G_age0 = 0;
29467     +      G_age1 = 0;
MPRINT(EM_DIAGRAM):   G_age1 = 0;
29468     +      G_age2 = 1;
MPRINT(EM_DIAGRAM):   G_age2 = 1;
29469     +   end;
MPRINT(EM_DIAGRAM):   end;
29470     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
29471     +      G_age0 = 0;
MPRINT(EM_DIAGRAM):   G_age0 = 0;
29472     +      G_age1 = 1;
MPRINT(EM_DIAGRAM):   G_age1 = 1;
29473     +      G_age2 = 0;
MPRINT(EM_DIAGRAM):   G_age2 = 0;
29474     +   end;
MPRINT(EM_DIAGRAM):   end;
29475     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
29476     +      G_age0 = -1;
MPRINT(EM_DIAGRAM):   G_age0 = -1;
29477     +      G_age1 = -1;
MPRINT(EM_DIAGRAM):   G_age1 = -1;
29478     +      G_age2 = -1;
MPRINT(EM_DIAGRAM):   G_age2 = -1;
29479     +   end;
MPRINT(EM_DIAGRAM):   end;
29480     +   else if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
29481     +      G_age0 = 1;
MPRINT(EM_DIAGRAM):   G_age0 = 1;
29482     +      G_age1 = 0;
MPRINT(EM_DIAGRAM):   G_age1 = 0;
29483     +      G_age2 = 0;
MPRINT(EM_DIAGRAM):   G_age2 = 0;
29484     +   end;
MPRINT(EM_DIAGRAM):   end;
29485     +   else do;
MPRINT(EM_DIAGRAM):   else do;
29486     +      G_age0 = .;
MPRINT(EM_DIAGRAM):   G_age0 = .;
29487     +      G_age1 = .;
MPRINT(EM_DIAGRAM):   G_age1 = .;
29488     +      G_age2 = .;
MPRINT(EM_DIAGRAM):   G_age2 = .;
29489     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
29490     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
29491     +   end;
MPRINT(EM_DIAGRAM):   end;
29492     +end;
MPRINT(EM_DIAGRAM):   end;
29493     +
29494     +*** Generate dummy variables for G_breast_quad ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for G_breast_quad ;
29495     +drop G_breast_quad0 G_breast_quad1 G_breast_quad2 ;
MPRINT(EM_DIAGRAM):   drop G_breast_quad0 G_breast_quad1 G_breast_quad2 ;
29496     +if missing( G_breast_quad ) then do;
MPRINT(EM_DIAGRAM):   if missing( G_breast_quad ) then do;
29497     +   G_breast_quad0 = .;
MPRINT(EM_DIAGRAM):   G_breast_quad0 = .;
29498     +   G_breast_quad1 = .;
MPRINT(EM_DIAGRAM):   G_breast_quad1 = .;
29499     +   G_breast_quad2 = .;
MPRINT(EM_DIAGRAM):   G_breast_quad2 = .;
29500     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
29501     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
29502     +end;
MPRINT(EM_DIAGRAM):   end;
29503     +else do;
MPRINT(EM_DIAGRAM):   else do;
29504     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
29505     +   _dm12 = put( G_breast_quad , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( G_breast_quad , BEST12. );
29506     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
29507     +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
29508     +      G_breast_quad0 = 1;
MPRINT(EM_DIAGRAM):   G_breast_quad0 = 1;
29509     +      G_breast_quad1 = 0;
MPRINT(EM_DIAGRAM):   G_breast_quad1 = 0;
29510     +      G_breast_quad2 = 0;
MPRINT(EM_DIAGRAM):   G_breast_quad2 = 0;
29511     +   end;
MPRINT(EM_DIAGRAM):   end;
29512     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
29513     +      G_breast_quad0 = 0;
MPRINT(EM_DIAGRAM):   G_breast_quad0 = 0;
29514     +      G_breast_quad1 = 1;
MPRINT(EM_DIAGRAM):   G_breast_quad1 = 1;
29515     +      G_breast_quad2 = 0;
MPRINT(EM_DIAGRAM):   G_breast_quad2 = 0;
29516     +   end;
MPRINT(EM_DIAGRAM):   end;
29517     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
29518     +      G_breast_quad0 = 0;
MPRINT(EM_DIAGRAM):   G_breast_quad0 = 0;
29519     +      G_breast_quad1 = 0;
MPRINT(EM_DIAGRAM):   G_breast_quad1 = 0;
29520     +      G_breast_quad2 = 1;
MPRINT(EM_DIAGRAM):   G_breast_quad2 = 1;
29521     +   end;
MPRINT(EM_DIAGRAM):   end;
29522     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
29523     +      G_breast_quad0 = -1;
MPRINT(EM_DIAGRAM):   G_breast_quad0 = -1;
29524     +      G_breast_quad1 = -1;
MPRINT(EM_DIAGRAM):   G_breast_quad1 = -1;
29525     +      G_breast_quad2 = -1;
MPRINT(EM_DIAGRAM):   G_breast_quad2 = -1;
29526     +   end;
MPRINT(EM_DIAGRAM):   end;
29527     +   else do;
MPRINT(EM_DIAGRAM):   else do;
29528     +      G_breast_quad0 = .;
MPRINT(EM_DIAGRAM):   G_breast_quad0 = .;
29529     +      G_breast_quad1 = .;
MPRINT(EM_DIAGRAM):   G_breast_quad1 = .;
29530     +      G_breast_quad2 = .;
MPRINT(EM_DIAGRAM):   G_breast_quad2 = .;
29531     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
29532     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
29533     +   end;
MPRINT(EM_DIAGRAM):   end;
29534     +end;
MPRINT(EM_DIAGRAM):   end;
29535     +
29536     +*** Generate dummy variables for G_inv_nodes ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for G_inv_nodes ;
29537     +drop G_inv_nodes0 G_inv_nodes1 ;
MPRINT(EM_DIAGRAM):   drop G_inv_nodes0 G_inv_nodes1 ;
29538     +if missing( G_inv_nodes ) then do;
MPRINT(EM_DIAGRAM):   if missing( G_inv_nodes ) then do;
29539     +   G_inv_nodes0 = .;
MPRINT(EM_DIAGRAM):   G_inv_nodes0 = .;
29540     +   G_inv_nodes1 = .;
MPRINT(EM_DIAGRAM):   G_inv_nodes1 = .;
29541     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
29542     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
29543     +end;
MPRINT(EM_DIAGRAM):   end;
29544     +else do;
MPRINT(EM_DIAGRAM):   else do;
29545     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
29546     +   _dm12 = put( G_inv_nodes , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( G_inv_nodes , BEST12. );
29547     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
29548     +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
29549     +      G_inv_nodes0 = 1;
MPRINT(EM_DIAGRAM):   G_inv_nodes0 = 1;
29550     +      G_inv_nodes1 = 0;
MPRINT(EM_DIAGRAM):   G_inv_nodes1 = 0;
29551     +   end;
MPRINT(EM_DIAGRAM):   end;
29552     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
29553     +      G_inv_nodes0 = 0;
MPRINT(EM_DIAGRAM):   G_inv_nodes0 = 0;
29554     +      G_inv_nodes1 = 1;
MPRINT(EM_DIAGRAM):   G_inv_nodes1 = 1;
29555     +   end;
MPRINT(EM_DIAGRAM):   end;
29556     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
29557     +      G_inv_nodes0 = -1;
MPRINT(EM_DIAGRAM):   G_inv_nodes0 = -1;
29558     +      G_inv_nodes1 = -1;
MPRINT(EM_DIAGRAM):   G_inv_nodes1 = -1;
29559     +   end;
MPRINT(EM_DIAGRAM):   end;
29560     +   else do;
MPRINT(EM_DIAGRAM):   else do;
29561     +      G_inv_nodes0 = .;
MPRINT(EM_DIAGRAM):   G_inv_nodes0 = .;
29562     +      G_inv_nodes1 = .;
MPRINT(EM_DIAGRAM):   G_inv_nodes1 = .;
29563     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
29564     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
29565     +   end;
MPRINT(EM_DIAGRAM):   end;
29566     +end;
MPRINT(EM_DIAGRAM):   end;
29567     +
29568     +*** Generate dummy variables for G_tumor_size ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for G_tumor_size ;
29569     +drop G_tumor_size0 G_tumor_size1 G_tumor_size2 G_tumor_size3 ;
MPRINT(EM_DIAGRAM):   drop G_tumor_size0 G_tumor_size1 G_tumor_size2 G_tumor_size3 ;
29570     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
29571     +G_tumor_size0 = 0;
MPRINT(EM_DIAGRAM):   G_tumor_size0 = 0;
29572     +G_tumor_size1 = 0;
MPRINT(EM_DIAGRAM):   G_tumor_size1 = 0;
29573     +G_tumor_size2 = 0;
MPRINT(EM_DIAGRAM):   G_tumor_size2 = 0;
29574     +G_tumor_size3 = 0;
MPRINT(EM_DIAGRAM):   G_tumor_size3 = 0;
29575     +if missing( G_tumor_size ) then do;
MPRINT(EM_DIAGRAM):   if missing( G_tumor_size ) then do;
29576     +   G_tumor_size0 = .;
MPRINT(EM_DIAGRAM):   G_tumor_size0 = .;
29577     +   G_tumor_size1 = .;
MPRINT(EM_DIAGRAM):   G_tumor_size1 = .;
29578     +   G_tumor_size2 = .;
MPRINT(EM_DIAGRAM):   G_tumor_size2 = .;
29579     +   G_tumor_size3 = .;
MPRINT(EM_DIAGRAM):   G_tumor_size3 = .;
29580     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
29581     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
29582     +end;
MPRINT(EM_DIAGRAM):   end;
29583     +else do;
MPRINT(EM_DIAGRAM):   else do;
29584     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
29585     +   _dm12 = put( G_tumor_size , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( G_tumor_size , BEST12. );
29586     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
29587     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
29588     +   if _dm12 <= '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
29589     +      if _dm12 <= '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '1' then do;
29590     +         if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
29591     +            G_tumor_size0 = 1;
MPRINT(EM_DIAGRAM):   G_tumor_size0 = 1;
29592     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
29593     +         end;
MPRINT(EM_DIAGRAM):   end;
29594     +         else do;
MPRINT(EM_DIAGRAM):   else do;
29595     +            if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
29596     +               G_tumor_size1 = 1;
MPRINT(EM_DIAGRAM):   G_tumor_size1 = 1;
29597     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
29598     +            end;
MPRINT(EM_DIAGRAM):   end;
29599     +         end;
MPRINT(EM_DIAGRAM):   end;
29600     +      end;
MPRINT(EM_DIAGRAM):   end;
29601     +      else do;
MPRINT(EM_DIAGRAM):   else do;
29602     +         if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
29603     +            G_tumor_size2 = 1;
MPRINT(EM_DIAGRAM):   G_tumor_size2 = 1;
29604     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
29605     +         end;
MPRINT(EM_DIAGRAM):   end;
29606     +      end;
MPRINT(EM_DIAGRAM):   end;
29607     +   end;
MPRINT(EM_DIAGRAM):   end;
29608     +   else do;
MPRINT(EM_DIAGRAM):   else do;
29609     +      if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
29610     +         G_tumor_size3 = 1;
MPRINT(EM_DIAGRAM):   G_tumor_size3 = 1;
29611     +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
29612     +      end;
MPRINT(EM_DIAGRAM):   end;
29613     +      else do;
MPRINT(EM_DIAGRAM):   else do;
29614     +         if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
29615     +            G_tumor_size0 = -1;
MPRINT(EM_DIAGRAM):   G_tumor_size0 = -1;
29616     +            G_tumor_size1 = -1;
MPRINT(EM_DIAGRAM):   G_tumor_size1 = -1;
29617     +            G_tumor_size2 = -1;
MPRINT(EM_DIAGRAM):   G_tumor_size2 = -1;
29618     +            G_tumor_size3 = -1;
MPRINT(EM_DIAGRAM):   G_tumor_size3 = -1;
29619     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
29620     +         end;
MPRINT(EM_DIAGRAM):   end;
29621     +      end;
MPRINT(EM_DIAGRAM):   end;
29622     +   end;
MPRINT(EM_DIAGRAM):   end;
29623     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
29624     +      G_tumor_size0 = .;
MPRINT(EM_DIAGRAM):   G_tumor_size0 = .;
29625     +      G_tumor_size1 = .;
MPRINT(EM_DIAGRAM):   G_tumor_size1 = .;
29626     +      G_tumor_size2 = .;
MPRINT(EM_DIAGRAM):   G_tumor_size2 = .;
29627     +      G_tumor_size3 = .;
MPRINT(EM_DIAGRAM):   G_tumor_size3 = .;
29628     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
29629     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
29630     +   end;
MPRINT(EM_DIAGRAM):   end;
29631     +end;
MPRINT(EM_DIAGRAM):   end;
29632     +
29633     +*** Generate dummy variables for irradiat ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for irradiat ;
29634     +drop irradiatno ;
MPRINT(EM_DIAGRAM):   drop irradiatno ;
29635     +if missing( irradiat ) then do;
MPRINT(EM_DIAGRAM):   if missing( irradiat ) then do;
29636     +   irradiatno = .;
MPRINT(EM_DIAGRAM):   irradiatno = .;
29637     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
29638     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
29639     +end;
MPRINT(EM_DIAGRAM):   end;
29640     +else do;
MPRINT(EM_DIAGRAM):   else do;
29641     +   length _dm3 $ 3; drop _dm3 ;
MPRINT(EM_DIAGRAM):   length _dm3 $ 3;
MPRINT(EM_DIAGRAM):   drop _dm3 ;
29642     +   _dm3 = put( irradiat , $3. );
MPRINT(EM_DIAGRAM):   _dm3 = put( irradiat , $3. );
29643     +   %DMNORMIP( _dm3 )
MPRINT(DMNORMIP):   call dmnorm(_dm3,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
29644     +   if _dm3 = 'NO'  then do;
MPRINT(EM_DIAGRAM):   if _dm3 = 'NO' then do;
29645     +      irradiatno = 1;
MPRINT(EM_DIAGRAM):   irradiatno = 1;
29646     +   end;
MPRINT(EM_DIAGRAM):   end;
29647     +   else if _dm3 = 'YES'  then do;
MPRINT(EM_DIAGRAM):   else if _dm3 = 'YES' then do;
29648     +      irradiatno = -1;
MPRINT(EM_DIAGRAM):   irradiatno = -1;
29649     +   end;
MPRINT(EM_DIAGRAM):   end;
29650     +   else do;
MPRINT(EM_DIAGRAM):   else do;
29651     +      irradiatno = .;
MPRINT(EM_DIAGRAM):   irradiatno = .;
29652     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
29653     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
29654     +   end;
MPRINT(EM_DIAGRAM):   end;
29655     +end;
MPRINT(EM_DIAGRAM):   end;
29656     +
29657     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
29658     +*** Checking missing input Interval
29659     +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
29660     +
29661     +IF NMISS(
29662     +   REP_deg_malig   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( REP_deg_malig ) THEN DO;
29663     +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
29664     +
29665     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
29666     +END;
MPRINT(EM_DIAGRAM):   END;
29667     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
29668     +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
29669     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
29670     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
29671     +   S_REP_deg_malig  =    -2.78253429049127 +     1.35716746031314 *
29672     +        REP_deg_malig ;
MPRINT(EM_DIAGRAM):   S_REP_deg_malig = -2.78253429049127 + 1.35716746031314 * REP_deg_malig ;
29673     +END;
MPRINT(EM_DIAGRAM):   END;
29674     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
29675     +   IF MISSING( REP_deg_malig ) THEN S_REP_deg_malig  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_deg_malig ) THEN S_REP_deg_malig = . ;
29676     +   ELSE S_REP_deg_malig  =    -2.78253429049127 +     1.35716746031314 *
29677     +        REP_deg_malig ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_deg_malig = -2.78253429049127 + 1.35716746031314 * REP_deg_malig ;
29678     +END;
MPRINT(EM_DIAGRAM):   END;
29679     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
29680     +*** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nom ;
29681     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
29682     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
29683     +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
29684     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
29685     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
29686     +   H11  =    -0.83930176470528 * S_REP_deg_malig ;
MPRINT(EM_DIAGRAM):   H11 = -0.83930176470528 * S_REP_deg_malig ;
29687     +   H12  =    -0.06629291498954 * S_REP_deg_malig ;
MPRINT(EM_DIAGRAM):   H12 = -0.06629291498954 * S_REP_deg_malig ;
29688     +   H13  =     0.86650083439136 * S_REP_deg_malig ;
MPRINT(EM_DIAGRAM):   H13 = 0.86650083439136 * S_REP_deg_malig ;
29689     +   H11  = H11  +    -0.52575552091022 * G_age0  +    -0.02452272577375 *
29690     +        G_age1  +    -0.59459844636028 * G_age2  +     0.46958511522765 *
29691     +        G_breast_quad0  +    -0.82566780020246 * G_breast_quad1
29692     +          +    -0.98644603735078 * G_breast_quad2  +    -0.01252434754666 *
29693     +        G_inv_nodes0  +    -0.72926694626072 * G_inv_nodes1
29694     +          +    -1.25787140315568 * G_tumor_size0  +    -0.18033239984222 *
29695     +        G_tumor_size1  +     0.46363850845309 * G_tumor_size2
29696     +          +     1.20269753959191 * G_tumor_size3  +    -1.09214961530351 *
29697     +        irradiatno ;
MPRINT(EM_DIAGRAM):   H11 = H11 + -0.52575552091022 * G_age0 + -0.02452272577375 * G_age1 + -0.59459844636028 * G_age2 + 0.46958511522765 * G_breast_quad0 + -0.82566780020246 * G_breast_quad1 + -0.98644603735078 * G_breast_quad2 + -0.01252434754666 * 
G_inv_nodes0 + -0.72926694626072 * G_inv_nodes1 + -1.25787140315568 * G_tumor_size0 + -0.18033239984222 * G_tumor_size1 + 0.46363850845309 * G_tumor_size2 + 1.20269753959191 * G_tumor_size3 + -1.09214961530351 * irradiatno ;
29698     +   H12  = H12  +     -0.1981692188932 * G_age0  +     0.67759980709922 *
29699     +        G_age1  +     0.48274044435058 * G_age2  +    -1.02718031870729 *
29700     +        G_breast_quad0  +     1.77649126784718 * G_breast_quad1
29701     +          +    -0.48974919382025 * G_breast_quad2  +    -0.03624758417098 *
29702     +        G_inv_nodes0  +    -0.07266712102552 * G_inv_nodes1
29703     +          +    -1.60494725258818 * G_tumor_size0  +    -0.01977100118694 *
29704     +        G_tumor_size1  +    -0.56438121580537 * G_tumor_size2
29705     +          +    -1.14834909127965 * G_tumor_size3  +     1.41435531346343 *
29706     +        irradiatno ;
MPRINT(EM_DIAGRAM):   H12 = H12 + -0.1981692188932 * G_age0 + 0.67759980709922 * G_age1 + 0.48274044435058 * G_age2 + -1.02718031870729 * G_breast_quad0 + 1.77649126784718 * G_breast_quad1 + -0.48974919382025 * G_breast_quad2 + -0.03624758417098 * 
G_inv_nodes0 + -0.07266712102552 * G_inv_nodes1 + -1.60494725258818 * G_tumor_size0 + -0.01977100118694 * G_tumor_size1 + -0.56438121580537 * G_tumor_size2 + -1.14834909127965 * G_tumor_size3 + 1.41435531346343 * irradiatno ;
29707     +   H13  = H13  +    -0.55188459206899 * G_age0  +    -0.18823223344893 *
29708     +        G_age1  +     0.40627160142665 * G_age2  +    -0.60334697509908 *
29709     +        G_breast_quad0  +    -0.71080085203945 * G_breast_quad1
29710     +          +     -0.1341761497556 * G_breast_quad2  +    -1.10354676934115 *
29711     +        G_inv_nodes0  +     -0.3469636466685 * G_inv_nodes1
29712     +          +    -0.69262936767089 * G_tumor_size0  +     0.35938238796518 *
29713     +        G_tumor_size1  +     0.24019729603027 * G_tumor_size2
29714     +          +     0.14397568240947 * G_tumor_size3  +    -0.11771226502995 *
29715     +        irradiatno ;
MPRINT(EM_DIAGRAM):   H13 = H13 + -0.55188459206899 * G_age0 + -0.18823223344893 * G_age1 + 0.40627160142665 * G_age2 + -0.60334697509908 * G_breast_quad0 + -0.71080085203945 * G_breast_quad1 + -0.1341761497556 * G_breast_quad2 + -1.10354676934115 * 
G_inv_nodes0 + -0.3469636466685 * G_inv_nodes1 + -0.69262936767089 * G_tumor_size0 + 0.35938238796518 * G_tumor_size1 + 0.24019729603027 * G_tumor_size2 + 0.14397568240947 * G_tumor_size3 + -0.11771226502995 * irradiatno ;
29716     +   H11  =    -0.17155944104582 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = -0.17155944104582 + H11 ;
29717     +   H12  =     0.85968816060862 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = 0.85968816060862 + H12 ;
29718     +   H13  =     0.12939151758083 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = 0.12939151758083 + H13 ;
29719     +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
29720     +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
29721     +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
29722     +END;
MPRINT(EM_DIAGRAM):   END;
29723     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
29724     +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
29725     +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
29726     +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
29727     +END;
MPRINT(EM_DIAGRAM):   END;
29728     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
29729     +*** Writing the Node class ;
MPRINT(EM_DIAGRAM):   *** Writing the Node class ;
29730     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
29731     +
29732     +*** Generate dummy variables for class ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for class ;
29733     +drop classrecurrence_events classno_recurrence_events ;
MPRINT(EM_DIAGRAM):   drop classrecurrence_events classno_recurrence_events ;
29734     +label F_class = 'From: class' ;
MPRINT(EM_DIAGRAM):   label F_class = 'From: class' ;
29735     +length F_class $ 20;
MPRINT(EM_DIAGRAM):   length F_class $ 20;
29736     +F_class = put( class , $20. );
MPRINT(EM_DIAGRAM):   F_class = put( class , $20. );
29737     +%DMNORMIP( F_class )
MPRINT(DMNORMIP):   call dmnorm(F_class,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
29738     +if missing( class ) then do;
MPRINT(EM_DIAGRAM):   if missing( class ) then do;
29739     +   classrecurrence_events = .;
MPRINT(EM_DIAGRAM):   classrecurrence_events = .;
29740     +   classno_recurrence_events = .;
MPRINT(EM_DIAGRAM):   classno_recurrence_events = .;
29741     +end;
MPRINT(EM_DIAGRAM):   end;
29742     +else do;
MPRINT(EM_DIAGRAM):   else do;
29743     +   if F_class = 'NO-RECURRENCE-EVENTS'  then do;
MPRINT(EM_DIAGRAM):   if F_class = 'NO-RECURRENCE-EVENTS' then do;
29744     +      classrecurrence_events = 0;
MPRINT(EM_DIAGRAM):   classrecurrence_events = 0;
29745     +      classno_recurrence_events = 1;
MPRINT(EM_DIAGRAM):   classno_recurrence_events = 1;
29746     +   end;
MPRINT(EM_DIAGRAM):   end;
29747     +   else if F_class = 'RECURRENCE-EVENTS'  then do;
MPRINT(EM_DIAGRAM):   else if F_class = 'RECURRENCE-EVENTS' then do;
29748     +      classrecurrence_events = 1;
MPRINT(EM_DIAGRAM):   classrecurrence_events = 1;
29749     +      classno_recurrence_events = 0;
MPRINT(EM_DIAGRAM):   classno_recurrence_events = 0;
29750     +   end;
MPRINT(EM_DIAGRAM):   end;
29751     +   else do;
MPRINT(EM_DIAGRAM):   else do;
29752     +      classrecurrence_events = .;
MPRINT(EM_DIAGRAM):   classrecurrence_events = .;
29753     +      classno_recurrence_events = .;
MPRINT(EM_DIAGRAM):   classno_recurrence_events = .;
29754     +   end;
MPRINT(EM_DIAGRAM):   end;
29755     +end;
MPRINT(EM_DIAGRAM):   end;
29756     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
29757     +   P_classrecurrence_events  =     2.72345384145319 * H11
29758     +          +     3.10897909812313 * H12  +     3.41198629847837 * H13 ;
MPRINT(EM_DIAGRAM):   P_classrecurrence_events = 2.72345384145319 * H11 + 3.10897909812313 * H12 + 3.41198629847837 * H13 ;
29759     +   P_classrecurrence_events  =    -0.09770061547311 + P_classrecurrence_events
29760     +         ;
MPRINT(EM_DIAGRAM):   P_classrecurrence_events = -0.09770061547311 + P_classrecurrence_events ;
29761     +   P_classno_recurrence_events  = 0;
MPRINT(EM_DIAGRAM):   P_classno_recurrence_events = 0;
29762     +   _MAX_ = MAX (P_classrecurrence_events , P_classno_recurrence_events );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_classrecurrence_events , P_classno_recurrence_events );
29763     +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
29764     +   P_classrecurrence_events  = EXP(P_classrecurrence_events  - _MAX_);
MPRINT(EM_DIAGRAM):   P_classrecurrence_events = EXP(P_classrecurrence_events - _MAX_);
29765     +   _SUM_ = _SUM_ + P_classrecurrence_events ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_classrecurrence_events ;
29766     +   P_classno_recurrence_events  = EXP(P_classno_recurrence_events  - _MAX_);
MPRINT(EM_DIAGRAM):   P_classno_recurrence_events = EXP(P_classno_recurrence_events - _MAX_);
29767     +   _SUM_ = _SUM_ + P_classno_recurrence_events ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_classno_recurrence_events ;
29768     +   P_classrecurrence_events  = P_classrecurrence_events  / _SUM_;
MPRINT(EM_DIAGRAM):   P_classrecurrence_events = P_classrecurrence_events / _SUM_;
29769     +   P_classno_recurrence_events  = P_classno_recurrence_events  / _SUM_;
MPRINT(EM_DIAGRAM):   P_classno_recurrence_events = P_classno_recurrence_events / _SUM_;
29770     +END;
MPRINT(EM_DIAGRAM):   END;
29771     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
29772     +   P_classrecurrence_events  = .;
MPRINT(EM_DIAGRAM):   P_classrecurrence_events = .;
29773     +   P_classno_recurrence_events  = .;
MPRINT(EM_DIAGRAM):   P_classno_recurrence_events = .;
29774     +END;
MPRINT(EM_DIAGRAM):   END;
29775     +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
29776     +   P_classrecurrence_events  =      0.2964824120603;
MPRINT(EM_DIAGRAM):   P_classrecurrence_events = 0.2964824120603;
29777     +   P_classno_recurrence_events  =     0.70351758793969;
MPRINT(EM_DIAGRAM):   P_classno_recurrence_events = 0.70351758793969;
29778     +END;
MPRINT(EM_DIAGRAM):   END;
29779     +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
29780     +*** Writing the Residuals  of the Node class ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node class ;
29781     +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
29782     +IF MISSING( classrecurrence_events ) THEN R_classrecurrence_events  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( classrecurrence_events ) THEN R_classrecurrence_events = . ;
29783     +ELSE R_classrecurrence_events  = classrecurrence_events  -
29784     +        P_classrecurrence_events ;
MPRINT(EM_DIAGRAM):   ELSE R_classrecurrence_events = classrecurrence_events - P_classrecurrence_events ;
29785     +IF MISSING( classno_recurrence_events ) THEN R_classno_recurrence_events
29786     +          = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( classno_recurrence_events ) THEN R_classno_recurrence_events = . ;
29787     +ELSE R_classno_recurrence_events  = classno_recurrence_events  -
29788     +        P_classno_recurrence_events ;
MPRINT(EM_DIAGRAM):   ELSE R_classno_recurrence_events = classno_recurrence_events - P_classno_recurrence_events ;
29789     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
29790     +*** Writing the I_class  AND U_class ;
MPRINT(EM_DIAGRAM):   *** Writing the I_class AND U_class ;
29791     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
29792     +_MAXP_ = P_classrecurrence_events ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_classrecurrence_events ;
29793     +I_class  = "RECURRENCE-EVENTS   " ;
MPRINT(EM_DIAGRAM):   I_class = "RECURRENCE-EVENTS   " ;
29794     +U_class  = "recurrence-events   " ;
MPRINT(EM_DIAGRAM):   U_class = "recurrence-events   " ;
29795     +IF( _MAXP_ LT P_classno_recurrence_events  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_classno_recurrence_events ) THEN DO;
29796     +   _MAXP_ = P_classno_recurrence_events ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_classno_recurrence_events ;
29797     +   I_class  = "NO-RECURRENCE-EVENTS" ;
MPRINT(EM_DIAGRAM):   I_class = "NO-RECURRENCE-EVENTS" ;
29798     +   U_class  = "no-recurrence-events" ;
MPRINT(EM_DIAGRAM):   U_class = "no-recurrence-events" ;
29799     +END;
MPRINT(EM_DIAGRAM):   END;
29800     +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
29801     +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
29802     +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
29803     +drop
29804     +H11
29805     +H12
29806     +H13
29807     +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 ;
29808     +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
29809      run;

NOTE: DATA STEP view saved on file EMWS1.NEURAL_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.VARSEL_TRAIN.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
      

MPRINT(EM_DIAGRAM):   quit;
29810      quit;
29811      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
29812      filename emflow "C:\Users\brahm\OneDrive\Desktop\BAN210_Project\Workspaces\EMWS1\Neural\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\brahm\OneDrive\Desktop\BAN210_Project\Workspaces\EMWS1\Neural\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
29813      *------------------------------------------------------------*;
29814      * Neural: Scoring VALIDATE data;
29815      *------------------------------------------------------------*;
29816      data EMWS1.Neural_VALIDATE
29817      / view=EMWS1.Neural_VALIDATE
29818      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_VALIDATE / view=EMWS1.Neural_VALIDATE ;
29819      set EMWS1.Varsel_VALIDATE
29820      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Varsel_VALIDATE ;
29821      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\brahm\OneDrive\Desktop\BAN210_Project\Workspaces\EMWS1\Neural\EMFLOWSCORE.sas.
29822     +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
29823     +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
29824     +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
29825     +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
29826     + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
29827     + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
29828     + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
29829     + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
29830     + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
29831     + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
29832     + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
29833     +LENGTH _WARN_ $4
29834     +      F_class  $ 20
29835     +      I_class  $ 20
29836     +      U_class  $ 20
29837     +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_class $ 20 I_class $ 20 U_class $ 20 ;
29838     +      label S_REP_deg_malig = 'Standard: REP_deg_malig' ;
MPRINT(EM_DIAGRAM):   label S_REP_deg_malig = 'Standard: REP_deg_malig' ;
29839     +
29840     +      label G_age0 = 'Dummy: G_age=0' ;
MPRINT(EM_DIAGRAM):   label G_age0 = 'Dummy: G_age=0' ;
29841     +
29842     +      label G_age1 = 'Dummy: G_age=1' ;
MPRINT(EM_DIAGRAM):   label G_age1 = 'Dummy: G_age=1' ;
29843     +
29844     +      label G_age2 = 'Dummy: G_age=2' ;
MPRINT(EM_DIAGRAM):   label G_age2 = 'Dummy: G_age=2' ;
29845     +
29846     +      label G_breast_quad0 = 'Dummy: G_breast_quad=0' ;
MPRINT(EM_DIAGRAM):   label G_breast_quad0 = 'Dummy: G_breast_quad=0' ;
29847     +
29848     +      label G_breast_quad1 = 'Dummy: G_breast_quad=1' ;
MPRINT(EM_DIAGRAM):   label G_breast_quad1 = 'Dummy: G_breast_quad=1' ;
29849     +
29850     +      label G_breast_quad2 = 'Dummy: G_breast_quad=2' ;
MPRINT(EM_DIAGRAM):   label G_breast_quad2 = 'Dummy: G_breast_quad=2' ;
29851     +
29852     +      label G_inv_nodes0 = 'Dummy: G_inv_nodes=0' ;
MPRINT(EM_DIAGRAM):   label G_inv_nodes0 = 'Dummy: G_inv_nodes=0' ;
29853     +
29854     +      label G_inv_nodes1 = 'Dummy: G_inv_nodes=1' ;
MPRINT(EM_DIAGRAM):   label G_inv_nodes1 = 'Dummy: G_inv_nodes=1' ;
29855     +
29856     +      label G_tumor_size0 = 'Dummy: G_tumor_size=0' ;
MPRINT(EM_DIAGRAM):   label G_tumor_size0 = 'Dummy: G_tumor_size=0' ;
29857     +
29858     +      label G_tumor_size1 = 'Dummy: G_tumor_size=1' ;
MPRINT(EM_DIAGRAM):   label G_tumor_size1 = 'Dummy: G_tumor_size=1' ;
29859     +
29860     +      label G_tumor_size2 = 'Dummy: G_tumor_size=2' ;
MPRINT(EM_DIAGRAM):   label G_tumor_size2 = 'Dummy: G_tumor_size=2' ;
29861     +
29862     +      label G_tumor_size3 = 'Dummy: G_tumor_size=3' ;
MPRINT(EM_DIAGRAM):   label G_tumor_size3 = 'Dummy: G_tumor_size=3' ;
29863     +
29864     +      label irradiatno = 'Dummy: irradiat=no' ;
MPRINT(EM_DIAGRAM):   label irradiatno = 'Dummy: irradiat=no' ;
29865     +
29866     +      label H11 = 'Hidden: H1=1' ;
MPRINT(EM_DIAGRAM):   label H11 = 'Hidden: H1=1' ;
29867     +
29868     +      label H12 = 'Hidden: H1=2' ;
MPRINT(EM_DIAGRAM):   label H12 = 'Hidden: H1=2' ;
29869     +
29870     +      label H13 = 'Hidden: H1=3' ;
MPRINT(EM_DIAGRAM):   label H13 = 'Hidden: H1=3' ;
29871     +
29872     +      label I_class = 'Into: class' ;
MPRINT(EM_DIAGRAM):   label I_class = 'Into: class' ;
29873     +
29874     +      label F_class = 'From: class' ;
MPRINT(EM_DIAGRAM):   label F_class = 'From: class' ;
29875     +
29876     +      label U_class = 'Unnormalized Into: class' ;
MPRINT(EM_DIAGRAM):   label U_class = 'Unnormalized Into: class' ;
29877     +
29878     +      label P_classrecurrence_events = 'Predicted: class=recurrence-events' ;
MPRINT(EM_DIAGRAM):   label P_classrecurrence_events = 'Predicted: class=recurrence-events' ;
29879     +
29880     +      label R_classrecurrence_events = 'Residual: class=recurrence-events' ;
MPRINT(EM_DIAGRAM):   label R_classrecurrence_events = 'Residual: class=recurrence-events' ;
29881     +
29882     +      label P_classno_recurrence_events =
29883     +'Predicted: class=no-recurrence-events' ;
MPRINT(EM_DIAGRAM):   label P_classno_recurrence_events = 'Predicted: class=no-recurrence-events' ;
29884     +
29885     +      label R_classno_recurrence_events =
29886     +'Residual: class=no-recurrence-events' ;
MPRINT(EM_DIAGRAM):   label R_classno_recurrence_events = 'Residual: class=no-recurrence-events' ;
29887     +
29888     +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
29889     +
29890     +*** Generate dummy variables for G_age ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for G_age ;
29891     +drop G_age0 G_age1 G_age2 ;
MPRINT(EM_DIAGRAM):   drop G_age0 G_age1 G_age2 ;
29892     +if missing( G_age ) then do;
MPRINT(EM_DIAGRAM):   if missing( G_age ) then do;
29893     +   G_age0 = .;
MPRINT(EM_DIAGRAM):   G_age0 = .;
29894     +   G_age1 = .;
MPRINT(EM_DIAGRAM):   G_age1 = .;
29895     +   G_age2 = .;
MPRINT(EM_DIAGRAM):   G_age2 = .;
29896     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
29897     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
29898     +end;
MPRINT(EM_DIAGRAM):   end;
29899     +else do;
MPRINT(EM_DIAGRAM):   else do;
29900     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
29901     +   _dm12 = put( G_age , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( G_age , BEST12. );
29902     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
29903     +   if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
29904     +      G_age0 = 0;
MPRINT(EM_DIAGRAM):   G_age0 = 0;
29905     +      G_age1 = 0;
MPRINT(EM_DIAGRAM):   G_age1 = 0;
29906     +      G_age2 = 1;
MPRINT(EM_DIAGRAM):   G_age2 = 1;
29907     +   end;
MPRINT(EM_DIAGRAM):   end;
29908     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
29909     +      G_age0 = 0;
MPRINT(EM_DIAGRAM):   G_age0 = 0;
29910     +      G_age1 = 1;
MPRINT(EM_DIAGRAM):   G_age1 = 1;
29911     +      G_age2 = 0;
MPRINT(EM_DIAGRAM):   G_age2 = 0;
29912     +   end;
MPRINT(EM_DIAGRAM):   end;
29913     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
29914     +      G_age0 = -1;
MPRINT(EM_DIAGRAM):   G_age0 = -1;
29915     +      G_age1 = -1;
MPRINT(EM_DIAGRAM):   G_age1 = -1;
29916     +      G_age2 = -1;
MPRINT(EM_DIAGRAM):   G_age2 = -1;
29917     +   end;
MPRINT(EM_DIAGRAM):   end;
29918     +   else if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '0' then do;
29919     +      G_age0 = 1;
MPRINT(EM_DIAGRAM):   G_age0 = 1;
29920     +      G_age1 = 0;
MPRINT(EM_DIAGRAM):   G_age1 = 0;
29921     +      G_age2 = 0;
MPRINT(EM_DIAGRAM):   G_age2 = 0;
29922     +   end;
MPRINT(EM_DIAGRAM):   end;
29923     +   else do;
MPRINT(EM_DIAGRAM):   else do;
29924     +      G_age0 = .;
MPRINT(EM_DIAGRAM):   G_age0 = .;
29925     +      G_age1 = .;
MPRINT(EM_DIAGRAM):   G_age1 = .;
29926     +      G_age2 = .;
MPRINT(EM_DIAGRAM):   G_age2 = .;
29927     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
29928     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
29929     +   end;
MPRINT(EM_DIAGRAM):   end;
29930     +end;
MPRINT(EM_DIAGRAM):   end;
29931     +
29932     +*** Generate dummy variables for G_breast_quad ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for G_breast_quad ;
29933     +drop G_breast_quad0 G_breast_quad1 G_breast_quad2 ;
MPRINT(EM_DIAGRAM):   drop G_breast_quad0 G_breast_quad1 G_breast_quad2 ;
29934     +if missing( G_breast_quad ) then do;
MPRINT(EM_DIAGRAM):   if missing( G_breast_quad ) then do;
29935     +   G_breast_quad0 = .;
MPRINT(EM_DIAGRAM):   G_breast_quad0 = .;
29936     +   G_breast_quad1 = .;
MPRINT(EM_DIAGRAM):   G_breast_quad1 = .;
29937     +   G_breast_quad2 = .;
MPRINT(EM_DIAGRAM):   G_breast_quad2 = .;
29938     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
29939     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
29940     +end;
MPRINT(EM_DIAGRAM):   end;
29941     +else do;
MPRINT(EM_DIAGRAM):   else do;
29942     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
29943     +   _dm12 = put( G_breast_quad , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( G_breast_quad , BEST12. );
29944     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
29945     +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
29946     +      G_breast_quad0 = 1;
MPRINT(EM_DIAGRAM):   G_breast_quad0 = 1;
29947     +      G_breast_quad1 = 0;
MPRINT(EM_DIAGRAM):   G_breast_quad1 = 0;
29948     +      G_breast_quad2 = 0;
MPRINT(EM_DIAGRAM):   G_breast_quad2 = 0;
29949     +   end;
MPRINT(EM_DIAGRAM):   end;
29950     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
29951     +      G_breast_quad0 = 0;
MPRINT(EM_DIAGRAM):   G_breast_quad0 = 0;
29952     +      G_breast_quad1 = 1;
MPRINT(EM_DIAGRAM):   G_breast_quad1 = 1;
29953     +      G_breast_quad2 = 0;
MPRINT(EM_DIAGRAM):   G_breast_quad2 = 0;
29954     +   end;
MPRINT(EM_DIAGRAM):   end;
29955     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
29956     +      G_breast_quad0 = 0;
MPRINT(EM_DIAGRAM):   G_breast_quad0 = 0;
29957     +      G_breast_quad1 = 0;
MPRINT(EM_DIAGRAM):   G_breast_quad1 = 0;
29958     +      G_breast_quad2 = 1;
MPRINT(EM_DIAGRAM):   G_breast_quad2 = 1;
29959     +   end;
MPRINT(EM_DIAGRAM):   end;
29960     +   else if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '3' then do;
29961     +      G_breast_quad0 = -1;
MPRINT(EM_DIAGRAM):   G_breast_quad0 = -1;
29962     +      G_breast_quad1 = -1;
MPRINT(EM_DIAGRAM):   G_breast_quad1 = -1;
29963     +      G_breast_quad2 = -1;
MPRINT(EM_DIAGRAM):   G_breast_quad2 = -1;
29964     +   end;
MPRINT(EM_DIAGRAM):   end;
29965     +   else do;
MPRINT(EM_DIAGRAM):   else do;
29966     +      G_breast_quad0 = .;
MPRINT(EM_DIAGRAM):   G_breast_quad0 = .;
29967     +      G_breast_quad1 = .;
MPRINT(EM_DIAGRAM):   G_breast_quad1 = .;
29968     +      G_breast_quad2 = .;
MPRINT(EM_DIAGRAM):   G_breast_quad2 = .;
29969     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
29970     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
29971     +   end;
MPRINT(EM_DIAGRAM):   end;
29972     +end;
MPRINT(EM_DIAGRAM):   end;
29973     +
29974     +*** Generate dummy variables for G_inv_nodes ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for G_inv_nodes ;
29975     +drop G_inv_nodes0 G_inv_nodes1 ;
MPRINT(EM_DIAGRAM):   drop G_inv_nodes0 G_inv_nodes1 ;
29976     +if missing( G_inv_nodes ) then do;
MPRINT(EM_DIAGRAM):   if missing( G_inv_nodes ) then do;
29977     +   G_inv_nodes0 = .;
MPRINT(EM_DIAGRAM):   G_inv_nodes0 = .;
29978     +   G_inv_nodes1 = .;
MPRINT(EM_DIAGRAM):   G_inv_nodes1 = .;
29979     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
29980     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
29981     +end;
MPRINT(EM_DIAGRAM):   end;
29982     +else do;
MPRINT(EM_DIAGRAM):   else do;
29983     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
29984     +   _dm12 = put( G_inv_nodes , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( G_inv_nodes , BEST12. );
29985     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
29986     +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
29987     +      G_inv_nodes0 = 1;
MPRINT(EM_DIAGRAM):   G_inv_nodes0 = 1;
29988     +      G_inv_nodes1 = 0;
MPRINT(EM_DIAGRAM):   G_inv_nodes1 = 0;
29989     +   end;
MPRINT(EM_DIAGRAM):   end;
29990     +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
29991     +      G_inv_nodes0 = 0;
MPRINT(EM_DIAGRAM):   G_inv_nodes0 = 0;
29992     +      G_inv_nodes1 = 1;
MPRINT(EM_DIAGRAM):   G_inv_nodes1 = 1;
29993     +   end;
MPRINT(EM_DIAGRAM):   end;
29994     +   else if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '2' then do;
29995     +      G_inv_nodes0 = -1;
MPRINT(EM_DIAGRAM):   G_inv_nodes0 = -1;
29996     +      G_inv_nodes1 = -1;
MPRINT(EM_DIAGRAM):   G_inv_nodes1 = -1;
29997     +   end;
MPRINT(EM_DIAGRAM):   end;
29998     +   else do;
MPRINT(EM_DIAGRAM):   else do;
29999     +      G_inv_nodes0 = .;
MPRINT(EM_DIAGRAM):   G_inv_nodes0 = .;
30000     +      G_inv_nodes1 = .;
MPRINT(EM_DIAGRAM):   G_inv_nodes1 = .;
30001     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
30002     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
30003     +   end;
MPRINT(EM_DIAGRAM):   end;
30004     +end;
MPRINT(EM_DIAGRAM):   end;
30005     +
30006     +*** Generate dummy variables for G_tumor_size ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for G_tumor_size ;
30007     +drop G_tumor_size0 G_tumor_size1 G_tumor_size2 G_tumor_size3 ;
MPRINT(EM_DIAGRAM):   drop G_tumor_size0 G_tumor_size1 G_tumor_size2 G_tumor_size3 ;
30008     +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
30009     +G_tumor_size0 = 0;
MPRINT(EM_DIAGRAM):   G_tumor_size0 = 0;
30010     +G_tumor_size1 = 0;
MPRINT(EM_DIAGRAM):   G_tumor_size1 = 0;
30011     +G_tumor_size2 = 0;
MPRINT(EM_DIAGRAM):   G_tumor_size2 = 0;
30012     +G_tumor_size3 = 0;
MPRINT(EM_DIAGRAM):   G_tumor_size3 = 0;
30013     +if missing( G_tumor_size ) then do;
MPRINT(EM_DIAGRAM):   if missing( G_tumor_size ) then do;
30014     +   G_tumor_size0 = .;
MPRINT(EM_DIAGRAM):   G_tumor_size0 = .;
30015     +   G_tumor_size1 = .;
MPRINT(EM_DIAGRAM):   G_tumor_size1 = .;
30016     +   G_tumor_size2 = .;
MPRINT(EM_DIAGRAM):   G_tumor_size2 = .;
30017     +   G_tumor_size3 = .;
MPRINT(EM_DIAGRAM):   G_tumor_size3 = .;
30018     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
30019     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
30020     +end;
MPRINT(EM_DIAGRAM):   end;
30021     +else do;
MPRINT(EM_DIAGRAM):   else do;
30022     +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
30023     +   _dm12 = put( G_tumor_size , BEST12. );
MPRINT(EM_DIAGRAM):   _dm12 = put( G_tumor_size , BEST12. );
30024     +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
30025     +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
30026     +   if _dm12 <= '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '2' then do;
30027     +      if _dm12 <= '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 <= '1' then do;
30028     +         if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
30029     +            G_tumor_size0 = 1;
MPRINT(EM_DIAGRAM):   G_tumor_size0 = 1;
30030     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
30031     +         end;
MPRINT(EM_DIAGRAM):   end;
30032     +         else do;
MPRINT(EM_DIAGRAM):   else do;
30033     +            if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '1' then do;
30034     +               G_tumor_size1 = 1;
MPRINT(EM_DIAGRAM):   G_tumor_size1 = 1;
30035     +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
30036     +            end;
MPRINT(EM_DIAGRAM):   end;
30037     +         end;
MPRINT(EM_DIAGRAM):   end;
30038     +      end;
MPRINT(EM_DIAGRAM):   end;
30039     +      else do;
MPRINT(EM_DIAGRAM):   else do;
30040     +         if _dm12 = '2'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '2' then do;
30041     +            G_tumor_size2 = 1;
MPRINT(EM_DIAGRAM):   G_tumor_size2 = 1;
30042     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
30043     +         end;
MPRINT(EM_DIAGRAM):   end;
30044     +      end;
MPRINT(EM_DIAGRAM):   end;
30045     +   end;
MPRINT(EM_DIAGRAM):   end;
30046     +   else do;
MPRINT(EM_DIAGRAM):   else do;
30047     +      if _dm12 = '3'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '3' then do;
30048     +         G_tumor_size3 = 1;
MPRINT(EM_DIAGRAM):   G_tumor_size3 = 1;
30049     +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
30050     +      end;
MPRINT(EM_DIAGRAM):   end;
30051     +      else do;
MPRINT(EM_DIAGRAM):   else do;
30052     +         if _dm12 = '4'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '4' then do;
30053     +            G_tumor_size0 = -1;
MPRINT(EM_DIAGRAM):   G_tumor_size0 = -1;
30054     +            G_tumor_size1 = -1;
MPRINT(EM_DIAGRAM):   G_tumor_size1 = -1;
30055     +            G_tumor_size2 = -1;
MPRINT(EM_DIAGRAM):   G_tumor_size2 = -1;
30056     +            G_tumor_size3 = -1;
MPRINT(EM_DIAGRAM):   G_tumor_size3 = -1;
30057     +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
30058     +         end;
MPRINT(EM_DIAGRAM):   end;
30059     +      end;
MPRINT(EM_DIAGRAM):   end;
30060     +   end;
MPRINT(EM_DIAGRAM):   end;
30061     +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
30062     +      G_tumor_size0 = .;
MPRINT(EM_DIAGRAM):   G_tumor_size0 = .;
30063     +      G_tumor_size1 = .;
MPRINT(EM_DIAGRAM):   G_tumor_size1 = .;
30064     +      G_tumor_size2 = .;
MPRINT(EM_DIAGRAM):   G_tumor_size2 = .;
30065     +      G_tumor_size3 = .;
MPRINT(EM_DIAGRAM):   G_tumor_size3 = .;
30066     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
30067     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
30068     +   end;
MPRINT(EM_DIAGRAM):   end;
30069     +end;
MPRINT(EM_DIAGRAM):   end;
30070     +
30071     +*** Generate dummy variables for irradiat ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for irradiat ;
30072     +drop irradiatno ;
MPRINT(EM_DIAGRAM):   drop irradiatno ;
30073     +if missing( irradiat ) then do;
MPRINT(EM_DIAGRAM):   if missing( irradiat ) then do;
30074     +   irradiatno = .;
MPRINT(EM_DIAGRAM):   irradiatno = .;
30075     +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
30076     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
30077     +end;
MPRINT(EM_DIAGRAM):   end;
30078     +else do;
MPRINT(EM_DIAGRAM):   else do;
30079     +   length _dm3 $ 3; drop _dm3 ;
MPRINT(EM_DIAGRAM):   length _dm3 $ 3;
MPRINT(EM_DIAGRAM):   drop _dm3 ;
30080     +   _dm3 = put( irradiat , $3. );
MPRINT(EM_DIAGRAM):   _dm3 = put( irradiat , $3. );
30081     +   %DMNORMIP( _dm3 )
MPRINT(DMNORMIP):   call dmnorm(_dm3,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
30082     +   if _dm3 = 'NO'  then do;
MPRINT(EM_DIAGRAM):   if _dm3 = 'NO' then do;
30083     +      irradiatno = 1;
MPRINT(EM_DIAGRAM):   irradiatno = 1;
30084     +   end;
MPRINT(EM_DIAGRAM):   end;
30085     +   else if _dm3 = 'YES'  then do;
MPRINT(EM_DIAGRAM):   else if _dm3 = 'YES' then do;
30086     +      irradiatno = -1;
MPRINT(EM_DIAGRAM):   irradiatno = -1;
30087     +   end;
MPRINT(EM_DIAGRAM):   end;
30088     +   else do;
MPRINT(EM_DIAGRAM):   else do;
30089     +      irradiatno = .;
MPRINT(EM_DIAGRAM):   irradiatno = .;
30090     +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
30091     +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
30092     +   end;
MPRINT(EM_DIAGRAM):   end;
30093     +end;
MPRINT(EM_DIAGRAM):   end;
30094     +
30095     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
30096     +*** Checking missing input Interval
30097     +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
30098     +
30099     +IF NMISS(
30100     +   REP_deg_malig   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( REP_deg_malig ) THEN DO;
30101     +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
30102     +
30103     +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
30104     +END;
MPRINT(EM_DIAGRAM):   END;
30105     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
30106     +*** Writing the Node intvl ;
MPRINT(EM_DIAGRAM):   *** Writing the Node intvl ;
30107     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
30108     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
30109     +   S_REP_deg_malig  =    -2.78253429049127 +     1.35716746031314 *
30110     +        REP_deg_malig ;
MPRINT(EM_DIAGRAM):   S_REP_deg_malig = -2.78253429049127 + 1.35716746031314 * REP_deg_malig ;
30111     +END;
MPRINT(EM_DIAGRAM):   END;
30112     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
30113     +   IF MISSING( REP_deg_malig ) THEN S_REP_deg_malig  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( REP_deg_malig ) THEN S_REP_deg_malig = . ;
30114     +   ELSE S_REP_deg_malig  =    -2.78253429049127 +     1.35716746031314 *
30115     +        REP_deg_malig ;
MPRINT(EM_DIAGRAM):   ELSE S_REP_deg_malig = -2.78253429049127 + 1.35716746031314 * REP_deg_malig ;
30116     +END;
MPRINT(EM_DIAGRAM):   END;
30117     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
30118     +*** Writing the Node nom ;
MPRINT(EM_DIAGRAM):   *** Writing the Node nom ;
30119     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
30120     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
30121     +*** Writing the Node H1 ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1 ;
30122     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
30123     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
30124     +   H11  =    -0.83930176470528 * S_REP_deg_malig ;
MPRINT(EM_DIAGRAM):   H11 = -0.83930176470528 * S_REP_deg_malig ;
30125     +   H12  =    -0.06629291498954 * S_REP_deg_malig ;
MPRINT(EM_DIAGRAM):   H12 = -0.06629291498954 * S_REP_deg_malig ;
30126     +   H13  =     0.86650083439136 * S_REP_deg_malig ;
MPRINT(EM_DIAGRAM):   H13 = 0.86650083439136 * S_REP_deg_malig ;
30127     +   H11  = H11  +    -0.52575552091022 * G_age0  +    -0.02452272577375 *
30128     +        G_age1  +    -0.59459844636028 * G_age2  +     0.46958511522765 *
30129     +        G_breast_quad0  +    -0.82566780020246 * G_breast_quad1
30130     +          +    -0.98644603735078 * G_breast_quad2  +    -0.01252434754666 *
30131     +        G_inv_nodes0  +    -0.72926694626072 * G_inv_nodes1
30132     +          +    -1.25787140315568 * G_tumor_size0  +    -0.18033239984222 *
30133     +        G_tumor_size1  +     0.46363850845309 * G_tumor_size2
30134     +          +     1.20269753959191 * G_tumor_size3  +    -1.09214961530351 *
30135     +        irradiatno ;
MPRINT(EM_DIAGRAM):   H11 = H11 + -0.52575552091022 * G_age0 + -0.02452272577375 * G_age1 + -0.59459844636028 * G_age2 + 0.46958511522765 * G_breast_quad0 + -0.82566780020246 * G_breast_quad1 + -0.98644603735078 * G_breast_quad2 + -0.01252434754666 * 
G_inv_nodes0 + -0.72926694626072 * G_inv_nodes1 + -1.25787140315568 * G_tumor_size0 + -0.18033239984222 * G_tumor_size1 + 0.46363850845309 * G_tumor_size2 + 1.20269753959191 * G_tumor_size3 + -1.09214961530351 * irradiatno ;
30136     +   H12  = H12  +     -0.1981692188932 * G_age0  +     0.67759980709922 *
30137     +        G_age1  +     0.48274044435058 * G_age2  +    -1.02718031870729 *
30138     +        G_breast_quad0  +     1.77649126784718 * G_breast_quad1
30139     +          +    -0.48974919382025 * G_breast_quad2  +    -0.03624758417098 *
30140     +        G_inv_nodes0  +    -0.07266712102552 * G_inv_nodes1
30141     +          +    -1.60494725258818 * G_tumor_size0  +    -0.01977100118694 *
30142     +        G_tumor_size1  +    -0.56438121580537 * G_tumor_size2
30143     +          +    -1.14834909127965 * G_tumor_size3  +     1.41435531346343 *
30144     +        irradiatno ;
MPRINT(EM_DIAGRAM):   H12 = H12 + -0.1981692188932 * G_age0 + 0.67759980709922 * G_age1 + 0.48274044435058 * G_age2 + -1.02718031870729 * G_breast_quad0 + 1.77649126784718 * G_breast_quad1 + -0.48974919382025 * G_breast_quad2 + -0.03624758417098 * 
G_inv_nodes0 + -0.07266712102552 * G_inv_nodes1 + -1.60494725258818 * G_tumor_size0 + -0.01977100118694 * G_tumor_size1 + -0.56438121580537 * G_tumor_size2 + -1.14834909127965 * G_tumor_size3 + 1.41435531346343 * irradiatno ;
30145     +   H13  = H13  +    -0.55188459206899 * G_age0  +    -0.18823223344893 *
30146     +        G_age1  +     0.40627160142665 * G_age2  +    -0.60334697509908 *
30147     +        G_breast_quad0  +    -0.71080085203945 * G_breast_quad1
30148     +          +     -0.1341761497556 * G_breast_quad2  +    -1.10354676934115 *
30149     +        G_inv_nodes0  +     -0.3469636466685 * G_inv_nodes1
30150     +          +    -0.69262936767089 * G_tumor_size0  +     0.35938238796518 *
30151     +        G_tumor_size1  +     0.24019729603027 * G_tumor_size2
30152     +          +     0.14397568240947 * G_tumor_size3  +    -0.11771226502995 *
30153     +        irradiatno ;
MPRINT(EM_DIAGRAM):   H13 = H13 + -0.55188459206899 * G_age0 + -0.18823223344893 * G_age1 + 0.40627160142665 * G_age2 + -0.60334697509908 * G_breast_quad0 + -0.71080085203945 * G_breast_quad1 + -0.1341761497556 * G_breast_quad2 + -1.10354676934115 * 
G_inv_nodes0 + -0.3469636466685 * G_inv_nodes1 + -0.69262936767089 * G_tumor_size0 + 0.35938238796518 * G_tumor_size1 + 0.24019729603027 * G_tumor_size2 + 0.14397568240947 * G_tumor_size3 + -0.11771226502995 * irradiatno ;
30154     +   H11  =    -0.17155944104582 + H11 ;
MPRINT(EM_DIAGRAM):   H11 = -0.17155944104582 + H11 ;
30155     +   H12  =     0.85968816060862 + H12 ;
MPRINT(EM_DIAGRAM):   H12 = 0.85968816060862 + H12 ;
30156     +   H13  =     0.12939151758083 + H13 ;
MPRINT(EM_DIAGRAM):   H13 = 0.12939151758083 + H13 ;
30157     +   H11  = TANH(H11 );
MPRINT(EM_DIAGRAM):   H11 = TANH(H11 );
30158     +   H12  = TANH(H12 );
MPRINT(EM_DIAGRAM):   H12 = TANH(H12 );
30159     +   H13  = TANH(H13 );
MPRINT(EM_DIAGRAM):   H13 = TANH(H13 );
30160     +END;
MPRINT(EM_DIAGRAM):   END;
30161     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
30162     +   H11  = .;
MPRINT(EM_DIAGRAM):   H11 = .;
30163     +   H12  = .;
MPRINT(EM_DIAGRAM):   H12 = .;
30164     +   H13  = .;
MPRINT(EM_DIAGRAM):   H13 = .;
30165     +END;
MPRINT(EM_DIAGRAM):   END;
30166     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
30167     +*** Writing the Node class ;
MPRINT(EM_DIAGRAM):   *** Writing the Node class ;
30168     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
30169     +
30170     +*** Generate dummy variables for class ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for class ;
30171     +drop classrecurrence_events classno_recurrence_events ;
MPRINT(EM_DIAGRAM):   drop classrecurrence_events classno_recurrence_events ;
30172     +label F_class = 'From: class' ;
MPRINT(EM_DIAGRAM):   label F_class = 'From: class' ;
30173     +length F_class $ 20;
MPRINT(EM_DIAGRAM):   length F_class $ 20;
30174     +F_class = put( class , $20. );
MPRINT(EM_DIAGRAM):   F_class = put( class , $20. );
30175     +%DMNORMIP( F_class )
MPRINT(DMNORMIP):   call dmnorm(F_class,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
30176     +if missing( class ) then do;
MPRINT(EM_DIAGRAM):   if missing( class ) then do;
30177     +   classrecurrence_events = .;
MPRINT(EM_DIAGRAM):   classrecurrence_events = .;
30178     +   classno_recurrence_events = .;
MPRINT(EM_DIAGRAM):   classno_recurrence_events = .;
30179     +end;
MPRINT(EM_DIAGRAM):   end;
30180     +else do;
MPRINT(EM_DIAGRAM):   else do;
30181     +   if F_class = 'NO-RECURRENCE-EVENTS'  then do;
MPRINT(EM_DIAGRAM):   if F_class = 'NO-RECURRENCE-EVENTS' then do;
30182     +      classrecurrence_events = 0;
MPRINT(EM_DIAGRAM):   classrecurrence_events = 0;
30183     +      classno_recurrence_events = 1;
MPRINT(EM_DIAGRAM):   classno_recurrence_events = 1;
30184     +   end;
MPRINT(EM_DIAGRAM):   end;
30185     +   else if F_class = 'RECURRENCE-EVENTS'  then do;
MPRINT(EM_DIAGRAM):   else if F_class = 'RECURRENCE-EVENTS' then do;
30186     +      classrecurrence_events = 1;
MPRINT(EM_DIAGRAM):   classrecurrence_events = 1;
30187     +      classno_recurrence_events = 0;
MPRINT(EM_DIAGRAM):   classno_recurrence_events = 0;
30188     +   end;
MPRINT(EM_DIAGRAM):   end;
30189     +   else do;
MPRINT(EM_DIAGRAM):   else do;
30190     +      classrecurrence_events = .;
MPRINT(EM_DIAGRAM):   classrecurrence_events = .;
30191     +      classno_recurrence_events = .;
MPRINT(EM_DIAGRAM):   classno_recurrence_events = .;
30192     +   end;
MPRINT(EM_DIAGRAM):   end;
30193     +end;
MPRINT(EM_DIAGRAM):   end;
30194     +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
30195     +   P_classrecurrence_events  =     2.72345384145319 * H11
30196     +          +     3.10897909812313 * H12  +     3.41198629847837 * H13 ;
MPRINT(EM_DIAGRAM):   P_classrecurrence_events = 2.72345384145319 * H11 + 3.10897909812313 * H12 + 3.41198629847837 * H13 ;
30197     +   P_classrecurrence_events  =    -0.09770061547311 + P_classrecurrence_events
30198     +         ;
MPRINT(EM_DIAGRAM):   P_classrecurrence_events = -0.09770061547311 + P_classrecurrence_events ;
30199     +   P_classno_recurrence_events  = 0;
MPRINT(EM_DIAGRAM):   P_classno_recurrence_events = 0;
30200     +   _MAX_ = MAX (P_classrecurrence_events , P_classno_recurrence_events );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_classrecurrence_events , P_classno_recurrence_events );
30201     +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
30202     +   P_classrecurrence_events  = EXP(P_classrecurrence_events  - _MAX_);
MPRINT(EM_DIAGRAM):   P_classrecurrence_events = EXP(P_classrecurrence_events - _MAX_);
30203     +   _SUM_ = _SUM_ + P_classrecurrence_events ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_classrecurrence_events ;
30204     +   P_classno_recurrence_events  = EXP(P_classno_recurrence_events  - _MAX_);
MPRINT(EM_DIAGRAM):   P_classno_recurrence_events = EXP(P_classno_recurrence_events - _MAX_);
30205     +   _SUM_ = _SUM_ + P_classno_recurrence_events ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_classno_recurrence_events ;
30206     +   P_classrecurrence_events  = P_classrecurrence_events  / _SUM_;
MPRINT(EM_DIAGRAM):   P_classrecurrence_events = P_classrecurrence_events / _SUM_;
30207     +   P_classno_recurrence_events  = P_classno_recurrence_events  / _SUM_;
MPRINT(EM_DIAGRAM):   P_classno_recurrence_events = P_classno_recurrence_events / _SUM_;
30208     +END;
MPRINT(EM_DIAGRAM):   END;
30209     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
30210     +   P_classrecurrence_events  = .;
MPRINT(EM_DIAGRAM):   P_classrecurrence_events = .;
30211     +   P_classno_recurrence_events  = .;
MPRINT(EM_DIAGRAM):   P_classno_recurrence_events = .;
30212     +END;
MPRINT(EM_DIAGRAM):   END;
30213     +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
30214     +   P_classrecurrence_events  =      0.2964824120603;
MPRINT(EM_DIAGRAM):   P_classrecurrence_events = 0.2964824120603;
30215     +   P_classno_recurrence_events  =     0.70351758793969;
MPRINT(EM_DIAGRAM):   P_classno_recurrence_events = 0.70351758793969;
30216     +END;
MPRINT(EM_DIAGRAM):   END;
30217     +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
30218     +*** Writing the Residuals  of the Node class ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node class ;
30219     +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
30220     +IF MISSING( classrecurrence_events ) THEN R_classrecurrence_events  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( classrecurrence_events ) THEN R_classrecurrence_events = . ;
30221     +ELSE R_classrecurrence_events  = classrecurrence_events  -
30222     +        P_classrecurrence_events ;
MPRINT(EM_DIAGRAM):   ELSE R_classrecurrence_events = classrecurrence_events - P_classrecurrence_events ;
30223     +IF MISSING( classno_recurrence_events ) THEN R_classno_recurrence_events
30224     +          = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( classno_recurrence_events ) THEN R_classno_recurrence_events = . ;
30225     +ELSE R_classno_recurrence_events  = classno_recurrence_events  -
30226     +        P_classno_recurrence_events ;
MPRINT(EM_DIAGRAM):   ELSE R_classno_recurrence_events = classno_recurrence_events - P_classno_recurrence_events ;
30227     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
30228     +*** Writing the I_class  AND U_class ;
MPRINT(EM_DIAGRAM):   *** Writing the I_class AND U_class ;
30229     +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
30230     +_MAXP_ = P_classrecurrence_events ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_classrecurrence_events ;
30231     +I_class  = "RECURRENCE-EVENTS   " ;
MPRINT(EM_DIAGRAM):   I_class = "RECURRENCE-EVENTS   " ;
30232     +U_class  = "recurrence-events   " ;
MPRINT(EM_DIAGRAM):   U_class = "recurrence-events   " ;
30233     +IF( _MAXP_ LT P_classno_recurrence_events  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_classno_recurrence_events ) THEN DO;
30234     +   _MAXP_ = P_classno_recurrence_events ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_classno_recurrence_events ;
30235     +   I_class  = "NO-RECURRENCE-EVENTS" ;
MPRINT(EM_DIAGRAM):   I_class = "NO-RECURRENCE-EVENTS" ;
30236     +   U_class  = "no-recurrence-events" ;
MPRINT(EM_DIAGRAM):   U_class = "no-recurrence-events" ;
30237     +END;
MPRINT(EM_DIAGRAM):   END;
30238     +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
30239     +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
30240     +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
30241     +drop
30242     +H11
30243     +H12
30244     +H13
30245     +;
MPRINT(EM_DIAGRAM):   drop H11 H12 H13 ;
30246     +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
30247      run;

NOTE: DATA STEP view saved on file EMWS1.NEURAL_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.VARSEL_VALIDATE.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.06 seconds
      

MPRINT(EM_DIAGRAM):   quit;
30248      quit;
30249      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
30250      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
30251      * Neural: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Neural: Computing metadata for TRAIN data;
30252      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS1.NEURAL_TRAIN.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.06 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\Users\brahm\OneDrive\Desktop\BAN210_Project\Workspaces\EMWS1\Neural\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.Neural_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.Neural_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.Neural_TRAIN out=WORK.M3823XD6 noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3823XD6;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M3823XD6(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3823XD6;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M3823XD6;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M06AE25I NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M06AE25I;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M06AE25I;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M27Z59M_(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M06AE25I;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M06AE25I;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M06AE25I;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" 
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M06AE25I;
MPRINT(EMADVISECOLUMNS):   set WORK.M06AE25I;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower 
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Varsel_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Varsel_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Neural";
MPRINT(EM_DIAGRAM):   length model $200;
MPRINT(EM_DIAGRAM):   label MODEL = "Model Node";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_CLASSRECURRENCE_EVENTS") creator = "Neural";
MPRINT(EM_DIAGRAM):   when("R_CLASSRECURRENCE_EVENTS") creator = "Neural";
MPRINT(EM_DIAGRAM):   when("P_CLASSNO_RECURRENCE_EVENTS") creator = "Neural";
MPRINT(EM_DIAGRAM):   when("R_CLASSNO_RECURRENCE_EVENTS") creator = "Neural";
MPRINT(EM_DIAGRAM):   when("F_CLASS") creator = "Neural";
MPRINT(EM_DIAGRAM):   when("I_CLASS") creator = "Neural";
MPRINT(EM_DIAGRAM):   when("U_CLASS") creator = "Neural";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Neural";
MPRINT(EM_DIAGRAM):   when("CLASS") model = "Neural";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Neural: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
30605      data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
30606      set EMWS1.Neural_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_EMINFO;
30607      where DATA='Neural' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Neural' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
30608      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS1.NEURAL_EMINFO.
      WHERE (DATA='Neural') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

30609      data EMWS1.Neural_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS1.Neural_EMINFO;
30610      length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
30611      input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
30612      cards;
MPRINT(EM_DIAGRAM):   cards;

NOTE: The data set EMWS1.NEURAL_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):   run;
30616      run;
30617      data EMWS1.Neural_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.Neural_EMINFO;
30618      set EMWS1.Neural_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Neural_EMINFO WORK.MODELTEMP_INFO;
30619      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS1.NEURAL_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS1.NEURAL_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

30620      proc sort data = EMWS1.Neural_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.Neural_EMINFO NOTHREADS;
30621      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
30622      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS1.NEURAL_EMINFO.
NOTE: The data set EMWS1.NEURAL_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: View EMWS1.NEURAL_TRAIN.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
      
NOTE: View EMWS1.NEURAL_VALIDATE.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.06 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;

MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "August 07, 2022" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "19:13:50" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                August 07, 2022
Time:                19:13:50
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O28NTRH9 "C:\Users\brahm\OneDrive\Desktop\BAN210_Project\Workspaces\EMWS1\Tree\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O28NTRH9 new;
MPRINT(EM_DIAGRAM):   run;
67193      %let EMEXCEPTIONSTRING=;
67194      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
67195      * SCORE: Tree;
MPRINT(EM_DIAGRAM):   * SCORE: Tree;
67196      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
67197      %let EM_ACTION = SCORE;
67198      %let syscc = 0;
67199      %macro main;
67200      
67201        %if %upcase(&EM_ACTION) = CREATE %then %do;
67202          filename temp catalog 'sashelp.emmodl.tree_create.source';
67203          %include temp;
67204          filename temp;
67205      
67206          %em_tree_create;
67207        %end;
67208      
67209         %else
67210         %if %upcase(&EM_ACTION) = TRAIN %then %do;
67211      
67212             filename temp catalog 'sashelp.emmodl.tree_train.source';
67213             %include temp;
67214             filename temp;
67215             %em_tree_train;
67216         %end;
67217      
67218        %else
67219        %if %upcase(&EM_ACTION) = SCORE %then %do;
67220          filename temp catalog 'sashelp.emmodl.tree_score.source';
67221          %include temp;
67222          filename temp;
67223      
67224          %em_tree_score;
67225      
67226        %end;
67227      
67228        %else
67229        %if %upcase(&EM_ACTION) = REPORT %then %do;
67230      
67231             filename temp catalog 'sashelp.emmodl.tree_report.source';
67232             %include temp;
67233             filename temp;
67234      
67235             %em_tree_report;
67236         %end;
67237      
67238        %else
67239        %if %upcase(&EM_ACTION) = OPENINT %then %do;
67240      
67241             filename temp catalog 'sashelp.emmodl.tree_actions.source';
67242             %include temp;
67243             filename temp;
67244             %EM_TREE_OPENTREEVIEWER;
67245      
67246         %end;
67247      
67248        %else
67249        %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
67250      
67251             filename temp catalog 'sashelp.emmodl.tree_actions.source';
67252             %include temp;
67253             filename temp;
67254             %EM_TREE_CLOSETREEVIEWER;
67255      
67256         %end;
67257      
67258      
67259         %doendm:
67260      %mend main;
67261      
67262      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emmodl.tree_score.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_SCORE.SOURCE.
67264     +%macro em_tree_score;
67266     +   /* determine if multiple targets will be processed */
67267     +   %let em_tree_multipleTargets=N;
67268     +   %let em_tree_numTarget=1;
67269     +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
67270     +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
67271     +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
67272     +         %let em_tree_multipleTargets=N;
67273     +      %end;
67274     +      %else %do;
67275     +         /* create macro array of targets  */
67276     +         data _null_;
67277     +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
67278     +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
67279     +           if eof then
67280     +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
67281     +        run;
67283     +        %if &em_tree_numTarget gt 1 %then %do;
67284     +           %let em_tree_multipleTargets=Y;
67285     +        %end;
67286     +      %end;
67287     +   %end;
67289     +   /* build flow and publish scoring code */
67290     +   %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
67291     +   %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
67293     +   filename treeflow "&EM_USER_TREEFLOW";
67294     +   filename treepub "&EM_USER_TREEPUBLISH";
67296     +   filename flowref  "&EM_FILE_EMFLOWSCORECODE";
67297     +   filename pubref   "&EM_FILE_EMPUBLISHSCORECODE";
67299     +   %em_copyfile(infref=treeflow, outfref=flowref);
67300     +   %em_copyfile(infref=treepub, outfref=pubref);
67302     +   filename treeflow;
67303     +   filename treepub;
67305     +   /* if priors are used, add code to generate unadjusted residuals in export */
67306     +   %let useAdjPriors = N;
67307     +   data _null_;
67308     +     set &EM_DEC_DECMETA(where=(_TYPE_="DECPRIOR"));
67309     +     if USE="Y" then call symput('useAdjPriors', 'Y');
67310     +   run;
67311     +   %if (("&em_tree_multipleTargets" eq "N") AND ("&useAdjPriors" eq "Y")) %then %do;
67312     +      filename temp catalog 'sashelp.emutil.em_makeunadjustedresidualvars.source';
67313     +      %include temp;
67314     +      filename temp;
67316     +      %EM_GETNAME(key=adjResidualCode, type=FILE, extension=sas);
67317     +      filename adjref "&EM_USER_adjResidualCode";
67318     +      %makeUnadjustedResidualVars(target=%EM_TARGET, decmeta=&EM_DEC_DECMETA, fref=adjref);
67320     +      %em_copyfile(infref=adjref, outfref=flowref, append=Y);
67322     +      filename adjref;
67323     +   %end;
67325     +   /* LEAF */
67326     +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
67327     +      data _null_;
67328     +        file flowref mod;
67329     +        put 'drop _LEAF_;';
67330     +      run;
67332     +      data _null_;
67333     +        file pubref mod;
67334     +        put 'drop _LEAF_;';
67335     +      run;
67337     +   %end;
67339     +   filename flowref;
67340     +   filename pubref;
67342     +   /* em_metachange code */
67343     +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
67344     +     %EM_METACHANGE(name=_NODE_, role=&EM_PROPERTY_NODEROLE, LEVEL=NOMINAL);
67345     +   %end;
67347     +   /* variable selection based on importance stat    */
67348     +   %if "&EM_PROPERTY_VARSELECTION" eq "Y" %then %do;
67349     +     %EM_GETNAME(key=OUTIMPORT, type=DATA);
67350     +     %let dsid = %sysfunc(open(&EM_USER_OUTIMPORT(where=(IMPORTANCE<0.05))));
67351     +     %let varnum = %sysfunc(varnum(&dsid, NAME));
67352     +     %let obs = %sysfunc(fetch(&dsid));
67353     +     %do %while(&obs=0);
67354     +       %let temp = %nrbquote(%sysfunc(getvarc(&dsid, &varnum)));
67355     +       %let varname = %nrbquote(%sysfunc(tranwrd(&temp,  %str(%"),"")));
67356     +       %EM_METACHANGE(name=&varname, role=REJECTED);
67357     +       %let obs = %sysfunc(fetch(&dsid));
67358     +     %end;
67359     +     %if &dsid %then %let dsid=%sysfunc(close(&dsid));
67360     +   %end;
67362     +   /* set Q_ varaibles to role of ASSESS when in the presense of prior probabilities */
67363     +   %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
67364     +    %let tree_pred_vars = ;
67365     +    %let tree_pred_lvl =;
67366     +    %let numpred= 0;
67368     +    data _null_;
67369     +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
67370     +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
67371     +     call symput('tree_pred_lvl'!!strip(put(_N_, BEST.)), strip(LEVEL));
67372     +     if eof then
67373     +       call symput('numpred', strip(put(_N_, BEST.)));
67374     +    run;
67375     +   %end;
67377     +   %if &numpred ne 0 %then %do;
67378     +    %do i=1 %to &numpred;
67379     +      %let qpred = Q%substr(&&tree_pred_vars&i,2);
67380     +      %EM_METACHANGE(name=&qpred, role=ASSESS);
67381     +    %end;
67382     +   %end;
67384     +   /* determine if multiple targets will be processed */
67385     +   %let em_tree_multipleTargets=N;
67386     +   %let em_tree_numTarget=1;
67387     +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
67388     +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
67389     +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
67390     +         %let em_tree_multipleTargets=N;
67391     +      %end;
67392     +      %else %do;
67393     +        data _null_;
67394     +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
67395     +          if eof then
67396     +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
67397     +        run;
67399     +        %if &em_tree_numTarget gt 1 %then %do;
67400     +           %let em_tree_multipleTargets=Y;
67401     +        %end;
67402     +     %end;
67403     +   %end;
67405     +   /* need to include this code to do the %em_report for OUTIMPORT here instead of in Report code so _loop data set is created when group processing */
67406     +   %if "&em_tree_multipleTargets" eq "N" %then %do;
67408     +      /* variable importance */
67409     +      %EM_GETNAME(key=OUTIMPORT, type=DATA);
67410     +      %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
67412     +         %let validexist=0;
67413     +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
67414     +           %let validexist=1;
67415     +         %end;
67417     +         /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
67418     +         /* and the columns may not be generated                                                                                 */
67419     +         %let em_tree_cvexists=;
67420     +         %let em_tree_surrexists=.;
67421     +         data _null_;
67422     +            set &EM_USER_OUTIMPORT (obs=2) end=eof;
67423     +            if eof then do ;
67424     +               call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
67425     +               call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
67426     +            end;
67427     +         run;
67429     +         data &EM_USER_OUTIMPORT;
67430     +            set &EM_USER_OUTIMPORT;
67432     +            /* format columns based on Precison value specified */
67433     +            format importance 15.&EM_PROPERTY_PRECISION
67434     +                 %if &validexist %then %do;
67435     +                   vimportance ratio 15.&EM_PROPERTY_PRECISION
67436     +                 %end;
67437     +                 %if "&EM_TREE_CVEXISTS" ne "." %then %do;
67438     +                   cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
67439     +                 %end;
67440     +            ;
67441     +            label  NAME       = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, noquote))"
67442     +                 LABEL        = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, noquote))"
67443     +                 NRULES       = "%sysfunc(sasmsg(sashelp.dmine, rpt_nrules_vlabel, noquote))"
67444     +                 IMPORTANCE   = "%sysfunc(sasmsg(sashelp.dmine, rpt_importance_vlabel, noquote))"
67445     +                 %if "&em_tree_surrexists" ne "" %then %do;
67446     +                   NSURROGATES  = "%sysfunc(sasmsg(sashelp.dmine, rpt_nsurrogates_vlabel, noquote))"
67447     +                 %end;
67448     +                 %if &validexist %then %do;
67449     +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
67450     +                   RATIO       = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
67451     +                 %end;
67452     +                 %if "&EM_TREE_CVEXISTS" ne "" %then %do;
67453     +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
67454     +                   CVIMPORTANCE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_cvimport_vlabel, noquote))"
67455     +                   CVRULES= "%sysfunc(sasmsg(sashelp.dmine, rpt_cvrules_vlabel, noquote))"
67456     +                   RATIO = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
67457     +                 %end;
67458     +            ;
67459     +         run;
67461     +         %EM_REPORT(key=OUTIMPORT, viewtype=DATA, block=MODEL, description=IMPORTANCE, autodisplay=N);
67462     +      %end;
67463     +   %end;
67465     +   %doendm:
67466     +%mend em_tree_score;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):   filename treeflow "C:\Users\brahm\OneDrive\Desktop\BAN210_Project\Workspaces\EMWS1\Tree\TREEFLOW.sas";
MPRINT(EM_TREE_SCORE):   filename treepub "C:\Users\brahm\OneDrive\Desktop\BAN210_Project\Workspaces\EMWS1\Tree\TREEPUBLISH.sas";
MPRINT(EM_TREE_SCORE):   filename flowref "C:\Users\brahm\OneDrive\Desktop\BAN210_Project\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas";
MPRINT(EM_TREE_SCORE):   filename pubref "C:\Users\brahm\OneDrive\Desktop\BAN210_Project\Workspaces\EMWS1\Tree\EMPUBLISHSCORE.sas";
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file flowref lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("treeflow",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file FLOWREF is:
      Filename=C:\Users\brahm\OneDrive\Desktop\BAN210_Project\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=07Aug2022:19:13:50,
      Create Time=07Aug2022:18:34:16

NOTE: 102 records were written to the file FLOWREF.
      The minimum record length was 1.
      The maximum record length was 77.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file pubref lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("treepub",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;

NOTE: The file PUBREF is:
      Filename=C:\Users\brahm\OneDrive\Desktop\BAN210_Project\Workspaces\EMWS1\Tree\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=07Aug2022:19:13:50,
      Create Time=07Aug2022:18:34:16

NOTE: 78 records were written to the file PUBREF.
      The minimum record length was 1.
      The maximum record length was 77.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):   filename treeflow;
NOTE: Fileref TREEFLOW has been deassigned.
MPRINT(EM_TREE_SCORE):   filename treepub;
NOTE: Fileref TREEPUB has been deassigned.
MPRINT(EM_TREE_SCORE):   data _null_;
MPRINT(EM_TREE_SCORE):   set EMWS1.Tree_class_DM(where=(_TYPE_="DECPRIOR"));
MPRINT(EM_TREE_SCORE):   if USE="Y" then call symput('useAdjPriors', 'Y');
MPRINT(EM_TREE_SCORE):   run;

NOTE: There were 1 observations read from the data set EMWS1.TREE_CLASS_DM.
      WHERE _TYPE_='DECPRIOR';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_SCORE):   data _null_;
MPRINT(EM_TREE_SCORE):   file flowref mod;
MPRINT(EM_TREE_SCORE):   put 'drop _LEAF_;';
MPRINT(EM_TREE_SCORE):   run;

NOTE: The file FLOWREF is:
      Filename=C:\Users\brahm\OneDrive\Desktop\BAN210_Project\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=4217,
      Last Modified=07Aug2022:19:13:50,
      Create Time=07Aug2022:18:34:16

NOTE: 1 record was written to the file FLOWREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_SCORE):   data _null_;
MPRINT(EM_TREE_SCORE):   file pubref mod;
MPRINT(EM_TREE_SCORE):   put 'drop _LEAF_;';
MPRINT(EM_TREE_SCORE):   run;

NOTE: The file PUBREF is:
      Filename=C:\Users\brahm\OneDrive\Desktop\BAN210_Project\Workspaces\EMWS1\Tree\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=3302,
      Last Modified=07Aug2022:19:13:50,
      Create Time=07Aug2022:18:34:16

NOTE: 1 record was written to the file PUBREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_SCORE):   filename flowref;
NOTE: Fileref FLOWREF has been deassigned.
MPRINT(EM_TREE_SCORE):   filename pubref;
NOTE: Fileref PUBREF has been deassigned.
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   length KEY $32 DELETE $1 UNAME $32 ROLE $32 LEVEL $10 ORDER $8 COMMENT $64 LOWERLIMIT 8 UPPERLIMIT 8;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("_NODE_");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("SEGMENT");
MPRINT(EM_METACHANGE):   LEVEL = upcase("NOMINAL");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   run;

NOTE: The data set WORK.EM_METACHANGE has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("age                             ");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: There were 1 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("breast                          ");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: There were 2 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 3 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("breast_quad                     ");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: There were 3 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 4 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("menopause                       ");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: There were 4 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("irradiat                        ");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: There were 5 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 6 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("tumor_size                      ");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: There were 6 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 7 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("node_caps                       ");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("REJECTED");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: There were 7 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):   data _null_;
MPRINT(EM_TREE_SCORE):   set EMWS1.Tree_class_DM(where=(_TYPE_="PREDICTED")) end=eof;
MPRINT(EM_TREE_SCORE):   call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
MPRINT(EM_TREE_SCORE):   call symput('tree_pred_lvl'!!strip(put(_N_, BEST.)), strip(LEVEL));
MPRINT(EM_TREE_SCORE):   if eof then call symput('numpred', strip(put(_N_, BEST.)));
MPRINT(EM_TREE_SCORE):   run;

NOTE: There were 2 observations read from the data set EMWS1.TREE_CLASS_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("Q_classrecurrence_events");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("ASSESS");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: There were 8 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 9 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_METACHANGE):   data WORK.EM_METACHANGE;
MPRINT(EM_METACHANGE):   set WORK.EM_METACHANGE end=eof;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   if eof then do;
MPRINT(EM_METACHANGE):   KEY = upcase("CDELTA_TRAIN");
MPRINT(EM_METACHANGE):   UNAME = upcase("Q_classno_recurrence_events");
MPRINT(EM_METACHANGE):   DELETE = upcase("N");
MPRINT(EM_METACHANGE):   ROLE = upcase("ASSESS");
MPRINT(EM_METACHANGE):   LEVEL = upcase("");
MPRINT(EM_METACHANGE):   ORDER = upcase("");
MPRINT(EM_METACHANGE):   COMMENT = "";
MPRINT(EM_METACHANGE):   LOWERLIMIT = .;
MPRINT(EM_METACHANGE):   UPPERLIMIT = .;
MPRINT(EM_METACHANGE):   output;
MPRINT(EM_METACHANGE):   end;
MPRINT(EM_METACHANGE):   run;

NOTE: There were 9 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 10 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):  ;
MPRINT(EM_TREE_SCORE):   data _null_;
MPRINT(EM_TREE_SCORE):   set EMWS1.Tree_OUTIMPORT (obs=2) end=eof;
MPRINT(EM_TREE_SCORE):   if eof then do ;
MPRINT(EM_TREE_SCORE):   call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
MPRINT(EM_TREE_SCORE):   call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
MPRINT(EM_TREE_SCORE):   end;
MPRINT(EM_TREE_SCORE):   run;

NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_TREE_SCORE):   data EMWS1.Tree_OUTIMPORT;
MPRINT(EM_TREE_SCORE):   set EMWS1.Tree_OUTIMPORT;
MPRINT(EM_TREE_SCORE):   format importance 15.4 vimportance ratio 15.4 ;
MPRINT(EM_TREE_SCORE):   label NAME = "Variable Name" LABEL = "Label" NRULES = "Number of Splitting Rules" IMPORTANCE = "Importance" NSURROGATES = "Number of Surrogate Rules" VIMPORTANCE = "Validation Importance" RATIO = "Ratio of Validation to Training 
Importance" VIMPORTANCE = "Validation Importance" CVIMPORTANCE = "Relative Importance" CVRULES= "Number of Rules in CV Trees" RATIO = "Ratio of Validation to Training Importance" ;
MPRINT(EM_TREE_SCORE):   run;

NOTE: Variable NSURROGATES is uninitialized.
NOTE: Variable CVIMPORTANCE is uninitialized.
NOTE: Variable CVRULES is uninitialized.
NOTE: There were 9 observations read from the data set EMWS1.TREE_OUTIMPORT.
NOTE: The data set EMWS1.TREE_OUTIMPORT has 9 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_REPORT):   data WORK.EM_USER_REPORT;
MPRINT(EM_REPORT):   retain id 0;
MPRINT(EM_REPORT):   id + 1;
MPRINT(EM_REPORT):   length VIEW 8 NAME $32 VALUE $400;
MPRINT(EM_REPORT):   NAME = "KEY";
MPRINT(EM_REPORT):   VALUE = "OUTIMPORT";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWTYPE";
MPRINT(EM_REPORT):   VALUE = "DATA";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AUTODISPLAY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SPK";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COMPARE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOCALIZE";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZEROWY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLX";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EQUALIZECOLY";
MPRINT(EM_REPORT):   VALUE = "N";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NROWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NCOLS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISCRETEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LATTICETYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABSOLUTEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SORTORDERY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ORIENTATION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DIRECTION";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BYSET";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RENDERMODE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCRIPTION";
MPRINT(EM_REPORT):   VALUE = "IMPORTANCE";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "X";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "EXCLUDEVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Z";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQVARS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "AXIS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQ";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SUBGROUP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BLOCK";
MPRINT(EM_REPORT):   VALUE = "MODEL";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "COLORINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIPTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TOOLTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "REPORTID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "IDVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "VIEWS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "PARENT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "ABOVETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "BELOWTEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESIZE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "STATS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CLASSDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "INTDIST";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FOLDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YPLOTTYPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YREF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2REF2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "GROUPINDEX";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "JOIN";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "FREQEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YEXCLUDE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NAME";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "HEIGHT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "WIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2AXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YAXISLABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYXLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DISPLAYYLABEL";
MPRINT(EM_REPORT):   VALUE = "Y";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "CHOICETEXT";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SEGMENTVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LOWERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "UPPERBAND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YLINE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEKEY";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODEVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODECOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODESHAPEVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODELABEL";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NODETIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKID";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKVALUE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKCOLOR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKWIDTH";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LINKTIP";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "XTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YFROM";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "YTO";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MATRIXVAR";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "RESPONSE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SERIES";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "DESCARG";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SLIDER";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "MarkerSize";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Marker";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y1";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y2";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y3";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y4";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y5";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y6";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y7";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y8";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y9";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y10";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y11";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y12";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y13";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y14";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y15";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "Y16";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "TITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGEND";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "LEGENDTITLE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "SHAPE";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "METHOD";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   NAME = "NOBINMISS";
MPRINT(EM_REPORT):   VALUE = "";
MPRINT(EM_REPORT):   VIEW = 0.84730669895527;
MPRINT(EM_REPORT):   output;
MPRINT(EM_REPORT):   run;

NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_TREE_SCORE):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End SCORE: Tree;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
67467      
67468      *------------------------------------------------------------*;
67469      * End SCORE: Tree;
67470      *------------------------------------------------------------*;

67471      proc sort data=WORK.EM_METACHANGE;
MPRINT(EM_DIAGRAM):    proc sort data=WORK.EM_METACHANGE;
67472      by key uname;
MPRINT(EM_DIAGRAM):   by key uname;
67473      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 10 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 10 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

67474      filename x "C:\Users\brahm\OneDrive\Desktop\BAN210_Project\Workspaces\EMWS1\Tree\CDELTA_TRAIN.sas";
MPRINT(EM_DIAGRAM):    filename x "C:\Users\brahm\OneDrive\Desktop\BAN210_Project\Workspaces\EMWS1\Tree\CDELTA_TRAIN.sas";
67475      data _null_;
MPRINT(EM_DIAGRAM):   data _null_;
67476      file x;
MPRINT(EM_DIAGRAM):   file x;
67477      put 'if upcase(NAME) = "AGE" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "AGE" then do;';
67478      put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
67479      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
67480      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
67481      put 'if upcase(NAME) = "BREAST" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "BREAST" then do;';
67482      put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
67483      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
67484      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
67485      put 'if upcase(NAME) = "BREAST_QUAD" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "BREAST_QUAD" then do;';
67486      put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
67487      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
67488      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
67489      put 'if upcase(NAME) = "IRRADIAT" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "IRRADIAT" then do;';
67490      put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
67491      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
67492      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
67493      put 'if upcase(NAME) = "MENOPAUSE" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "MENOPAUSE" then do;';
67494      put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
67495      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
67496      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
67497      put 'if upcase(NAME) = "NODE_CAPS" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "NODE_CAPS" then do;';
67498      put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
67499      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
67500      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
67501      put 'if upcase(NAME) = "Q_CLASSNO_RECURRENCE_EVENTS" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "Q_CLASSNO_RECURRENCE_EVENTS" then do;';
67502      put 'ROLE = "ASSESS";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "ASSESS";';
67503      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
67504      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
67505      put 'if upcase(NAME) = "Q_CLASSRECURRENCE_EVENTS" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "Q_CLASSRECURRENCE_EVENTS" then do;';
67506      put 'ROLE = "ASSESS";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "ASSESS";';
67507      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
67508      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
67509      put 'if upcase(NAME) = "TUMOR_SIZE" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "TUMOR_SIZE" then do;';
67510      put 'ROLE = "REJECTED";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "REJECTED";';
67511      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
67512      put 'else ';
MPRINT(EM_DIAGRAM):   put 'else ';
67513      put 'if upcase(NAME) = "_NODE_" then do;';
MPRINT(EM_DIAGRAM):   put 'if upcase(NAME) = "_NODE_" then do;';
67514      put 'ROLE = "SEGMENT";';
MPRINT(EM_DIAGRAM):   put 'ROLE = "SEGMENT";';
67515      put 'LEVEL = "NOMINAL";';
MPRINT(EM_DIAGRAM):   put 'LEVEL = "NOMINAL";';
67516      put 'end;';
MPRINT(EM_DIAGRAM):   put 'end;';
67517      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The file X is:
      Filename=C:\Users\brahm\OneDrive\Desktop\BAN210_Project\Workspaces\EMWS1\Tree\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=07Aug2022:19:13:50,
      Create Time=07Aug2022:18:34:16

NOTE: 40 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 56.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

67518      filename x;
MPRINT(EM_DIAGRAM):   filename x;
NOTE: Fileref X has been deassigned.
67519      filename emflow "C:\Users\brahm\OneDrive\Desktop\BAN210_Project\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\brahm\OneDrive\Desktop\BAN210_Project\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
67520      *------------------------------------------------------------*;
67521      * Tree: Scoring DATA data;
67522      *------------------------------------------------------------*;
67523      data EMWS1.Tree_TRAIN
67524      / view=EMWS1.Tree_TRAIN
67525      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Tree_TRAIN / view=EMWS1.Tree_TRAIN ;
67526      set EMWS1.Trans_TRAIN
67527      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Trans_TRAIN ;
67528      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\brahm\OneDrive\Desktop\BAN210_Project\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas.
67529     +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
67530     +******             DECISION TREE SCORING CODE             ******;
MPRINT(EM_DIAGRAM):   ****** DECISION TREE SCORING CODE ******;
67531     +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
67532     +
67533     +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
MPRINT(EM_DIAGRAM):   ****** LENGTHS OF NEW CHARACTER VARIABLES ******;
67534     +LENGTH F_class  $   20;
MPRINT(EM_DIAGRAM):   LENGTH F_class $ 20;
67535     +LENGTH I_class  $   20;
MPRINT(EM_DIAGRAM):   LENGTH I_class $ 20;
67536     +LENGTH U_class  $   20;
MPRINT(EM_DIAGRAM):   LENGTH U_class $ 20;
67537     +LENGTH _WARN_  $    4;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $ 4;
67538     +
67539     +******              LABELS FOR NEW VARIABLES              ******;
MPRINT(EM_DIAGRAM):   ****** LABELS FOR NEW VARIABLES ******;
67540     +label _NODE_ = 'Node' ;
MPRINT(EM_DIAGRAM):   label _NODE_ = 'Node' ;
67541     +label _LEAF_ = 'Leaf' ;
MPRINT(EM_DIAGRAM):   label _LEAF_ = 'Leaf' ;
67542     +label P_classno_recurrence_events = 'Predicted: class=no-recurrence-events' ;
MPRINT(EM_DIAGRAM):   label P_classno_recurrence_events = 'Predicted: class=no-recurrence-events' ;
67543     +label P_classrecurrence_events = 'Predicted: class=recurrence-events' ;
MPRINT(EM_DIAGRAM):   label P_classrecurrence_events = 'Predicted: class=recurrence-events' ;
67544     +label Q_classno_recurrence_events =
67545     +'Unadjusted P: class=no-recurrence-events' ;
MPRINT(EM_DIAGRAM):   label Q_classno_recurrence_events = 'Unadjusted P: class=no-recurrence-events' ;
67546     +label Q_classrecurrence_events = 'Unadjusted P: class=recurrence-events' ;
MPRINT(EM_DIAGRAM):   label Q_classrecurrence_events = 'Unadjusted P: class=recurrence-events' ;
67547     +label V_classno_recurrence_events = 'Validated: class=no-recurrence-events' ;
MPRINT(EM_DIAGRAM):   label V_classno_recurrence_events = 'Validated: class=no-recurrence-events' ;
67548     +label V_classrecurrence_events = 'Validated: class=recurrence-events' ;
MPRINT(EM_DIAGRAM):   label V_classrecurrence_events = 'Validated: class=recurrence-events' ;
67549     +label R_classno_recurrence_events = 'Residual: class=no-recurrence-events' ;
MPRINT(EM_DIAGRAM):   label R_classno_recurrence_events = 'Residual: class=no-recurrence-events' ;
67550     +label R_classrecurrence_events = 'Residual: class=recurrence-events' ;
MPRINT(EM_DIAGRAM):   label R_classrecurrence_events = 'Residual: class=recurrence-events' ;
67551     +label F_class = 'From: class' ;
MPRINT(EM_DIAGRAM):   label F_class = 'From: class' ;
67552     +label I_class = 'Into: class' ;
MPRINT(EM_DIAGRAM):   label I_class = 'Into: class' ;
67553     +label U_class = 'Unnormalized Into: class' ;
MPRINT(EM_DIAGRAM):   label U_class = 'Unnormalized Into: class' ;
67554     +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
67555     +
67556     +
67557     +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
MPRINT(EM_DIAGRAM):   ****** TEMPORARY VARIABLES FOR FORMATTED VALUES ******;
67558     +LENGTH _ARBFMT_20 $     20; DROP _ARBFMT_20;
MPRINT(EM_DIAGRAM):   LENGTH _ARBFMT_20 $ 20;
MPRINT(EM_DIAGRAM):   DROP _ARBFMT_20;
67559     +_ARBFMT_20 = ' '; /* Initialize to avoid warning. */
MPRINT(EM_DIAGRAM):   _ARBFMT_20 = ' ';
67560     +LENGTH _ARBFMT_5 $      5; DROP _ARBFMT_5;
MPRINT(EM_DIAGRAM):   LENGTH _ARBFMT_5 $ 5;
MPRINT(EM_DIAGRAM):   DROP _ARBFMT_5;
67561     +_ARBFMT_5 = ' '; /* Initialize to avoid warning. */
MPRINT(EM_DIAGRAM):   _ARBFMT_5 = ' ';
67562     +
67563     +
67564     +_ARBFMT_20 = PUT( class , $20.);
MPRINT(EM_DIAGRAM):   _ARBFMT_20 = PUT( class , $20.);
67565     + %DMNORMCP( _ARBFMT_20, F_class );
MPRINT(DMNORMCP):   F_class=dmnorm(_ARBFMT_20,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
67566     +
67567     +******             ASSIGN OBSERVATION TO NODE             ******;
MPRINT(EM_DIAGRAM):   ****** ASSIGN OBSERVATION TO NODE ******;
67568     +IF  NOT MISSING(REP_deg_malig ) AND
67569     +                   2.5 <= REP_deg_malig  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(REP_deg_malig ) AND 2.5 <= REP_deg_malig THEN DO;
67570     +  _ARBFMT_5 = PUT( inv_nodes , $5.);
MPRINT(EM_DIAGRAM):   _ARBFMT_5 = PUT( inv_nodes , $5.);
67571     +   %DMNORMIP( _ARBFMT_5);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_5,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
67572     +  IF _ARBFMT_5 IN ('0-2' ,'15-17' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_5 IN ('0-2' ,'15-17' ) THEN DO;
67573     +    _NODE_  =                    4;
MPRINT(EM_DIAGRAM):   _NODE_ = 4;
67574     +    _LEAF_  =                    2;
MPRINT(EM_DIAGRAM):   _LEAF_ = 2;
67575     +    P_classno_recurrence_events  =     0.54545454545454;
MPRINT(EM_DIAGRAM):   P_classno_recurrence_events = 0.54545454545454;
67576     +    P_classrecurrence_events  =     0.45454545454545;
MPRINT(EM_DIAGRAM):   P_classrecurrence_events = 0.45454545454545;
67577     +    Q_classno_recurrence_events  =     0.54545454545454;
MPRINT(EM_DIAGRAM):   Q_classno_recurrence_events = 0.54545454545454;
67578     +    Q_classrecurrence_events  =     0.45454545454545;
MPRINT(EM_DIAGRAM):   Q_classrecurrence_events = 0.45454545454545;
67579     +    V_classno_recurrence_events  =     0.88888888888888;
MPRINT(EM_DIAGRAM):   V_classno_recurrence_events = 0.88888888888888;
67580     +    V_classrecurrence_events  =     0.11111111111111;
MPRINT(EM_DIAGRAM):   V_classrecurrence_events = 0.11111111111111;
67581     +    I_class  = 'NO-RECURRENCE-EVENTS' ;
MPRINT(EM_DIAGRAM):   I_class = 'NO-RECURRENCE-EVENTS' ;
67582     +    U_class  = 'no-recurrence-events' ;
MPRINT(EM_DIAGRAM):   U_class = 'no-recurrence-events' ;
67583     +    END;
MPRINT(EM_DIAGRAM):   END;
67584     +  ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
67585     +    _NODE_  =                    5;
MPRINT(EM_DIAGRAM):   _NODE_ = 5;
67586     +    _LEAF_  =                    3;
MPRINT(EM_DIAGRAM):   _LEAF_ = 3;
67587     +    P_classno_recurrence_events  =     0.13333333333333;
MPRINT(EM_DIAGRAM):   P_classno_recurrence_events = 0.13333333333333;
67588     +    P_classrecurrence_events  =     0.86666666666666;
MPRINT(EM_DIAGRAM):   P_classrecurrence_events = 0.86666666666666;
67589     +    Q_classno_recurrence_events  =     0.13333333333333;
MPRINT(EM_DIAGRAM):   Q_classno_recurrence_events = 0.13333333333333;
67590     +    Q_classrecurrence_events  =     0.86666666666666;
MPRINT(EM_DIAGRAM):   Q_classrecurrence_events = 0.86666666666666;
67591     +    V_classno_recurrence_events  =     0.35294117647058;
MPRINT(EM_DIAGRAM):   V_classno_recurrence_events = 0.35294117647058;
67592     +    V_classrecurrence_events  =     0.64705882352941;
MPRINT(EM_DIAGRAM):   V_classrecurrence_events = 0.64705882352941;
67593     +    I_class  = 'RECURRENCE-EVENTS' ;
MPRINT(EM_DIAGRAM):   I_class = 'RECURRENCE-EVENTS' ;
67594     +    U_class  = 'recurrence-events' ;
MPRINT(EM_DIAGRAM):   U_class = 'recurrence-events' ;
67595     +    END;
MPRINT(EM_DIAGRAM):   END;
67596     +  END;
MPRINT(EM_DIAGRAM):   END;
67597     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
67598     +  _NODE_  =                    2;
MPRINT(EM_DIAGRAM):   _NODE_ = 2;
67599     +  _LEAF_  =                    1;
MPRINT(EM_DIAGRAM):   _LEAF_ = 1;
67600     +  P_classno_recurrence_events  =     0.81428571428571;
MPRINT(EM_DIAGRAM):   P_classno_recurrence_events = 0.81428571428571;
67601     +  P_classrecurrence_events  =     0.18571428571428;
MPRINT(EM_DIAGRAM):   P_classrecurrence_events = 0.18571428571428;
67602     +  Q_classno_recurrence_events  =     0.81428571428571;
MPRINT(EM_DIAGRAM):   Q_classno_recurrence_events = 0.81428571428571;
67603     +  Q_classrecurrence_events  =     0.18571428571428;
MPRINT(EM_DIAGRAM):   Q_classrecurrence_events = 0.18571428571428;
67604     +  V_classno_recurrence_events  =     0.77049180327868;
MPRINT(EM_DIAGRAM):   V_classno_recurrence_events = 0.77049180327868;
67605     +  V_classrecurrence_events  =     0.22950819672131;
MPRINT(EM_DIAGRAM):   V_classrecurrence_events = 0.22950819672131;
67606     +  I_class  = 'NO-RECURRENCE-EVENTS' ;
MPRINT(EM_DIAGRAM):   I_class = 'NO-RECURRENCE-EVENTS' ;
67607     +  U_class  = 'no-recurrence-events' ;
MPRINT(EM_DIAGRAM):   U_class = 'no-recurrence-events' ;
67608     +  END;
MPRINT(EM_DIAGRAM):   END;
67609     +
67610     +*****  RESIDUALS R_ *************;
MPRINT(EM_DIAGRAM):   ***** RESIDUALS R_ *************;
67611     +IF  F_class  NE 'NO-RECURRENCE-EVENTS'
67612     +AND F_class  NE 'RECURRENCE-EVENTS'  THEN DO;
MPRINT(EM_DIAGRAM):   IF F_class NE 'NO-RECURRENCE-EVENTS' AND F_class NE 'RECURRENCE-EVENTS' THEN DO;
67613     +        R_classno_recurrence_events  = .;
MPRINT(EM_DIAGRAM):   R_classno_recurrence_events = .;
67614     +        R_classrecurrence_events  = .;
MPRINT(EM_DIAGRAM):   R_classrecurrence_events = .;
67615     + END;
MPRINT(EM_DIAGRAM):   END;
67616     + ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
67617     +       R_classno_recurrence_events  =  -P_classno_recurrence_events ;
MPRINT(EM_DIAGRAM):   R_classno_recurrence_events = -P_classno_recurrence_events ;
67618     +       R_classrecurrence_events  =  -P_classrecurrence_events ;
MPRINT(EM_DIAGRAM):   R_classrecurrence_events = -P_classrecurrence_events ;
67619     +       SELECT( F_class  );
MPRINT(EM_DIAGRAM):   SELECT( F_class );
67620     +          WHEN( 'NO-RECURRENCE-EVENTS'  ) R_classno_recurrence_events  =
67621     +        R_classno_recurrence_events  +1;
MPRINT(EM_DIAGRAM):   WHEN( 'NO-RECURRENCE-EVENTS' ) R_classno_recurrence_events = R_classno_recurrence_events +1;
67622     +          WHEN( 'RECURRENCE-EVENTS'  ) R_classrecurrence_events  =
67623     +        R_classrecurrence_events  +1;
MPRINT(EM_DIAGRAM):   WHEN( 'RECURRENCE-EVENTS' ) R_classrecurrence_events = R_classrecurrence_events +1;
67624     +       END;
MPRINT(EM_DIAGRAM):   END;
67625     + END;
MPRINT(EM_DIAGRAM):   END;
67626     +
67627     +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
67628     +******          END OF DECISION TREE SCORING CODE         ******;
MPRINT(EM_DIAGRAM):   ****** END OF DECISION TREE SCORING CODE ******;
67629     +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
67630     +
67631     +drop _LEAF_;
MPRINT(EM_DIAGRAM):   drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
67632      run;

NOTE: DATA STEP view saved on file EMWS1.TREE_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.TRANS_TRAIN.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
      

MPRINT(EM_DIAGRAM):   quit;
67633      quit;
67634      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
67635      filename emflow "C:\Users\brahm\OneDrive\Desktop\BAN210_Project\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\brahm\OneDrive\Desktop\BAN210_Project\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
67636      *------------------------------------------------------------*;
67637      * Tree: Scoring VALIDATE data;
67638      *------------------------------------------------------------*;
67639      data EMWS1.Tree_VALIDATE
67640      / view=EMWS1.Tree_VALIDATE
67641      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Tree_VALIDATE / view=EMWS1.Tree_VALIDATE ;
67642      set EMWS1.Trans_VALIDATE
67643      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Trans_VALIDATE ;
67644      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\brahm\OneDrive\Desktop\BAN210_Project\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas.
67645     +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
67646     +******             DECISION TREE SCORING CODE             ******;
MPRINT(EM_DIAGRAM):   ****** DECISION TREE SCORING CODE ******;
67647     +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
67648     +
67649     +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
MPRINT(EM_DIAGRAM):   ****** LENGTHS OF NEW CHARACTER VARIABLES ******;
67650     +LENGTH F_class  $   20;
MPRINT(EM_DIAGRAM):   LENGTH F_class $ 20;
67651     +LENGTH I_class  $   20;
MPRINT(EM_DIAGRAM):   LENGTH I_class $ 20;
67652     +LENGTH U_class  $   20;
MPRINT(EM_DIAGRAM):   LENGTH U_class $ 20;
67653     +LENGTH _WARN_  $    4;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $ 4;
67654     +
67655     +******              LABELS FOR NEW VARIABLES              ******;
MPRINT(EM_DIAGRAM):   ****** LABELS FOR NEW VARIABLES ******;
67656     +label _NODE_ = 'Node' ;
MPRINT(EM_DIAGRAM):   label _NODE_ = 'Node' ;
67657     +label _LEAF_ = 'Leaf' ;
MPRINT(EM_DIAGRAM):   label _LEAF_ = 'Leaf' ;
67658     +label P_classno_recurrence_events = 'Predicted: class=no-recurrence-events' ;
MPRINT(EM_DIAGRAM):   label P_classno_recurrence_events = 'Predicted: class=no-recurrence-events' ;
67659     +label P_classrecurrence_events = 'Predicted: class=recurrence-events' ;
MPRINT(EM_DIAGRAM):   label P_classrecurrence_events = 'Predicted: class=recurrence-events' ;
67660     +label Q_classno_recurrence_events =
67661     +'Unadjusted P: class=no-recurrence-events' ;
MPRINT(EM_DIAGRAM):   label Q_classno_recurrence_events = 'Unadjusted P: class=no-recurrence-events' ;
67662     +label Q_classrecurrence_events = 'Unadjusted P: class=recurrence-events' ;
MPRINT(EM_DIAGRAM):   label Q_classrecurrence_events = 'Unadjusted P: class=recurrence-events' ;
67663     +label V_classno_recurrence_events = 'Validated: class=no-recurrence-events' ;
MPRINT(EM_DIAGRAM):   label V_classno_recurrence_events = 'Validated: class=no-recurrence-events' ;
67664     +label V_classrecurrence_events = 'Validated: class=recurrence-events' ;
MPRINT(EM_DIAGRAM):   label V_classrecurrence_events = 'Validated: class=recurrence-events' ;
67665     +label R_classno_recurrence_events = 'Residual: class=no-recurrence-events' ;
MPRINT(EM_DIAGRAM):   label R_classno_recurrence_events = 'Residual: class=no-recurrence-events' ;
67666     +label R_classrecurrence_events = 'Residual: class=recurrence-events' ;
MPRINT(EM_DIAGRAM):   label R_classrecurrence_events = 'Residual: class=recurrence-events' ;
67667     +label F_class = 'From: class' ;
MPRINT(EM_DIAGRAM):   label F_class = 'From: class' ;
67668     +label I_class = 'Into: class' ;
MPRINT(EM_DIAGRAM):   label I_class = 'Into: class' ;
67669     +label U_class = 'Unnormalized Into: class' ;
MPRINT(EM_DIAGRAM):   label U_class = 'Unnormalized Into: class' ;
67670     +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
67671     +
67672     +
67673     +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
MPRINT(EM_DIAGRAM):   ****** TEMPORARY VARIABLES FOR FORMATTED VALUES ******;
67674     +LENGTH _ARBFMT_20 $     20; DROP _ARBFMT_20;
MPRINT(EM_DIAGRAM):   LENGTH _ARBFMT_20 $ 20;
MPRINT(EM_DIAGRAM):   DROP _ARBFMT_20;
67675     +_ARBFMT_20 = ' '; /* Initialize to avoid warning. */
MPRINT(EM_DIAGRAM):   _ARBFMT_20 = ' ';
67676     +LENGTH _ARBFMT_5 $      5; DROP _ARBFMT_5;
MPRINT(EM_DIAGRAM):   LENGTH _ARBFMT_5 $ 5;
MPRINT(EM_DIAGRAM):   DROP _ARBFMT_5;
67677     +_ARBFMT_5 = ' '; /* Initialize to avoid warning. */
MPRINT(EM_DIAGRAM):   _ARBFMT_5 = ' ';
67678     +
67679     +
67680     +_ARBFMT_20 = PUT( class , $20.);
MPRINT(EM_DIAGRAM):   _ARBFMT_20 = PUT( class , $20.);
67681     + %DMNORMCP( _ARBFMT_20, F_class );
MPRINT(DMNORMCP):   F_class=dmnorm(_ARBFMT_20,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
67682     +
67683     +******             ASSIGN OBSERVATION TO NODE             ******;
MPRINT(EM_DIAGRAM):   ****** ASSIGN OBSERVATION TO NODE ******;
67684     +IF  NOT MISSING(REP_deg_malig ) AND
67685     +                   2.5 <= REP_deg_malig  THEN DO;
MPRINT(EM_DIAGRAM):   IF NOT MISSING(REP_deg_malig ) AND 2.5 <= REP_deg_malig THEN DO;
67686     +  _ARBFMT_5 = PUT( inv_nodes , $5.);
MPRINT(EM_DIAGRAM):   _ARBFMT_5 = PUT( inv_nodes , $5.);
67687     +   %DMNORMIP( _ARBFMT_5);
MPRINT(DMNORMIP):   call dmnorm(_ARBFMT_5,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
67688     +  IF _ARBFMT_5 IN ('0-2' ,'15-17' ) THEN DO;
MPRINT(EM_DIAGRAM):   IF _ARBFMT_5 IN ('0-2' ,'15-17' ) THEN DO;
67689     +    _NODE_  =                    4;
MPRINT(EM_DIAGRAM):   _NODE_ = 4;
67690     +    _LEAF_  =                    2;
MPRINT(EM_DIAGRAM):   _LEAF_ = 2;
67691     +    P_classno_recurrence_events  =     0.54545454545454;
MPRINT(EM_DIAGRAM):   P_classno_recurrence_events = 0.54545454545454;
67692     +    P_classrecurrence_events  =     0.45454545454545;
MPRINT(EM_DIAGRAM):   P_classrecurrence_events = 0.45454545454545;
67693     +    Q_classno_recurrence_events  =     0.54545454545454;
MPRINT(EM_DIAGRAM):   Q_classno_recurrence_events = 0.54545454545454;
67694     +    Q_classrecurrence_events  =     0.45454545454545;
MPRINT(EM_DIAGRAM):   Q_classrecurrence_events = 0.45454545454545;
67695     +    V_classno_recurrence_events  =     0.88888888888888;
MPRINT(EM_DIAGRAM):   V_classno_recurrence_events = 0.88888888888888;
67696     +    V_classrecurrence_events  =     0.11111111111111;
MPRINT(EM_DIAGRAM):   V_classrecurrence_events = 0.11111111111111;
67697     +    I_class  = 'NO-RECURRENCE-EVENTS' ;
MPRINT(EM_DIAGRAM):   I_class = 'NO-RECURRENCE-EVENTS' ;
67698     +    U_class  = 'no-recurrence-events' ;
MPRINT(EM_DIAGRAM):   U_class = 'no-recurrence-events' ;
67699     +    END;
MPRINT(EM_DIAGRAM):   END;
67700     +  ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
67701     +    _NODE_  =                    5;
MPRINT(EM_DIAGRAM):   _NODE_ = 5;
67702     +    _LEAF_  =                    3;
MPRINT(EM_DIAGRAM):   _LEAF_ = 3;
67703     +    P_classno_recurrence_events  =     0.13333333333333;
MPRINT(EM_DIAGRAM):   P_classno_recurrence_events = 0.13333333333333;
67704     +    P_classrecurrence_events  =     0.86666666666666;
MPRINT(EM_DIAGRAM):   P_classrecurrence_events = 0.86666666666666;
67705     +    Q_classno_recurrence_events  =     0.13333333333333;
MPRINT(EM_DIAGRAM):   Q_classno_recurrence_events = 0.13333333333333;
67706     +    Q_classrecurrence_events  =     0.86666666666666;
MPRINT(EM_DIAGRAM):   Q_classrecurrence_events = 0.86666666666666;
67707     +    V_classno_recurrence_events  =     0.35294117647058;
MPRINT(EM_DIAGRAM):   V_classno_recurrence_events = 0.35294117647058;
67708     +    V_classrecurrence_events  =     0.64705882352941;
MPRINT(EM_DIAGRAM):   V_classrecurrence_events = 0.64705882352941;
67709     +    I_class  = 'RECURRENCE-EVENTS' ;
MPRINT(EM_DIAGRAM):   I_class = 'RECURRENCE-EVENTS' ;
67710     +    U_class  = 'recurrence-events' ;
MPRINT(EM_DIAGRAM):   U_class = 'recurrence-events' ;
67711     +    END;
MPRINT(EM_DIAGRAM):   END;
67712     +  END;
MPRINT(EM_DIAGRAM):   END;
67713     +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
67714     +  _NODE_  =                    2;
MPRINT(EM_DIAGRAM):   _NODE_ = 2;
67715     +  _LEAF_  =                    1;
MPRINT(EM_DIAGRAM):   _LEAF_ = 1;
67716     +  P_classno_recurrence_events  =     0.81428571428571;
MPRINT(EM_DIAGRAM):   P_classno_recurrence_events = 0.81428571428571;
67717     +  P_classrecurrence_events  =     0.18571428571428;
MPRINT(EM_DIAGRAM):   P_classrecurrence_events = 0.18571428571428;
67718     +  Q_classno_recurrence_events  =     0.81428571428571;
MPRINT(EM_DIAGRAM):   Q_classno_recurrence_events = 0.81428571428571;
67719     +  Q_classrecurrence_events  =     0.18571428571428;
MPRINT(EM_DIAGRAM):   Q_classrecurrence_events = 0.18571428571428;
67720     +  V_classno_recurrence_events  =     0.77049180327868;
MPRINT(EM_DIAGRAM):   V_classno_recurrence_events = 0.77049180327868;
67721     +  V_classrecurrence_events  =     0.22950819672131;
MPRINT(EM_DIAGRAM):   V_classrecurrence_events = 0.22950819672131;
67722     +  I_class  = 'NO-RECURRENCE-EVENTS' ;
MPRINT(EM_DIAGRAM):   I_class = 'NO-RECURRENCE-EVENTS' ;
67723     +  U_class  = 'no-recurrence-events' ;
MPRINT(EM_DIAGRAM):   U_class = 'no-recurrence-events' ;
67724     +  END;
MPRINT(EM_DIAGRAM):   END;
67725     +
67726     +*****  RESIDUALS R_ *************;
MPRINT(EM_DIAGRAM):   ***** RESIDUALS R_ *************;
67727     +IF  F_class  NE 'NO-RECURRENCE-EVENTS'
67728     +AND F_class  NE 'RECURRENCE-EVENTS'  THEN DO;
MPRINT(EM_DIAGRAM):   IF F_class NE 'NO-RECURRENCE-EVENTS' AND F_class NE 'RECURRENCE-EVENTS' THEN DO;
67729     +        R_classno_recurrence_events  = .;
MPRINT(EM_DIAGRAM):   R_classno_recurrence_events = .;
67730     +        R_classrecurrence_events  = .;
MPRINT(EM_DIAGRAM):   R_classrecurrence_events = .;
67731     + END;
MPRINT(EM_DIAGRAM):   END;
67732     + ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
67733     +       R_classno_recurrence_events  =  -P_classno_recurrence_events ;
MPRINT(EM_DIAGRAM):   R_classno_recurrence_events = -P_classno_recurrence_events ;
67734     +       R_classrecurrence_events  =  -P_classrecurrence_events ;
MPRINT(EM_DIAGRAM):   R_classrecurrence_events = -P_classrecurrence_events ;
67735     +       SELECT( F_class  );
MPRINT(EM_DIAGRAM):   SELECT( F_class );
67736     +          WHEN( 'NO-RECURRENCE-EVENTS'  ) R_classno_recurrence_events  =
67737     +        R_classno_recurrence_events  +1;
MPRINT(EM_DIAGRAM):   WHEN( 'NO-RECURRENCE-EVENTS' ) R_classno_recurrence_events = R_classno_recurrence_events +1;
67738     +          WHEN( 'RECURRENCE-EVENTS'  ) R_classrecurrence_events  =
67739     +        R_classrecurrence_events  +1;
MPRINT(EM_DIAGRAM):   WHEN( 'RECURRENCE-EVENTS' ) R_classrecurrence_events = R_classrecurrence_events +1;
67740     +       END;
MPRINT(EM_DIAGRAM):   END;
67741     + END;
MPRINT(EM_DIAGRAM):   END;
67742     +
67743     +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
67744     +******          END OF DECISION TREE SCORING CODE         ******;
MPRINT(EM_DIAGRAM):   ****** END OF DECISION TREE SCORING CODE ******;
67745     +****************************************************************;
MPRINT(EM_DIAGRAM):   ****************************************************************;
67746     +
67747     +drop _LEAF_;
MPRINT(EM_DIAGRAM):   drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
67748      run;

NOTE: DATA STEP view saved on file EMWS1.TREE_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.TRANS_VALIDATE.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
      

MPRINT(EM_DIAGRAM):   quit;
67749      quit;
67750      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
NOTE: View EMWS1.TREE_TRAIN.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
      
67752      proc sort data=WORK.EM_USER_REPORT;
MPRINT(EM_DIAGRAM):     proc sort data=WORK.EM_USER_REPORT;
67753      by ID VIEW;
MPRINT(EM_DIAGRAM):   by ID VIEW;
67754      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

67755      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
67756      * Tree: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Tree: Computing metadata for TRAIN data;
67757      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS1.TREE_TRAIN.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.03 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\Users\brahm\OneDrive\Desktop\BAN210_Project\Workspaces\EMWS1\Tree\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.Tree_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.Tree_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.Tree_TRAIN out=WORK.M1VT7K73 noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1VT7K73;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M1VT7K73(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1VT7K73;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M1VT7K73;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M3COQUII NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3COQUII;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M3COQUII;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0BA4BQM(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M3COQUII;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3COQUII;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M3COQUII;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" 
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3COQUII;
MPRINT(EMADVISECOLUMNS):   set WORK.M3COQUII;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower 
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Trans_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Trans_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Tree_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Tree";
MPRINT(EM_DIAGRAM):   length model $200;
MPRINT(EM_DIAGRAM):   label MODEL = "Model Node";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_CLASSRECURRENCE_EVENTS") creator = "Tree";
MPRINT(EM_DIAGRAM):   when("P_CLASSNO_RECURRENCE_EVENTS") creator = "Tree";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Tree";
MPRINT(EM_DIAGRAM):   when("CLASS") model = "Tree";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Tree: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if upcase(NAME) = "AGE" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "BREAST" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "BREAST_QUAD" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "IRRADIAT" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "MENOPAUSE" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "NODE_CAPS" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "Q_CLASSNO_RECURRENCE_EVENTS" then do;
MPRINT(EM_DIAGRAM):   ROLE = "ASSESS";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "Q_CLASSRECURRENCE_EVENTS" then do;
MPRINT(EM_DIAGRAM):   ROLE = "ASSESS";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "TUMOR_SIZE" then do;
MPRINT(EM_DIAGRAM):   ROLE = "REJECTED";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) = "_NODE_" then do;
MPRINT(EM_DIAGRAM):   ROLE = "SEGMENT";
MPRINT(EM_DIAGRAM):   LEVEL = "NOMINAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
68145      data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
68146      set EMWS1.Tree_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree_EMINFO;
68147      where DATA='Tree' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Tree' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
68148      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS1.TREE_EMINFO.
      WHERE (DATA='Tree') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

68149      data EMWS1.Tree_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS1.Tree_EMINFO;
68150      length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
68151      input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
68152      cards;
MPRINT(EM_DIAGRAM):   cards;

NOTE: The data set EMWS1.TREE_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):   run;
68156      run;
68157      data EMWS1.Tree_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS1.Tree_EMINFO;
68158      set EMWS1.Tree_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree_EMINFO WORK.MODELTEMP_INFO;
68159      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS1.TREE_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS1.TREE_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

68160      proc sort data = EMWS1.Tree_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS1.Tree_EMINFO NOTHREADS;
68161      by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
68162      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS1.TREE_EMINFO.
NOTE: The data set EMWS1.TREE_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: View EMWS1.TREE_TRAIN.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
      
NOTE: View EMWS1.TREE_VALIDATE.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;

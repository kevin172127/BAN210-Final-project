MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "August 07, 2022" 
);
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "19:53:02" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                August 07, 2022
Time:                19:53:02
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O3IIMDLB 
"C:\Users\brahm\OneDrive\Desktop\BAN210_Project\Workspaces\EMWS1\MdlComp\EMSCORE.out" 
encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O3IIMDLB new;
MPRINT(EM_DIAGRAM):   run;
NOTE: View EMWS1.TREE_TRAIN.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
      
NOTE: View EMWS1.TREE_TRAIN.VIEW used (Total process time):
      real time           0.11 seconds
      cpu time            0.11 seconds
      
45783      /* Generate assessment metadata, which will be used to generate assessment data step
45783    !  */
45784      /* code, such as retrieving names of temporary variables and summary variables,
45784    !  */
45785      /* labels, etc.  It is used in almost all the assessment computations such as lift,
45785    !  */
45786      /* roc, index, scoreDist and could be thought as a global variable in assessment
45786    !  */
45787      /* computation.
45787    !  */
45788      data work.ASSESS_3EJ7_V6_assessMeta_c7hIxu;
MPRINT(EM_DIAGRAM):    data work.ASSESS_3EJ7_V6_assessMeta_c7hIxu;
45789      length VARIABLE $32 FORMAT $44 TYPE $32 PARENT $32 LEVEL $32 PROPERTY $32
45789    ! MEASUREMENT $10 LAST_LEVEL $32 GEN_VAR_IN_TEMP_DATA $32 RESULT_MEAN $32
45789    ! RESULT_MEAN_LABEL $100 RESULT_MIN $32 RESULT_MIN_LABEL $100 MIN_ADJUSTED $32
45789    ! RESULT_MAX $32 RESULT_MAX_LABEL
45790         $100 MAX_ADJUSTED $32 RESULT_COUNT $32 RESULT_COUNT_LABEL $100 TEMPORARY_VARIABLE
45790    !  $32;
MPRINT(EM_DIAGRAM):   length VARIABLE $32 FORMAT $44 TYPE $32 PARENT $32 LEVEL $32 PROPERTY 
$32 MEASUREMENT $10 LAST_LEVEL $32 GEN_VAR_IN_TEMP_DATA $32 RESULT_MEAN $32 RESULT_MEAN_LABEL 
$100 RESULT_MIN $32 RESULT_MIN_LABEL $100 MIN_ADJUSTED $32 RESULT_MAX $32 RESULT_MAX_LABEL 
$100 MAX_ADJUSTED $32 RESULT_COUNT $32 RESULT_COUNT_LABEL $100 TEMPORARY_VARIABLE $32;
45791      VARIABLE = "class";
MPRINT(EM_DIAGRAM):   VARIABLE = "class";
45792      PARENT = "";
MPRINT(EM_DIAGRAM):   PARENT = "";
45793      FORMAT = "";
MPRINT(EM_DIAGRAM):   FORMAT = "";
45794      TYPE = "";
MPRINT(EM_DIAGRAM):   TYPE = "";
45795      LEVEL = '';
MPRINT(EM_DIAGRAM):   LEVEL = '';
45796      PROPERTY = "TARGET";
MPRINT(EM_DIAGRAM):   PROPERTY = "TARGET";
45797      MEASUREMENT = "NOMINAL";
MPRINT(EM_DIAGRAM):   MEASUREMENT = "NOMINAL";
45798      LAST_LEVEL = '';
MPRINT(EM_DIAGRAM):   LAST_LEVEL = '';
45799      GEN_VAR_IN_TEMP_DATA = "class";
MPRINT(EM_DIAGRAM):   GEN_VAR_IN_TEMP_DATA = "class";
45800      RESULT_MEAN = "";
MPRINT(EM_DIAGRAM):   RESULT_MEAN = "";
45801      RESULT_MEAN_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_MEAN_LABEL = "";
45802      RESULT_MIN = "";
MPRINT(EM_DIAGRAM):   RESULT_MIN = "";
45803      RESULT_MIN_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_MIN_LABEL = "";
45804      MIN_ADJUSTED = "";
MPRINT(EM_DIAGRAM):   MIN_ADJUSTED = "";
45805      RESULT_MAX = "";
MPRINT(EM_DIAGRAM):   RESULT_MAX = "";
45806      RESULT_MAX_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_MAX_LABEL = "";
45807      MAX_ADJUSTED = "";
MPRINT(EM_DIAGRAM):   MAX_ADJUSTED = "";
45808      RESULT_COUNT = "";
MPRINT(EM_DIAGRAM):   RESULT_COUNT = "";
45809      RESULT_COUNT_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_COUNT_LABEL = "";
45810      TEMPORARY_VARIABLE = "class_hm2ofSVuaBQVWBv";
MPRINT(EM_DIAGRAM):   TEMPORARY_VARIABLE = "class_hm2ofSVuaBQVWBv";
45811      output;
MPRINT(EM_DIAGRAM):   output;
45812      VARIABLE = "F_class_RECURRENCE_EVENTS";
MPRINT(EM_DIAGRAM):   VARIABLE = "F_class_RECURRENCE_EVENTS";
45813      FORMAT = "";
MPRINT(EM_DIAGRAM):   FORMAT = "";
45814      TYPE = "";
MPRINT(EM_DIAGRAM):   TYPE = "";
45815      PARENT = "F_class";
MPRINT(EM_DIAGRAM):   PARENT = "F_class";
45816      LEVEL = "RECURRENCE-EVENTS";
MPRINT(EM_DIAGRAM):   LEVEL = "RECURRENCE-EVENTS";
45817      PROPERTY = "TARGET_LEVEL";
MPRINT(EM_DIAGRAM):   PROPERTY = "TARGET_LEVEL";
45818      MEASUREMENT = "INTERVAL";
MPRINT(EM_DIAGRAM):   MEASUREMENT = "INTERVAL";
45819      LAST_LEVEL = "NO-RECURRENCE-EVENTS";
MPRINT(EM_DIAGRAM):   LAST_LEVEL = "NO-RECURRENCE-EVENTS";
45820      GEN_VAR_IN_TEMP_DATA = "F_class_RECURREN_DSnticDRVliU2wK";
MPRINT(EM_DIAGRAM):   GEN_VAR_IN_TEMP_DATA = "F_class_RECURREN_DSnticDRVliU2wK";
45821      RESULT_MEAN = "F_class_RE_mean_nVYRHpWIjVCq7it";
MPRINT(EM_DIAGRAM):   RESULT_MEAN = "F_class_RE_mean_nVYRHpWIjVCq7it";
45822      /* adjust for tied cases */
45823      RESULT_MEAN_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_MEAN_LABEL = "";
45824      RESULT_MIN = "";
MPRINT(EM_DIAGRAM):   RESULT_MIN = "";
45825      RESULT_MIN_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_MIN_LABEL = "";
45826      RESULT_MAX = "";
MPRINT(EM_DIAGRAM):   RESULT_MAX = "";
45827      RESULT_MAX_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_MAX_LABEL = "";
45828      RESULT_COUNT = "NumberOfEvents";
MPRINT(EM_DIAGRAM):   RESULT_COUNT = "NumberOfEvents";
45829      RESULT_COUNT_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_NumEvent_vlabel,
45829    ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_COUNT_LABEL = "Number of Events";
45830      TEMPORARY_VARIABLE = "F_class_RECURREN_SE0MK04hz3wwYXj";
MPRINT(EM_DIAGRAM):   TEMPORARY_VARIABLE = "F_class_RECURREN_SE0MK04hz3wwYXj";
45831      output;
MPRINT(EM_DIAGRAM):   output;
45832      VARIABLE = "F_class_NO_RECURRENCE_EVENTS";
MPRINT(EM_DIAGRAM):   VARIABLE = "F_class_NO_RECURRENCE_EVENTS";
45833      FORMAT = "";
MPRINT(EM_DIAGRAM):   FORMAT = "";
45834      TYPE = "";
MPRINT(EM_DIAGRAM):   TYPE = "";
45835      PARENT = "F_class";
MPRINT(EM_DIAGRAM):   PARENT = "F_class";
45836      LEVEL = "NO-RECURRENCE-EVENTS";
MPRINT(EM_DIAGRAM):   LEVEL = "NO-RECURRENCE-EVENTS";
45837      PROPERTY = "TARGET_LEVEL";
MPRINT(EM_DIAGRAM):   PROPERTY = "TARGET_LEVEL";
45838      MEASUREMENT = "INTERVAL";
MPRINT(EM_DIAGRAM):   MEASUREMENT = "INTERVAL";
45839      LAST_LEVEL = "NO-RECURRENCE-EVENTS";
MPRINT(EM_DIAGRAM):   LAST_LEVEL = "NO-RECURRENCE-EVENTS";
45840      GEN_VAR_IN_TEMP_DATA = "F_class_NO_RECUR_8GCpttpe6ho8pu2";
MPRINT(EM_DIAGRAM):   GEN_VAR_IN_TEMP_DATA = "F_class_NO_RECUR_8GCpttpe6ho8pu2";
45841      RESULT_MEAN = "F_class_NO_mean_2WD0lyBeGWKgY1A";
MPRINT(EM_DIAGRAM):   RESULT_MEAN = "F_class_NO_mean_2WD0lyBeGWKgY1A";
45842      /* adjust for tied cases */
45843      RESULT_MEAN_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_MEAN_LABEL = "";
45844      RESULT_MIN = "";
MPRINT(EM_DIAGRAM):   RESULT_MIN = "";
45845      RESULT_MIN_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_MIN_LABEL = "";
45846      RESULT_MAX = "";
MPRINT(EM_DIAGRAM):   RESULT_MAX = "";
45847      RESULT_MAX_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_MAX_LABEL = "";
45848      RESULT_COUNT = "NumberOfEvents";
MPRINT(EM_DIAGRAM):   RESULT_COUNT = "NumberOfEvents";
45849      RESULT_COUNT_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_NumEvent_vlabel,
45849    ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_COUNT_LABEL = "Number of Events";
45850      TEMPORARY_VARIABLE = "F_class_NO_RECUR_rHlSrpS7YQ6c675";
MPRINT(EM_DIAGRAM):   TEMPORARY_VARIABLE = "F_class_NO_RECUR_rHlSrpS7YQ6c675";
45851      output;
MPRINT(EM_DIAGRAM):   output;
45852      VARIABLE = "P_classrecurrence_events";
MPRINT(EM_DIAGRAM):   VARIABLE = "P_classrecurrence_events";
45853      FORMAT = "";
MPRINT(EM_DIAGRAM):   FORMAT = "";
45854      TYPE = "";
MPRINT(EM_DIAGRAM):   TYPE = "";
45855      PARENT = "";
MPRINT(EM_DIAGRAM):   PARENT = "";
45856      LEVEL = "RECURRENCE-EVENTS";
MPRINT(EM_DIAGRAM):   LEVEL = "RECURRENCE-EVENTS";
45857      PROPERTY = "POSTERIOR_LEVEL";
MPRINT(EM_DIAGRAM):   PROPERTY = "POSTERIOR_LEVEL";
45858      MEASUREMENT = "INTERVAL";
MPRINT(EM_DIAGRAM):   MEASUREMENT = "INTERVAL";
45859      LAST_LEVEL = "";
MPRINT(EM_DIAGRAM):   LAST_LEVEL = "";
45860      GEN_VAR_IN_TEMP_DATA = "P_classrecurrence_events";
MPRINT(EM_DIAGRAM):   GEN_VAR_IN_TEMP_DATA = "P_classrecurrence_events";
45861      RESULT_MEAN = "_meanP_";
MPRINT(EM_DIAGRAM):   RESULT_MEAN = "_meanP_";
45862      RESULT_MEAN_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_probMean_vlabel,
45862    ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MEAN_LABEL = "Mean Posterior Probability";
45863      RESULT_MIN = "_minP_";
MPRINT(EM_DIAGRAM):   RESULT_MIN = "_minP_";
45864      RESULT_MIN_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_probMin_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MIN_LABEL = "Min Posterior Probability";
45865      MIN_ADJUSTED = "P_classr_minAdjusted_ImUdWbSvh";
MPRINT(EM_DIAGRAM):   MIN_ADJUSTED = "P_classr_minAdjusted_ImUdWbSvh";
45866      RESULT_MAX = "_maxP_";
MPRINT(EM_DIAGRAM):   RESULT_MAX = "_maxP_";
45867      RESULT_MAX_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_probMax_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MAX_LABEL = "Max Posterior Probability";
45868      MAX_ADJUSTED = "P_classr_maxAdjusted_8VglNzVLF";
MPRINT(EM_DIAGRAM):   MAX_ADJUSTED = "P_classr_maxAdjusted_8VglNzVLF";
45869      RESULT_COUNT = "";
MPRINT(EM_DIAGRAM):   RESULT_COUNT = "";
45870      RESULT_COUNT_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_COUNT_LABEL = "";
45871      TEMPORARY_VARIABLE = "P_classrecurrenc_sTzoZ2ssRh8tOpU";
MPRINT(EM_DIAGRAM):   TEMPORARY_VARIABLE = "P_classrecurrenc_sTzoZ2ssRh8tOpU";
45872      output;
MPRINT(EM_DIAGRAM):   output;
45873      VARIABLE = "P_classno_recurrence_events";
MPRINT(EM_DIAGRAM):   VARIABLE = "P_classno_recurrence_events";
45874      FORMAT = "";
MPRINT(EM_DIAGRAM):   FORMAT = "";
45875      TYPE = "";
MPRINT(EM_DIAGRAM):   TYPE = "";
45876      PARENT = "";
MPRINT(EM_DIAGRAM):   PARENT = "";
45877      LEVEL = "NO-RECURRENCE-EVENTS";
MPRINT(EM_DIAGRAM):   LEVEL = "NO-RECURRENCE-EVENTS";
45878      PROPERTY = "POSTERIOR_LEVEL";
MPRINT(EM_DIAGRAM):   PROPERTY = "POSTERIOR_LEVEL";
45879      MEASUREMENT = "INTERVAL";
MPRINT(EM_DIAGRAM):   MEASUREMENT = "INTERVAL";
45880      LAST_LEVEL = "";
MPRINT(EM_DIAGRAM):   LAST_LEVEL = "";
45881      GEN_VAR_IN_TEMP_DATA = "P_classno_recurrence_events";
MPRINT(EM_DIAGRAM):   GEN_VAR_IN_TEMP_DATA = "P_classno_recurrence_events";
45882      RESULT_MEAN = "_meanP_";
MPRINT(EM_DIAGRAM):   RESULT_MEAN = "_meanP_";
45883      RESULT_MEAN_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_probMean_vlabel,
45883    ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MEAN_LABEL = "Mean Posterior Probability";
45884      RESULT_MIN = "_minP_";
MPRINT(EM_DIAGRAM):   RESULT_MIN = "_minP_";
45885      RESULT_MIN_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_probMin_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MIN_LABEL = "Min Posterior Probability";
45886      MIN_ADJUSTED = "P_classn_minAdjusted_NCug0wID5";
MPRINT(EM_DIAGRAM):   MIN_ADJUSTED = "P_classn_minAdjusted_NCug0wID5";
45887      RESULT_MAX = "_maxP_";
MPRINT(EM_DIAGRAM):   RESULT_MAX = "_maxP_";
45888      RESULT_MAX_LABEL = "%sysfunc(sasmsg(sashelp.dmine, assmt_probMax_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   RESULT_MAX_LABEL = "Max Posterior Probability";
45889      MAX_ADJUSTED = "P_classn_maxAdjusted_auZV_h1EF";
MPRINT(EM_DIAGRAM):   MAX_ADJUSTED = "P_classn_maxAdjusted_auZV_h1EF";
45890      RESULT_COUNT = "";
MPRINT(EM_DIAGRAM):   RESULT_COUNT = "";
45891      RESULT_COUNT_LABEL = "";
MPRINT(EM_DIAGRAM):   RESULT_COUNT_LABEL = "";
45892      TEMPORARY_VARIABLE = "P_classno_recurr_CUsQFuybNAvilVs";
MPRINT(EM_DIAGRAM):   TEMPORARY_VARIABLE = "P_classno_recurr_CUsQFuybNAvilVs";
45893      output;
MPRINT(EM_DIAGRAM):   output;
45894      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The data set WORK.ASSESS_3EJ7_V6_ASSESSMETA_C7HIXU has 5 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.03 seconds
      

45895      /* Generate temporary dataset and obtain summary statistics such as total number of
45895    !   */
45896      /* obserations, frequency of target.  However, summary statistics for class
45896    ! reporting */
45897      /* variabels are not computed here since if there exist class reporting variables,
45897    !   */
45898      /* then PROC DMDB will be called. And there is no need to compute interval reporting
45898    !   */
45899      /* summary statisitcs, if any.
45899    !   */
45900      data work.ASSESS_3EJ7_V6_normSD_OpNE2v(drop=
45901      _numberOfObservation_
45902      _levelFrequency_1
45903      _levelFrequency_2
45904      )
45905      work.ASSESS_3EJ7_V6_meansAndTi_J9DevQ (keep=
45906      _numberOfObservation_
45907      _levelFrequency_1
45908      _levelFrequency_2
45909      );
MPRINT(EM_DIAGRAM):    data work.ASSESS_3EJ7_V6_normSD_OpNE2v(drop= _numberOfObservation_ 
_levelFrequency_1 _levelFrequency_2 ) work.ASSESS_3EJ7_V6_meansAndTi_J9DevQ (keep= 
_numberOfObservation_ _levelFrequency_1 _levelFrequency_2 );
45910      set EMWS1.Tree_TRAIN(
45911      where=(
45912      (class ^= ' ')
45913      )
45914      ) end=_lastObservation_;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree_TRAIN( where=( (class ^= ' ') ) ) end=_lastObservation_;
45915      keep frequency_zJVwN1;
MPRINT(EM_DIAGRAM):   keep frequency_zJVwN1;
45916      frequency_zJVwN1 = 1;
MPRINT(EM_DIAGRAM):   frequency_zJVwN1 = 1;
45917      keep I_class F_class;
MPRINT(EM_DIAGRAM):   keep I_class F_class;
45918      keep F_class_RECURREN_DSnticDRVliU2wK;
MPRINT(EM_DIAGRAM):   keep F_class_RECURREN_DSnticDRVliU2wK;
45919      if (F_class = 'RECURRENCE-EVENTS') then do;
MPRINT(EM_DIAGRAM):   if (F_class = 'RECURRENCE-EVENTS') then do;
45920      F_class_RECURREN_DSnticDRVliU2wK = 1;
MPRINT(EM_DIAGRAM):   F_class_RECURREN_DSnticDRVliU2wK = 1;
45921      end;
MPRINT(EM_DIAGRAM):   end;
45922      else do;
MPRINT(EM_DIAGRAM):   else do;
45923      F_class_RECURREN_DSnticDRVliU2wK = 0;
MPRINT(EM_DIAGRAM):   F_class_RECURREN_DSnticDRVliU2wK = 0;
45924      end;
MPRINT(EM_DIAGRAM):   end;
45925      keep F_class_NO_RECUR_8GCpttpe6ho8pu2;
MPRINT(EM_DIAGRAM):   keep F_class_NO_RECUR_8GCpttpe6ho8pu2;
45926      if (F_class = 'NO-RECURRENCE-EVENTS') then do;
MPRINT(EM_DIAGRAM):   if (F_class = 'NO-RECURRENCE-EVENTS') then do;
45927      F_class_NO_RECUR_8GCpttpe6ho8pu2 = 1;
MPRINT(EM_DIAGRAM):   F_class_NO_RECUR_8GCpttpe6ho8pu2 = 1;
45928      end;
MPRINT(EM_DIAGRAM):   end;
45929      else do;
MPRINT(EM_DIAGRAM):   else do;
45930      F_class_NO_RECUR_8GCpttpe6ho8pu2 = 0;
MPRINT(EM_DIAGRAM):   F_class_NO_RECUR_8GCpttpe6ho8pu2 = 0;
45931      end;
MPRINT(EM_DIAGRAM):   end;
45932      keep P_classrecurrence_events;
MPRINT(EM_DIAGRAM):   keep P_classrecurrence_events;
45933      keep P_classno_recurrence_events;
MPRINT(EM_DIAGRAM):   keep P_classno_recurrence_events;
45934      output work.ASSESS_3EJ7_V6_normSD_OpNE2v;
MPRINT(EM_DIAGRAM):   output work.ASSESS_3EJ7_V6_normSD_OpNE2v;
45935      keep _numberOfObservation_;
MPRINT(EM_DIAGRAM):   keep _numberOfObservation_;
45936      retain _numberOfObservation_ 0;
MPRINT(EM_DIAGRAM):   retain _numberOfObservation_ 0;
45937      _numberOfObservation_ + frequency_zJVwN1;
MPRINT(EM_DIAGRAM):   _numberOfObservation_ + frequency_zJVwN1;
45938      keep _levelFrequency_1;
MPRINT(EM_DIAGRAM):   keep _levelFrequency_1;
45939      retain _levelFrequency_1 0;
MPRINT(EM_DIAGRAM):   retain _levelFrequency_1 0;
45940      if (F_class = 'RECURRENCE-EVENTS') then do;
MPRINT(EM_DIAGRAM):   if (F_class = 'RECURRENCE-EVENTS') then do;
45941      _levelFrequency_1 + frequency_zJVwN1;
MPRINT(EM_DIAGRAM):   _levelFrequency_1 + frequency_zJVwN1;
45942      end;
MPRINT(EM_DIAGRAM):   end;
45943      keep _levelFrequency_2;
MPRINT(EM_DIAGRAM):   keep _levelFrequency_2;
45944      retain _levelFrequency_2 0;
MPRINT(EM_DIAGRAM):   retain _levelFrequency_2 0;
45945      if (F_class = 'NO-RECURRENCE-EVENTS') then do;
MPRINT(EM_DIAGRAM):   if (F_class = 'NO-RECURRENCE-EVENTS') then do;
45946      _levelFrequency_2 + frequency_zJVwN1;
MPRINT(EM_DIAGRAM):   _levelFrequency_2 + frequency_zJVwN1;
45947      end;
MPRINT(EM_DIAGRAM):   end;
45948      if _lastObservation_ then do;
MPRINT(EM_DIAGRAM):   if _lastObservation_ then do;
45949      output work.ASSESS_3EJ7_V6_meansAndTi_J9DevQ;
MPRINT(EM_DIAGRAM):   output work.ASSESS_3EJ7_V6_meansAndTi_J9DevQ;
45950      end;
MPRINT(EM_DIAGRAM):   end;
45951      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Variable _WARN_ is uninitialized.
NOTE: There were 199 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 199 observations read from the data set EMWS1.REPL_TRAIN.
NOTE: There were 199 observations read from the data set EMWS1.IMPT_TRAIN.
NOTE: View EMWS1.TREE_TRAIN.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.03 seconds
      
NOTE: There were 199 observations read from the data set EMWS1.TRANS_TRAIN.
NOTE: There were 199 observations read from the data set EMWS1.TREE_TRAIN.
      WHERE class not = ' ';
NOTE: The data set WORK.ASSESS_3EJ7_V6_NORMSD_OPNE2V has 199 observations and 7 variables.
NOTE: The data set WORK.ASSESS_3EJ7_V6_MEANSANDTI_J9DEVQ has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.04 seconds
      

45952      data WORK._EMRANK;
MPRINT(EM_DIAGRAM):    data WORK._EMRANK;
45953      set EMWS1.MdlComp_EMRANK;
MPRINT(EM_DIAGRAM):   set EMWS1.MdlComp_EMRANK;
45954      where MODEL = "Tree" and TARGET = "class" and dataRole="TRAIN";
MPRINT(EM_DIAGRAM):   where MODEL = "Tree" and TARGET = "class" and dataRole="TRAIN";
45955      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 20 observations read from the data set EMWS1.MDLCOMP_EMRANK.
      WHERE (MODEL='Tree') and (TARGET='class') and (dataRole='TRAIN');
NOTE: The data set WORK._EMRANK has 20 observations and 38 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

45956      data work._augment;
MPRINT(EM_DIAGRAM):    data work._augment;
45957      do BIN= 1 to 20;
MPRINT(EM_DIAGRAM):   do BIN= 1 to 20;
45958      DECILE = BIN*5;
MPRINT(EM_DIAGRAM):   DECILE = BIN*5;
45959      output;
MPRINT(EM_DIAGRAM):   output;
45960      end;
MPRINT(EM_DIAGRAM):   end;
45961      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: The data set WORK._AUGMENT has 20 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

45962      data WORK._EMRANK;
MPRINT(EM_DIAGRAM):   data WORK._EMRANK;
45963      merge WORK._AUGMENT WORK._EMRANK;
MPRINT(EM_DIAGRAM):   merge WORK._AUGMENT WORK._EMRANK;
45964      by BIN;
MPRINT(EM_DIAGRAM):   by BIN;
45965      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 20 observations read from the data set WORK._AUGMENT.
NOTE: There were 20 observations read from the data set WORK._EMRANK.
NOTE: The data set WORK._EMRANK has 20 observations and 38 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

45966      data WORK._EMRANK;
MPRINT(EM_DIAGRAM):    data WORK._EMRANK;
45967      set WORK._EMRANK end=_lastObservation_;
MPRINT(EM_DIAGRAM):   set WORK._EMRANK end=_lastObservation_;
45968      retain _previousMinP_ _previousMaxP_;
MPRINT(EM_DIAGRAM):   retain _previousMinP_ _previousMaxP_;
45969      retain _group_ 1;
MPRINT(EM_DIAGRAM):   retain _group_ 1;
45970      keep event;
MPRINT(EM_DIAGRAM):   keep event;
45971      keep bin _cutoff_ _group_;
MPRINT(EM_DIAGRAM):   keep bin _cutoff_ _group_;
45972      if (bin > 1) then do;
MPRINT(EM_DIAGRAM):   if (bin > 1) then do;
45973      bin = bin - 1;
MPRINT(EM_DIAGRAM):   bin = bin - 1;
45974      _cutoff_ = (_maxP_ + _previousMinP_) / 2;
MPRINT(EM_DIAGRAM):   _cutoff_ = (_maxP_ + _previousMinP_) / 2;
45975      if (abs(_previousMaxP_ - _previousMinP_) < 1E-6) then do;
MPRINT(EM_DIAGRAM):   if (abs(_previousMaxP_ - _previousMinP_) < 1E-6) then do;
45976      /* tied */
45977      _cutoff_ = max((_minP_ + _maxP_)/2, min(_cutoff_, _previousMinP_/*-1E-6*/
45978      ));
MPRINT(EM_DIAGRAM):   _cutoff_ = max((_minP_ + _maxP_)/2, min(_cutoff_, _previousMinP_ ));
45979      end;
MPRINT(EM_DIAGRAM):   end;
45980      else if (abs(_maxP_ - _minP_) < 1E-6) then do;
MPRINT(EM_DIAGRAM):   else if (abs(_maxP_ - _minP_) < 1E-6) then do;
45981      /* next tied */
45982      _cutoff_ = min((_previousMinP_ + _previousMaxP_)/2, max(_cutoff_, _maxP_/*+ 1E-6*/
45983      ));
MPRINT(EM_DIAGRAM):   _cutoff_ = min((_previousMinP_ + _previousMaxP_)/2, max(_cutoff_, _maxP_ 
));
45984      end;
MPRINT(EM_DIAGRAM):   end;
45985      output;
MPRINT(EM_DIAGRAM):   output;
45986      *if ( abs((_maxP_ +_minP_)/2 - (_previousMaxP_ + _previousMinP_)/2) > 1E-6) then do;
MPRINT(EM_DIAGRAM):   *if ( abs((_maxP_ +_minP_)/2 - (_previousMaxP_ + _previousMinP_)/2) > 
1E-6) then do;
45987      * _group_ + 1;
MPRINT(EM_DIAGRAM):   * _group_ + 1;
45988      *end;
MPRINT(EM_DIAGRAM):   *end;
45989      if (_maxP_ le _previousMinP_ - 1E-6) then do;
MPRINT(EM_DIAGRAM):   if (_maxP_ le _previousMinP_ - 1E-6) then do;
45990      _group_ + 1;
MPRINT(EM_DIAGRAM):   _group_ + 1;
45991      end;
MPRINT(EM_DIAGRAM):   end;
45992      else if (abs(_maxP_ - _previousMinP_) < 1E-6) then do;
MPRINT(EM_DIAGRAM):   else if (abs(_maxP_ - _previousMinP_) < 1E-6) then do;
45993      if (abs(_maxP_ - _minP_) > 1E-6) then do;
MPRINT(EM_DIAGRAM):   if (abs(_maxP_ - _minP_) > 1E-6) then do;
45994      _group_ + 1;
MPRINT(EM_DIAGRAM):   _group_ + 1;
45995      end;
MPRINT(EM_DIAGRAM):   end;
45996      end;
MPRINT(EM_DIAGRAM):   end;
45997      bin + 1;
MPRINT(EM_DIAGRAM):   bin + 1;
45998      /* correct the previous change */
45999      end;
MPRINT(EM_DIAGRAM):   end;
46000      if (_lastObservation_) then do;
MPRINT(EM_DIAGRAM):   if (_lastObservation_) then do;
46001      _cutoff_ = .;
MPRINT(EM_DIAGRAM):   _cutoff_ = .;
46002      output;
MPRINT(EM_DIAGRAM):   output;
46003      end;
MPRINT(EM_DIAGRAM):   end;
46004      _previousMinP_ = _minP_;
MPRINT(EM_DIAGRAM):   _previousMinP_ = _minP_;
46005      _previousMaxP_ = _maxP_;
MPRINT(EM_DIAGRAM):   _previousMaxP_ = _maxP_;
46006      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 20 observations read from the data set WORK._EMRANK.
NOTE: The data set WORK._EMRANK has 20 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

46007      data WORK._EMRANK;
MPRINT(EM_DIAGRAM):    data WORK._EMRANK;
46008      set WORK._EMRANK;
MPRINT(EM_DIAGRAM):   set WORK._EMRANK;
46009      by _group_;
MPRINT(EM_DIAGRAM):   by _group_;
46010      retain _start_;
MPRINT(EM_DIAGRAM):   retain _start_;
46011      if (first._group_) then do;
MPRINT(EM_DIAGRAM):   if (first._group_) then do;
46012      _start_ = _n_;
MPRINT(EM_DIAGRAM):   _start_ = _n_;
46013      end;
MPRINT(EM_DIAGRAM):   end;
46014      if (last._group_) then do;
MPRINT(EM_DIAGRAM):   if (last._group_) then do;
46015      _end_ = _n_;
MPRINT(EM_DIAGRAM):   _end_ = _n_;
46016      output;
MPRINT(EM_DIAGRAM):   output;
46017      end;
MPRINT(EM_DIAGRAM):   end;
46018      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 20 observations read from the data set WORK._EMRANK.
NOTE: The data set WORK._EMRANK has 3 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

46019      filename emflow
46019    ! "C:\Users\brahm\OneDrive\Desktop\BAN210_Project\Workspaces\EMWS1\MdlComp\EMFLOWSCORE
46019    ! .sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\Users\brahm\OneDrive\Desktop\BAN210_Project\Workspaces\EMWS1\MdlComp\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * MdlComp: Scoring TREE_TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
46020      *------------------------------------------------------------*;
46021      * MdlComp: Scoring TREE_TRAIN data;
46022      *------------------------------------------------------------*;
46023      data EMWS1.MdlComp_TRAIN
46024      / view=EMWS1.MdlComp_TRAIN
46025      ;
MPRINT(EM_DIAGRAM):   data EMWS1.MdlComp_TRAIN / view=EMWS1.MdlComp_TRAIN ;
46026      set EMWS1.Tree_TRAIN
46027      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree_TRAIN ;
46028      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\Users\brahm\OneDrive\Desktop\BAN210_Project\Workspaces\EMWS1\MdlComp\EMFLOWSCORE.sas.
46029     +drop _temp_;
MPRINT(EM_DIAGRAM):   drop _temp_;
46030     +if (P_classrecurrence_events ge 0.86666666666666) then do;
MPRINT(EM_DIAGRAM):   if (P_classrecurrence_events ge 0.86666666666666) then do;
46031     +b_class = 1;
MPRINT(EM_DIAGRAM):   b_class = 1;
46032     +end;
MPRINT(EM_DIAGRAM):   end;
46033     +else
46034     +if (P_classrecurrence_events ge 0.45454545454545) then do;
MPRINT(EM_DIAGRAM):   else if (P_classrecurrence_events ge 0.45454545454545) then do;
46035     +_temp_ = dmran(1234);
MPRINT(EM_DIAGRAM):   _temp_ = dmran(1234);
46036     +b_class = floor(2 + 4*_temp_);
MPRINT(EM_DIAGRAM):   b_class = floor(2 + 4*_temp_);
46037     +end;
MPRINT(EM_DIAGRAM):   end;
46038     +else
46039     +do;
MPRINT(EM_DIAGRAM):   else do;
46040     +_temp_ = dmran(1234);
MPRINT(EM_DIAGRAM):   _temp_ = dmran(1234);
46041     +b_class = floor(6 + 15*_temp_);
MPRINT(EM_DIAGRAM):   b_class = floor(6 + 15*_temp_);
46042     +end;
MPRINT(EM_DIAGRAM):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
46043      run;

NOTE: DATA STEP view saved on file EMWS1.MDLCOMP_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.TREE_TRAIN.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.04 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.06 seconds
      

MPRINT(EM_DIAGRAM):   quit;
46044      quit;
46045      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
46046      filename emflow
46046    ! "C:\Users\brahm\OneDrive\Desktop\BAN210_Project\Workspaces\EMWS1\MdlComp\EMFLOWSCORE
46046    ! .sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\Users\brahm\OneDrive\Desktop\BAN210_Project\Workspaces\EMWS1\MdlComp\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * MdlComp: Scoring TREE_VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
46047      *------------------------------------------------------------*;
46048      * MdlComp: Scoring TREE_VALIDATE data;
46049      *------------------------------------------------------------*;
46050      data EMWS1.MdlComp_VALIDATE
46051      / view=EMWS1.MdlComp_VALIDATE
46052      ;
MPRINT(EM_DIAGRAM):   data EMWS1.MdlComp_VALIDATE / view=EMWS1.MdlComp_VALIDATE ;
46053      set EMWS1.Tree_VALIDATE
46054      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Tree_VALIDATE ;
46055      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\Users\brahm\OneDrive\Desktop\BAN210_Project\Workspaces\EMWS1\MdlComp\EMFLOWSCORE.sas.
46056     +drop _temp_;
MPRINT(EM_DIAGRAM):   drop _temp_;
46057     +if (P_classrecurrence_events ge 0.86666666666666) then do;
MPRINT(EM_DIAGRAM):   if (P_classrecurrence_events ge 0.86666666666666) then do;
46058     +b_class = 1;
MPRINT(EM_DIAGRAM):   b_class = 1;
46059     +end;
MPRINT(EM_DIAGRAM):   end;
46060     +else
46061     +if (P_classrecurrence_events ge 0.45454545454545) then do;
MPRINT(EM_DIAGRAM):   else if (P_classrecurrence_events ge 0.45454545454545) then do;
46062     +_temp_ = dmran(1234);
MPRINT(EM_DIAGRAM):   _temp_ = dmran(1234);
46063     +b_class = floor(2 + 4*_temp_);
MPRINT(EM_DIAGRAM):   b_class = floor(2 + 4*_temp_);
46064     +end;
MPRINT(EM_DIAGRAM):   end;
46065     +else
46066     +do;
MPRINT(EM_DIAGRAM):   else do;
46067     +_temp_ = dmran(1234);
MPRINT(EM_DIAGRAM):   _temp_ = dmran(1234);
46068     +b_class = floor(6 + 15*_temp_);
MPRINT(EM_DIAGRAM):   b_class = floor(6 + 15*_temp_);
46069     +end;
MPRINT(EM_DIAGRAM):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
46070      run;

NOTE: DATA STEP view saved on file EMWS1.MDLCOMP_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS1.TREE_VALIDATE.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
      

MPRINT(EM_DIAGRAM):   quit;
46071      quit;
46072      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
46073      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
46074      * MdlComp: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * MdlComp: Computing metadata for TRAIN data;
46075      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS1.MDLCOMP_TRAIN.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.06 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.MdlComp_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.MdlComp_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.MdlComp_TRAIN out=WORK.M39_07PI noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M39_07PI;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 
INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M39_07PI(keep=name type length label format formatl 
formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, 
best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, 
best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, 
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, 
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M39_07PI;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M39_07PI;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M1T4KESF NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1T4KESF;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M1T4KESF;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1LUX9RU(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M1T4KESF;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1T4KESF;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 
FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M1T4KESF;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" 
"MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" 
"QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" "YEAR" "YYMMDD" "YYMON" 
"YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" 
"EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) 
formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = 
"DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) 
formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" 
"NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" 
"SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = 
"DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then 
level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 
'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 
'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ 
('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 
'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 
'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 
'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then 
do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 
'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1T4KESF;
MPRINT(EMADVISECOLUMNS):   set WORK.M1T4KESF;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= 
"Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= 
"Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower limit" UPPERLIMIT= 
"Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= 
"Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Tree_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Tree_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.MdlComp_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT 
LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "MdlComp";
MPRINT(EM_DIAGRAM):   run;
NOTE: View EMWS1.MDLCOMP_TRAIN.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.06 seconds
      
NOTE: View EMWS1.MDLCOMP_VALIDATE.VIEW used (Total process time):
      real time           0.07 seconds
      cpu time            0.06 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;

MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "August 07, 2022" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "18:36:47" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                August 07, 2022
Time:                18:36:47
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2VRICPM "C:\Users\brahm\OneDrive\Desktop\BAN210_Project\Workspaces\EMWS1\GrfExpl\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2VRICPM new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG "C:\Users\brahm\OneDrive\Desktop\BAN210_Project\Workspaces\EMWS1\GrfExpl\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "August 07, 2022" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "18:36:47" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                brahm";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70192439";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_8HOME";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.04.01M3P062415";
MPRINT(EM_DIAGRAM):   put "EM Version:          14.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\brahm\OneDrive\Desktop\BAN210_Project\Workspaces\EMWS1\GrfExpl\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN "C:\Users\brahm\OneDrive\Desktop\BAN210_Project\Workspaces\EMWS1\GrfExpl\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN "C:\Users\brahm\OneDrive\Desktop\BAN210_Project\Workspaces\EMWS1\GrfExpl\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT "C:\Users\brahm\OneDrive\Desktop\BAN210_Project\Workspaces\EMWS1\GrfExpl\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "August 07, 2022" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "18:36:47" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                brahm";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\brahm\OneDrive\Desktop\BAN210_Project\Workspaces\EMWS1\GrfExpl\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\brahm\OneDrive\Desktop\BAN210_Project\Workspaces\EMWS1\GrfExpl\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN "C:\Users\brahm\OneDrive\Desktop\BAN210_Project\Workspaces\EMWS1\GrfExpl\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_ 'C:\Users\brahm\OneDrive\Desktop\BAN210_Project\Workspaces\EMWS1\GrfExpl\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
21573      proc freq data=EMWS1.GrfExpl_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS1.GrfExpl_VariableSet noprint;
21574      table ROLE*LEVEL/out=WORK.GrfExplMETA;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.GrfExplMETA;
21575      run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 10 observations read from the data set EMWS1.GRFEXPL_VARIABLESET.
NOTE: The data set WORK.GRFEXPLMETA has 3 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
      

21576      proc print data=WORK.GrfExplMETA label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.GrfExplMETA label noobs;
21577      var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
21578      label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency Count";
21579      title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
21580      title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
21581      run;

NOTE: There were 3 observations read from the data set WORK.GRFEXPLMETA.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
      

21582      title10;
MPRINT(EM_DIAGRAM):   title10;
21583      %let EMEXCEPTIONSTRING=;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * GrfExpl: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * GrfExpl: EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * System Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   length string $2000;
MPRINT(EM_DIAGRAM):   string = 'BAN210_Project';
MPRINT(EM_DIAGRAM):   call symput('EM_PROJECTNAME', trim(string));
MPRINT(EM_DIAGRAM):   string = 'Diag1';
MPRINT(EM_DIAGRAM):   call symput('EM_WSNAME', trim(string));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Properties Macro Variables ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Files Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Import Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Export Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Decision Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Statement Macro Variables;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * General Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Target Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Input Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rejected Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Misc Variable Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End Create EM Macro Variables and Macros;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
21891      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
21892      * GrfExpl: Generation of macros and macro variables;
MPRINT(EM_DIAGRAM):   * GrfExpl: Generation of macros and macro variables;
21893      * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
MPRINT(EM_DIAGRAM):   * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
21894      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

21895      %let EMEXCEPTIONSTRING=;
21896      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
21897      * TRAIN: GrfExpl;
MPRINT(EM_DIAGRAM):   * TRAIN: GrfExpl;
21898      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
21899      %let EM_ACTION = TRAIN;
21900      %let syscc = 0;
21901      %macro main;
21902         filename temp catalog 'sashelp.emexpl.graphexplore_macros.source';
21903         %include temp;
21904         filename temp;
21905      
21906         %SetProperties;
21907      
21908         %if %upcase(&EM_ACTION) = CREATE %then %do;
21909      
21910             filename temp catalog 'sashelp.emexpl.graphexplore_create.source';
21911             %include temp;
21912             filename temp;
21913             %create;
21914         %end;
21915         %else
21916         %if %upcase(&EM_ACTION) = TRAIN %then %do;
21917      
21918             filename temp catalog 'sashelp.emexpl.graphexplore_train.source';
21919             %include temp;
21920             filename temp;
21921             %train;
21922      
21923         %end;
21924         %else
21925         %if %upcase(&EM_ACTION) = REPORT %then %do;
21926      
21927             filename temp catalog 'sashelp.emexpl.graphexplore_report.source';
21928             %include temp;
21929             filename temp;
21930      
21931             %report;
21932         %end;
21933      
21934      %mend main;
21935      
21936      %main;
MPRINT(EM_DIAGRAM):    
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.graphexplore_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.GRAPHEXPLORE_MACROS.SOURCE.
21937     +%macro SetProperties;
21938     +   %em_checkmacro(name=EM_PROPERTY_INTERVALBYTARGET,      global=Y, value=Y);
21939     +   %em_checkmacro(name=EM_PROPERTY_CLASSBYTARGET,         global=Y, value=Y);
21940     +   %em_checkmacro(name=EM_PROPERTY_DATASOURCE,            global=Y, value=SAMPLE);
21941     +   %em_checkmacro(name=EM_PROPERTY_EMSAMPLEMETHOD,        global=Y, value=FIRSTN);
21942     +   %em_checkmacro(name=EM_PROPERTY_EMSAMPLESIZE,          global=Y, value=DEFAULT);
21943     +   %em_checkmacro(name=EM_PROPERTY_EMRANDOMSEED,          global=Y, value=12345);
21944     +
21945     +%mend SetProperties;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(SETPROPERTIES):  ;
MPRINT(MAIN):  ;
MPRINT(MAIN):   filename temp catalog 'sashelp.emexpl.graphexplore_train.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMEXPL.GRAPHEXPLORE_TRAIN.SOURCE.
21946     +%macro train;
21947     +
21948     +    %let graphData = &em_import_data;
21949     +    %if "&graphData" eq "" %then
21950     +        %let graphData = &em_import_transaction;
21951     +    %if "&graphData" eq "" %then
21952     +        %let graphData = &em_import_document;
21953     +    %if "&graphData" eq "" %then
21954     +        %let graphData = &em_import_validate;
21955     +    %if "&graphData" eq "" %then
21956     +        %let graphData = &em_import_test;
21957     +    %if "&graphData" eq "" %then
21958     +        %let graphData = &em_import_score;
21959     +
21960     +    %if "&graphData" eq "" %then %do;
21961     +        %let emexceptionString = exception.server.IMPORT.NODATA;
21962     +        %goto doendm;
21963     +    %end;
21964     +
21965     +    %em_getname(key=SAMPLE_DATA, type=DATA);
21966     +
21967     +    filename vartemp catalog 'sashelp.emutil.em_varmacro.source';
21968     +    %include vartemp;
21969     +    filename vartemp;
21970     +
21971     +    data tempVariableSet;
21972     +       set &em_data_variableset;
21973     +       where (ROLE = 'REJECTED' and USE='Y') or ROLE='FREQ' or ( ROLE ne 'REJECTED' and USE in('Y', 'D'));
21974     +       if _N_< 950 or (ROLE = 'TARGET' and USE in('Y', 'D')) or ROLE='FREQ' then output;
21975     +    run;
21976     +    %em_varMacro(name=varSample, metadata=tempVariableSet, where=, key=NAME, nummacro=numVarSample);
21977     +
21978     +
21979     +     %exploreSample(DATA=&graphData, OUTPUT=&EM_USER_SAMPLE_DATA, METADATA=&EM_DATA_VARIABLESET, VARS=%varSample,
21980     +                      METHOD=&EM_PROPERTY_EMSAMPLEMETHOD, SIZE=&EM_PROPERTY_EMSAMPLESIZE,
21981     +                      ALPHA=, PVALUE=, SEED=&EM_PROPERTY_EMRANDOMSEED);
21982     +
21983     +    %doendm:
21984     +
21985     +%mend train;
21986     +
21987     +%train;
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename vartemp catalog 'sashelp.emutil.em_varmacro.source';
NOTE: %INCLUDE (level 2) file VARTEMP is file SASHELP.EMUTIL.EM_VARMACRO.SOURCE.
21989     +%macro em_varMacro(name=emMacro, metadata=, where=, key=NAME, nummacro=, maxvar=-1);
21991     +   filename macFile catalog 'work.emutil.macro.source';
21992     +   %let _METAOBS = 0;
21993     +   %let _maxvar = &maxvar;
21994     +   %if "&_maxvar" eq "" %then %let maxvar = -1;
21996     +   %if (%sysfunc(exist(&metadata))<1 and %sysfunc(exist(&metadata, VIEW))<1)
21997     +                   or (&metadata eq ) %then %do;
21998     +       %put * No metadata data set defined;
21999     +       %goto doend;
22000     +   %end;
22002     +   data _null_;
22003     +      length _STRING_ $80;
22004     +      retain _STRING_ '' maxvar 0;
22005     +      set &metadata end=eof;
22006     +      file macFile;
22007     +      %if %nrbquote(&where) ne %then %do;
22008     +          %let whereClause = where (%nrbquote(&where));
22009     +          %unquote(&whereClause);
22010     +      %end;
22011     +      if _N_=1 then do;
22012     +         string = "%"!!"macro &name;";
22013     +         put string;
22014     +      end;
22015     +      maxvar +1;
22016     +      if (length(_STRING_) + length(trim(&key))+ 4 < 80) then do;
22017     +         _STRING_ = trim(_STRING_)!!' '!!trim(&key);
22018     +         if eof
22019     +            %if  %sysevalf(&_maxvar > 0) %then %do;
22020     +                or maxvar >= &maxvar
22021     +            %end;
22022     +            then do;
22023     +            put _STRING_;
22024     +            string = "%"!!"mend &name;";
22025     +            put string;
22026     +            string = strip(put(_N_, best.));
22027     +            call symput('_METAOBS', string);
22028     +            %if (&nummacro ne ) %then %do;
22029     +                put "%" "global &nummacro;";
22030     +                put "%" "let &nummacro = " string ";";
22031     +            %end;
22032     +            stop;
22033     +         end;
22034     +      end;
22035     +      else do;
22036     +         put _STRING_;
22037     +         _string_ = TRIM(&key);
22038     +         if eof
22039     +            %if  %sysevalf(&_maxvar > 0) %then %do;
22040     +              or maxvar >= &maxvar
22041     +           %end;
22042     +            then do;
22043     +            put _STRING_;
22044     +            string = "%"!!"mend &name;";
22045     +            put string;
22046     +        end;
22047     +      end;
22048     +      if eof
22049     +         %if  %sysevalf(&_maxvar > 0) %then %do;
22050     +             or maxvar >= &maxvar
22051     +         %end;
22052     +         then do;
22053     +         string = strip(put(_N_, best.));
22054     +         call symput('_METAOBS', string);
22055     +         %if (&nummacro ne ) %then %do;
22056     +             put "%" "global &nummacro;";
22057     +             put "%" "let &nummacro = " string ";";
22058     +         %end;
22059     +         stop;
22060     +      end;
22061     +   run;
22063     +   %doend:
22064     +   %if ^&_METAOBS %then %do;
22065     +       data _null_;
22066     +          file macFile;
22067     +          put "%" "macro &name;";
22068     +          put "%" "mend &name;";
22069     +          %if (&nummacro ne ) %then %do;
22070     +              put "%" "global &nummacro;";
22071     +              put "%" "let &nummacro = 0;";
22072     +          %end;
22073     +      run;
22074     +   %end;
22075     +   %inc macFile;
22076     +   filename macFile;
22077     +%mend em_varMacro;
NOTE: %INCLUDE (level 2) ending.
NOTE: %INCLUDE (level 1) resuming.
MPRINT(TRAIN):   filename vartemp;
NOTE: Fileref VARTEMP has been deassigned.
MPRINT(TRAIN):   data tempVariableSet;
MPRINT(TRAIN):   set EMWS1.GrfExpl_VariableSet;
MPRINT(TRAIN):   where (ROLE = 'REJECTED' and USE='Y') or ROLE='FREQ' or ( ROLE ne 'REJECTED' and USE in('Y', 'D'));
MPRINT(TRAIN):   if _N_< 950 or (ROLE = 'TARGET' and USE in('Y', 'D')) or ROLE='FREQ' then output;
MPRINT(TRAIN):   run;

NOTE: There were 10 observations read from the data set EMWS1.GRFEXPL_VARIABLESET.
      WHERE ((ROLE='REJECTED') and (USE='Y')) or (ROLE='FREQ') or ((ROLE not = 'REJECTED') and USE in ('D', 'Y'));
NOTE: The data set WORK.TEMPVARIABLESET has 10 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_VARMACRO):   filename macFile catalog 'work.emutil.macro.source';
MPRINT(EM_VARMACRO):   data _null_;
MPRINT(EM_VARMACRO):   length _STRING_ $80;
MPRINT(EM_VARMACRO):   retain _STRING_ '' maxvar 0;
MPRINT(EM_VARMACRO):   set tempVariableSet end=eof;
MPRINT(EM_VARMACRO):   file macFile;
MPRINT(EM_VARMACRO):   if _N_=1 then do;
MPRINT(EM_VARMACRO):   string = "%"!!"macro varSample;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   maxvar +1;
MPRINT(EM_VARMACRO):   if (length(_STRING_) + length(trim(NAME))+ 4 < 80) then do;
MPRINT(EM_VARMACRO):   _STRING_ = trim(_STRING_)!!' '!!trim(NAME);
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend varSample;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   put "%" "global numVarSample;";
MPRINT(EM_VARMACRO):   put "%" "let numVarSample = " string ";";
MPRINT(EM_VARMACRO):   stop;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   else do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   _string_ = TRIM(NAME);
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend varSample;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   put "%" "global numVarSample;";
MPRINT(EM_VARMACRO):   put "%" "let numVarSample = " string ";";
MPRINT(EM_VARMACRO):   stop;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   run;

NOTE: The file MACFILE is:
      Catalog Name=WORK.EMUTIL.MACRO.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=4,
      Created=Sun, Aug  7, 2022 06:36:49 PM,
      Last Modified=Sun, Aug  7, 2022 06:36:49 PM,
      Filename=C:\Users\brahm\AppData\Local\Temp\SAS Temporary Files\_TD30776_DESKTOP-VQ3H6HR_\Prc2\emutil.sas7bcat,
      Release Created=9.0401M3,
      Host Created=X64_8HOME

NOTE: 6 records were written to the file MACFILE.
      The minimum record length was 16.
      The maximum record length was 67.
NOTE: There were 10 observations read from the data set WORK.TEMPVARIABLESET.
NOTE: DATA statement used (Total process time):
      real time           0.83 seconds
      cpu time            0.00 seconds
      

NOTE: %INCLUDE (level 2) file MACFILE is file WORK.EMUTIL.MACRO.SOURCE.
22078     +%macro varSample;
22079     +age breast breast_quad class deg_malig inv_nodes irradiat menopause
22080     +node_caps tumor_size
22081     +%mend varSample;
22082     +%global numVarSample;
22083     +%let numVarSample = 10 ;
NOTE: %INCLUDE (level 2) ending.
NOTE: %INCLUDE (level 1) resuming.
MPRINT(EM_VARMACRO):   filename macFile;
NOTE: Fileref MACFILE has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(EXPLORESAMPLE):   filename x catalog 'sashelp.emutil.exploreobs.source';
NOTE: %INCLUDE (level 2) file X is file SASHELP.EMUTIL.EXPLOREOBS.SOURCE.
22084     +/*------------------------------------------------------------------
22085     +  MACRO EXPLOREOBS
22086     +
22087     +  SUPPORT:  SASDHD - David Duling
22088     +  PRODUCT:  Enterprise Miner
22089     +
22090     +  DESCRIPTION:
22091     +  Generates maximum and default numbers of observations to
22092     +  download for visualization depending on the record length.
22093     +
22094     +  Values were determined by trial and error using typical
22095     +  Windows workstation configurations.
22096     +
22097     +  Discrete sets of values are returned so that user experience
22098     +  will be consitent with similar sized data sets.
22099     +
22100     +  These macro variables are set:
22101     +  _exploreobs_max -- maximum number of obs downloadable
22102     +  _exploreobs_def -- default number of obs to be downloaded
22103     +  _exploreobs_recl - record length.  Might be useful for reporting.
22104     +
22105     +  Use the _exploreobs_max to set limit the GUI selection of
22106     +  observations for downloading.  The GUI selection for obs
22107     +  could be reduced to "Default" and "Max".
22108     +
22109     +  Parameters
22110     +  data=   libname.memname of input data
22111     +  vars=   subset list of variables.
22112     +          downloading 1 out of 500 really does work like downloading
22113     +          1 out of 1 vars.  Users may select a subset of vars for
22114     +                   visualizations.  Pass in the list as space delimited
22115     +          var names.  If vars is not specified, the record length
22116     +          of the entire data will be used.
22117     +  NBYTES=   maximum number of bytes that shouldn't be exceeded.
22118     +
22119     +  Control
22120     +  Users may control the values by entering these macro variables.
22121     +            EM_EXPLOREOBS_MAX
22122     +            EM_EXPLOREOBS_DEFAULT
22123     +  These values override the computed values.
22124     +
22125     +  Debugging
22126     +  %let _exploreobs_debug=1 ;
22127     +--------------------------------------------------------------------
22128     +  HISTORY: 20APR2004. sasdhd. pushed.
22129     +           18DEC2004. sasdhd. S0280556.
22130     +           07SEP2007. sasdhd. HK1009586
22131     +--------------------------------------------------------------------*/
22132     +
22133     +%macro exploreobs(data=,vars=, nbytes=) ;
22134     +
22135     +   /*--- variable definitions ---*/
22136     +   %global _exploreobs_max _exploreobs_def _exploreobs_recl _exploreobs_debug ;
22137     +   %local xobs xvars xlen vlen xi vname vlist ;
22138     +   %local _exp_source _exp_notes ;
22139     +
22140     +   /*--- USER definitions ---*/
22141     +   %global EM_EXPLOREOBS_MAX EM_EXPLOREOBS_DEFAULT ;
22142     +
22143     +   /*--- variable intializations ---*/
22144     +   %let _exploreobs_max=0 ;
22145     +   %let _exploreobs_def=0 ;
22146     +   %let _exploreobs_recl=0 ;
22147     +   %let xvars= 0 ;
22148     +   %let xlen = 0 ;
22149     +   %let xobs = 0 ;
22150     +
22151     +   /*--- data error checks ---*/
22152     +   %if "&data" eq "" %then %do ;
22153     +            %put NOTE: DATA is not specified. ;
22154     +            %goto term ;
22155     +      %end ;
22156     +
22157     +   %let dsid=%sysfunc(open(&data)) ;
22158     +   %if not &dsid %then %do ;
22159     +            %put NOTE: DATA &data is not available. ;
22160     +            %goto term ;
22161     +      %end ;
22162     +
22163     +   /*--- if a vars list exists generate a subset ---*/
22164     +   %if &vars ne %then %do ;
22165     +         %let dsid=%sysfunc(close(&dsid)) ;
22166     +         %if &_exploreobs_debug ne 1 %then %do ;
22167     +                  %let _exp_source=%sysfunc(getoption(SOURCE)) ;
22168     +            %let _exp_notes =%sysfunc(getoption(NOTES)) ;
22169     +                  options nosource nonotes ;
22170     +         %end ;
22171     +         data _exploreobs_temp_data ;
22172     +         set &data(obs=0) ;
22173     +          keep &vars ;
22174     +         run;
22175     +         %if &_exploreobs_debug ne 1 %then %do ;
22176     +                  options &_exp_source &_exp_notes ;
22177     +         %end ;
22178     +         %let dsid=%sysfunc(open(_exploreobs_temp_data)) ;
22179     +         %if &dsid eq 0 %then %do ;
22180     +                  %put NOTE: Sample is not available.;
22181     +                  %goto term ;
22182     +            %end ;
22183     +      %end ;
22184     +
22185     +   /*--- get var attributes ---*/
22186     +   %let xvars=%sysfunc(attrn(&dsid,nvars)) ;
22187     +   %let xobs= %sysfunc(attrn(&dsid,nobs )) ;
22188     +   %let xlen= %sysfunc(attrn(&dsid,lrecl)) ;
22189     +   %let dsid= %sysfunc(close(&dsid)) ;
22190     +
22191     +   /*--- set default and max obs ---*/
22192     +   %let _exploreobs_recl=%eval(&xlen) ;
22193     +   %if &_exploreobs_recl eq 0 %then %do ;
22194     +             %let _exploreobs_max= 0 ;
22195     +             %let _exploreobs_def= 0 ;
22196     +             %goto term ;
22197     +
22198     +   %end ;
22199     +   %else
22200     +   %if &_exploreobs_recl le 32 %then %do ;
22201     +             %let _exploreobs_max=100000 ;
22202     +             %let _exploreobs_def= 10000 ;
22203     +   %end ;
22204     +   %else
22205     +   %if &_exploreobs_recl le 128 %then %do ;
22206     +             %let _exploreobs_max=60000 ;
22207     +             %let _exploreobs_def= 6000 ;
22208     +   %end ;
22209     +   %else
22210     +   %if &_exploreobs_recl lt 1000 %then %do ;
22211     +             %let _exploreobs_max=20000 ;
22212     +             %let _exploreobs_def= 2000 ;
22213     +   %end ;
22214     +   %else
22215     +   %if &_exploreobs_recl lt 5000 %then %do ;
22216     +             %let _exploreobs_max= 10000 ;
22217     +             %let _exploreobs_def=  1000 ;
22218     +   %end ;
22219     +   %else
22220     +   %if &_exploreobs_recl lt 20000 %then %do ;
22221     +             %let _exploreobs_max= 5000 ;
22222     +             %let _exploreobs_def=  500 ;
22223     +   %end ;
22224     +   %else %do ;
22225     +             %let _exploreobs_max= 1000 ;
22226     +             %let _exploreobs_def=  200 ;
22227     +   %end ;
22228     +
22229     +   /*--- Users options ---*/
22230     +   %if &EM_EXPLOREOBS_MAX ne %then %do ;
22231     +            %let _exploreobs_max= %eval(&EM_EXPLOREOBS_MAX) ;
22232     +   %end;
22233     +   %if &EM_EXPLOREOBS_DEFAULT ne %then %do ;
22234     +            %let _exploreobs_def= %eval(&EM_EXPLOREOBS_DEFAULT) ;
22235     +   %end;
22236     +
22237     +    /*--- S0868273 ---*/
22238     +    %if "&NBYTES" ne "" %then %do;
22239     +       %let nbytes_nrows = %eval(&nbytes/ &_exploreobs_recl);
22240     +       %if &EM_EXPLOREOBS_MAX ne %then %do ;
22241     +           %let _exploreobs_max   = %sysfunc(min(&nbytes_nrows , &EM_EXPLOREOBS_MAX));
22242     +       %end;
22243     +
22244     +       %if &EM_EXPLOREOBS_DEFAULT ne %then %do ;
22245     +          %let nbytes_nrows      = %eval(&nbytes_nrows/10);
22246     +          %let _exploreobs_def   = %sysfunc(min(&nbytes_nrows , &EM_EXPLOREOBS_DEFAULT));
22247     +          %if ^&_exploreobs_def %then
22248     +              %let _exploreobs_def = 1;
22249     +
22250     +       %end;
22251     +    %end;
22252     +
22253     +   /*--- Terminate ---*/
22254     +   %term:
22255     +
22256     +   %put NOTE: EXPLOREOBS &data : vars= &xvars : recl= &_exploreobs_recl : max=&_exploreobs_max : def= &_exploreobs_def ;
22257     +%mend ;
22258     +
22259     +
NOTE: %INCLUDE (level 2) ending.
NOTE: %INCLUDE (level 1) resuming.
MPRINT(EXPLORESAMPLE):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(EXPLOREOBS):   options nosource nonotes ;
MPRINT(EXPLOREOBS):   data _exploreobs_temp_data ;
MPRINT(EXPLOREOBS):   set EMWS1.FIMPORT_train(obs=0) ;
MPRINT(EXPLOREOBS):   keep age breast breast_quad class deg_malig inv_nodes irradiat menopause node_caps tumor_size ;
MPRINT(EXPLOREOBS):   run;
MPRINT(EXPLOREOBS):   options SOURCE NOTES ;
NOTE: EXPLOREOBS EMWS1.FIMPORT_train : vars= 10 : recl= 72 : max=60000 : def= 6000
MPRINT(EXPLORESAMPLE):   ;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EXPLORESAMPLE):  ;
*------------------------------------------------------------*
* FirstN/Top sample
*------------------------------------------------------------*
MPRINT(EXPLORESAMPLE):   data EMWS1.GrfExpl_SAMPLE_DATA;
MPRINT(EXPLORESAMPLE):   set EMWS1.FIMPORT_train(obs= 6000 Keep=age breast breast_quad class deg_malig inv_nodes irradiat menopause node_caps tumor_size );
MPRINT(EXPLORESAMPLE):   run;

NOTE: View EMWS1.FIMPORT_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      
NOTE: There were 286 observations read from the data set EMWS1.FIMPORT_DATA.
NOTE: There were 286 observations read from the data set EMWS1.FIMPORT_TRAIN.
NOTE: The data set EMWS1.GRFEXPL_SAMPLE_DATA has 286 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(MAIN):  ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(TRAIN):   filename vartemp catalog 'sashelp.emutil.em_varmacro.source';
NOTE: %INCLUDE (level 1) file VARTEMP is file SASHELP.EMUTIL.EM_VARMACRO.SOURCE.
22261     +%macro em_varMacro(name=emMacro, metadata=, where=, key=NAME, nummacro=, maxvar=-1);
22263     +   filename macFile catalog 'work.emutil.macro.source';
22264     +   %let _METAOBS = 0;
22265     +   %let _maxvar = &maxvar;
22266     +   %if "&_maxvar" eq "" %then %let maxvar = -1;
22268     +   %if (%sysfunc(exist(&metadata))<1 and %sysfunc(exist(&metadata, VIEW))<1)
22269     +                   or (&metadata eq ) %then %do;
22270     +       %put * No metadata data set defined;
22271     +       %goto doend;
22272     +   %end;
22274     +   data _null_;
22275     +      length _STRING_ $80;
22276     +      retain _STRING_ '' maxvar 0;
22277     +      set &metadata end=eof;
22278     +      file macFile;
22279     +      %if %nrbquote(&where) ne %then %do;
22280     +          %let whereClause = where (%nrbquote(&where));
22281     +          %unquote(&whereClause);
22282     +      %end;
22283     +      if _N_=1 then do;
22284     +         string = "%"!!"macro &name;";
22285     +         put string;
22286     +      end;
22287     +      maxvar +1;
22288     +      if (length(_STRING_) + length(trim(&key))+ 4 < 80) then do;
22289     +         _STRING_ = trim(_STRING_)!!' '!!trim(&key);
22290     +         if eof
22291     +            %if  %sysevalf(&_maxvar > 0) %then %do;
22292     +                or maxvar >= &maxvar
22293     +            %end;
22294     +            then do;
22295     +            put _STRING_;
22296     +            string = "%"!!"mend &name;";
22297     +            put string;
22298     +            string = strip(put(_N_, best.));
22299     +            call symput('_METAOBS', string);
22300     +            %if (&nummacro ne ) %then %do;
22301     +                put "%" "global &nummacro;";
22302     +                put "%" "let &nummacro = " string ";";
22303     +            %end;
22304     +            stop;
22305     +         end;
22306     +      end;
22307     +      else do;
22308     +         put _STRING_;
22309     +         _string_ = TRIM(&key);
22310     +         if eof
22311     +            %if  %sysevalf(&_maxvar > 0) %then %do;
22312     +              or maxvar >= &maxvar
22313     +           %end;
22314     +            then do;
22315     +            put _STRING_;
22316     +            string = "%"!!"mend &name;";
22317     +            put string;
22318     +        end;
22319     +      end;
22320     +      if eof
22321     +         %if  %sysevalf(&_maxvar > 0) %then %do;
22322     +             or maxvar >= &maxvar
22323     +         %end;
22324     +         then do;
22325     +         string = strip(put(_N_, best.));
22326     +         call symput('_METAOBS', string);
22327     +         %if (&nummacro ne ) %then %do;
22328     +             put "%" "global &nummacro;";
22329     +             put "%" "let &nummacro = " string ";";
22330     +         %end;
22331     +         stop;
22332     +      end;
22333     +   run;
22335     +   %doend:
22336     +   %if ^&_METAOBS %then %do;
22337     +       data _null_;
22338     +          file macFile;
22339     +          put "%" "macro &name;";
22340     +          put "%" "mend &name;";
22341     +          %if (&nummacro ne ) %then %do;
22342     +              put "%" "global &nummacro;";
22343     +              put "%" "let &nummacro = 0;";
22344     +          %end;
22345     +      run;
22346     +   %end;
22347     +   %inc macFile;
22348     +   filename macFile;
22349     +%mend em_varMacro;
NOTE: %INCLUDE (level 1) ending.
MPRINT(TRAIN):   filename vartemp;
NOTE: Fileref VARTEMP has been deassigned.
MPRINT(TRAIN):   data tempVariableSet;
MPRINT(TRAIN):   set EMWS1.GrfExpl_VariableSet;
MPRINT(TRAIN):   where (ROLE = 'REJECTED' and USE='Y') or ROLE='FREQ' or ( ROLE ne 'REJECTED' and USE in('Y', 'D'));
MPRINT(TRAIN):   if _N_< 950 or (ROLE = 'TARGET' and USE in('Y', 'D')) or ROLE='FREQ' then output;
MPRINT(TRAIN):   run;

NOTE: There were 10 observations read from the data set EMWS1.GRFEXPL_VARIABLESET.
      WHERE ((ROLE='REJECTED') and (USE='Y')) or (ROLE='FREQ') or ((ROLE not = 'REJECTED') and USE in ('D', 'Y'));
NOTE: The data set WORK.TEMPVARIABLESET has 10 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.09 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_VARMACRO):   filename macFile catalog 'work.emutil.macro.source';
MPRINT(EM_VARMACRO):   data _null_;
MPRINT(EM_VARMACRO):   length _STRING_ $80;
MPRINT(EM_VARMACRO):   retain _STRING_ '' maxvar 0;
MPRINT(EM_VARMACRO):   set tempVariableSet end=eof;
MPRINT(EM_VARMACRO):   file macFile;
MPRINT(EM_VARMACRO):   if _N_=1 then do;
MPRINT(EM_VARMACRO):   string = "%"!!"macro varSample;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   maxvar +1;
MPRINT(EM_VARMACRO):   if (length(_STRING_) + length(trim(NAME))+ 4 < 80) then do;
MPRINT(EM_VARMACRO):   _STRING_ = trim(_STRING_)!!' '!!trim(NAME);
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend varSample;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   put "%" "global numVarSample;";
MPRINT(EM_VARMACRO):   put "%" "let numVarSample = " string ";";
MPRINT(EM_VARMACRO):   stop;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   else do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   _string_ = TRIM(NAME);
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   put _STRING_;
MPRINT(EM_VARMACRO):   string = "%"!!"mend varSample;";
MPRINT(EM_VARMACRO):   put string;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   if eof then do;
MPRINT(EM_VARMACRO):   string = strip(put(_N_, best.));
MPRINT(EM_VARMACRO):   call symput('_METAOBS', string);
MPRINT(EM_VARMACRO):   put "%" "global numVarSample;";
MPRINT(EM_VARMACRO):   put "%" "let numVarSample = " string ";";
MPRINT(EM_VARMACRO):   stop;
MPRINT(EM_VARMACRO):   end;
MPRINT(EM_VARMACRO):   run;

NOTE: The file MACFILE is:
      Catalog Name=WORK.EMUTIL.MACRO.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=5,
      Created=Sun, Aug  7, 2022 06:36:49 PM,
      Last Modified=Sun, Aug  7, 2022 06:36:49 PM,
      Filename=C:\Users\brahm\AppData\Local\Temp\SAS Temporary Files\_TD30776_DESKTOP-VQ3H6HR_\Prc2\emutil.sas7bcat,
      Release Created=9.0401M3,
      Host Created=X64_8HOME

NOTE: 6 records were written to the file MACFILE.
      The minimum record length was 16.
      The maximum record length was 67.
NOTE: There were 10 observations read from the data set WORK.TEMPVARIABLESET.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: %INCLUDE (level 1) file MACFILE is file WORK.EMUTIL.MACRO.SOURCE.
22350     +%macro varSample;
22351     +age breast breast_quad class deg_malig inv_nodes irradiat menopause
22352     +node_caps tumor_size
22353     +%mend varSample;
22354     +%global numVarSample;
22355     +%let numVarSample = 10 ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_VARMACRO):   filename macFile;
NOTE: Fileref MACFILE has been deassigned.
MPRINT(TRAIN):  ;
MPRINT(EXPLORESAMPLE):   filename x catalog 'sashelp.emutil.exploreobs.source';
NOTE: %INCLUDE (level 1) file X is file SASHELP.EMUTIL.EXPLOREOBS.SOURCE.
22356     +/*------------------------------------------------------------------
22357     +  MACRO EXPLOREOBS
22358     +
22359     +  SUPPORT:  SASDHD - David Duling
22360     +  PRODUCT:  Enterprise Miner
22361     +
22362     +  DESCRIPTION:
22363     +  Generates maximum and default numbers of observations to
22364     +  download for visualization depending on the record length.
22365     +
22366     +  Values were determined by trial and error using typical
22367     +  Windows workstation configurations.
22368     +
22369     +  Discrete sets of values are returned so that user experience
22370     +  will be consitent with similar sized data sets.
22371     +
22372     +  These macro variables are set:
22373     +  _exploreobs_max -- maximum number of obs downloadable
22374     +  _exploreobs_def -- default number of obs to be downloaded
22375     +  _exploreobs_recl - record length.  Might be useful for reporting.
22376     +
22377     +  Use the _exploreobs_max to set limit the GUI selection of
22378     +  observations for downloading.  The GUI selection for obs
22379     +  could be reduced to "Default" and "Max".
22380     +
22381     +  Parameters
22382     +  data=   libname.memname of input data
22383     +  vars=   subset list of variables.
22384     +          downloading 1 out of 500 really does work like downloading
22385     +          1 out of 1 vars.  Users may select a subset of vars for
22386     +                   visualizations.  Pass in the list as space delimited
22387     +          var names.  If vars is not specified, the record length
22388     +          of the entire data will be used.
22389     +  NBYTES=   maximum number of bytes that shouldn't be exceeded.
22390     +
22391     +  Control
22392     +  Users may control the values by entering these macro variables.
22393     +            EM_EXPLOREOBS_MAX
22394     +            EM_EXPLOREOBS_DEFAULT
22395     +  These values override the computed values.
22396     +
22397     +  Debugging
22398     +  %let _exploreobs_debug=1 ;
22399     +--------------------------------------------------------------------
22400     +  HISTORY: 20APR2004. sasdhd. pushed.
22401     +           18DEC2004. sasdhd. S0280556.
22402     +           07SEP2007. sasdhd. HK1009586
22403     +--------------------------------------------------------------------*/
22404     +
22405     +%macro exploreobs(data=,vars=, nbytes=) ;
22406     +
22407     +   /*--- variable definitions ---*/
22408     +   %global _exploreobs_max _exploreobs_def _exploreobs_recl _exploreobs_debug ;
22409     +   %local xobs xvars xlen vlen xi vname vlist ;
22410     +   %local _exp_source _exp_notes ;
22411     +
22412     +   /*--- USER definitions ---*/
22413     +   %global EM_EXPLOREOBS_MAX EM_EXPLOREOBS_DEFAULT ;
22414     +
22415     +   /*--- variable intializations ---*/
22416     +   %let _exploreobs_max=0 ;
22417     +   %let _exploreobs_def=0 ;
22418     +   %let _exploreobs_recl=0 ;
22419     +   %let xvars= 0 ;
22420     +   %let xlen = 0 ;
22421     +   %let xobs = 0 ;
22422     +
22423     +   /*--- data error checks ---*/
22424     +   %if "&data" eq "" %then %do ;
22425     +            %put NOTE: DATA is not specified. ;
22426     +            %goto term ;
22427     +      %end ;
22428     +
22429     +   %let dsid=%sysfunc(open(&data)) ;
22430     +   %if not &dsid %then %do ;
22431     +            %put NOTE: DATA &data is not available. ;
22432     +            %goto term ;
22433     +      %end ;
22434     +
22435     +   /*--- if a vars list exists generate a subset ---*/
22436     +   %if &vars ne %then %do ;
22437     +         %let dsid=%sysfunc(close(&dsid)) ;
22438     +         %if &_exploreobs_debug ne 1 %then %do ;
22439     +                  %let _exp_source=%sysfunc(getoption(SOURCE)) ;
22440     +            %let _exp_notes =%sysfunc(getoption(NOTES)) ;
22441     +                  options nosource nonotes ;
22442     +         %end ;
22443     +         data _exploreobs_temp_data ;
22444     +         set &data(obs=0) ;
22445     +          keep &vars ;
22446     +         run;
22447     +         %if &_exploreobs_debug ne 1 %then %do ;
22448     +                  options &_exp_source &_exp_notes ;
22449     +         %end ;
22450     +         %let dsid=%sysfunc(open(_exploreobs_temp_data)) ;
22451     +         %if &dsid eq 0 %then %do ;
22452     +                  %put NOTE: Sample is not available.;
22453     +                  %goto term ;
22454     +            %end ;
22455     +      %end ;
22456     +
22457     +   /*--- get var attributes ---*/
22458     +   %let xvars=%sysfunc(attrn(&dsid,nvars)) ;
22459     +   %let xobs= %sysfunc(attrn(&dsid,nobs )) ;
22460     +   %let xlen= %sysfunc(attrn(&dsid,lrecl)) ;
22461     +   %let dsid= %sysfunc(close(&dsid)) ;
22462     +
22463     +   /*--- set default and max obs ---*/
22464     +   %let _exploreobs_recl=%eval(&xlen) ;
22465     +   %if &_exploreobs_recl eq 0 %then %do ;
22466     +             %let _exploreobs_max= 0 ;
22467     +             %let _exploreobs_def= 0 ;
22468     +             %goto term ;
22469     +
22470     +   %end ;
22471     +   %else
22472     +   %if &_exploreobs_recl le 32 %then %do ;
22473     +             %let _exploreobs_max=100000 ;
22474     +             %let _exploreobs_def= 10000 ;
22475     +   %end ;
22476     +   %else
22477     +   %if &_exploreobs_recl le 128 %then %do ;
22478     +             %let _exploreobs_max=60000 ;
22479     +             %let _exploreobs_def= 6000 ;
22480     +   %end ;
22481     +   %else
22482     +   %if &_exploreobs_recl lt 1000 %then %do ;
22483     +             %let _exploreobs_max=20000 ;
22484     +             %let _exploreobs_def= 2000 ;
22485     +   %end ;
22486     +   %else
22487     +   %if &_exploreobs_recl lt 5000 %then %do ;
22488     +             %let _exploreobs_max= 10000 ;
22489     +             %let _exploreobs_def=  1000 ;
22490     +   %end ;
22491     +   %else
22492     +   %if &_exploreobs_recl lt 20000 %then %do ;
22493     +             %let _exploreobs_max= 5000 ;
22494     +             %let _exploreobs_def=  500 ;
22495     +   %end ;
22496     +   %else %do ;
22497     +             %let _exploreobs_max= 1000 ;
22498     +             %let _exploreobs_def=  200 ;
22499     +   %end ;
22500     +
22501     +   /*--- Users options ---*/
22502     +   %if &EM_EXPLOREOBS_MAX ne %then %do ;
22503     +            %let _exploreobs_max= %eval(&EM_EXPLOREOBS_MAX) ;
22504     +   %end;
22505     +   %if &EM_EXPLOREOBS_DEFAULT ne %then %do ;
22506     +            %let _exploreobs_def= %eval(&EM_EXPLOREOBS_DEFAULT) ;
22507     +   %end;
22508     +
22509     +    /*--- S0868273 ---*/
22510     +    %if "&NBYTES" ne "" %then %do;
22511     +       %let nbytes_nrows = %eval(&nbytes/ &_exploreobs_recl);
22512     +       %if &EM_EXPLOREOBS_MAX ne %then %do ;
22513     +           %let _exploreobs_max   = %sysfunc(min(&nbytes_nrows , &EM_EXPLOREOBS_MAX));
22514     +       %end;
22515     +
22516     +       %if &EM_EXPLOREOBS_DEFAULT ne %then %do ;
22517     +          %let nbytes_nrows      = %eval(&nbytes_nrows/10);
22518     +          %let _exploreobs_def   = %sysfunc(min(&nbytes_nrows , &EM_EXPLOREOBS_DEFAULT));
22519     +          %if ^&_exploreobs_def %then
22520     +              %let _exploreobs_def = 1;
22521     +
22522     +       %end;
22523     +    %end;
22524     +
22525     +   /*--- Terminate ---*/
22526     +   %term:
22527     +
22528     +   %put NOTE: EXPLOREOBS &data : vars= &xvars : recl= &_exploreobs_recl : max=&_exploreobs_max : def= &_exploreobs_def ;
22529     +%mend ;
22530     +
22531     +
NOTE: %INCLUDE (level 1) ending.
MPRINT(EXPLORESAMPLE):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(EXPLOREOBS):   options nosource nonotes ;
MPRINT(EXPLOREOBS):   data _exploreobs_temp_data ;
MPRINT(EXPLOREOBS):   set EMWS1.FIMPORT_train(obs=0) ;
MPRINT(EXPLOREOBS):   keep age breast breast_quad class deg_malig inv_nodes irradiat menopause node_caps tumor_size ;
MPRINT(EXPLOREOBS):   run;
MPRINT(EXPLOREOBS):   options SOURCE NOTES ;
NOTE: EXPLOREOBS EMWS1.FIMPORT_train : vars= 10 : recl= 72 : max=60000 : def= 6000
MPRINT(EXPLORESAMPLE):   ;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EXPLORESAMPLE):  ;
*------------------------------------------------------------*
* FirstN/Top sample
*------------------------------------------------------------*
MPRINT(EXPLORESAMPLE):   data EMWS1.GrfExpl_SAMPLE_DATA;
MPRINT(EXPLORESAMPLE):   set EMWS1.FIMPORT_train(obs= 6000 Keep=age breast breast_quad class deg_malig inv_nodes irradiat menopause node_caps tumor_size );
MPRINT(EXPLORESAMPLE):   run;

NOTE: View EMWS1.FIMPORT_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      
NOTE: There were 286 observations read from the data set EMWS1.FIMPORT_DATA.
NOTE: There were 286 observations read from the data set EMWS1.FIMPORT_TRAIN.
NOTE: The data set EMWS1.GRFEXPL_SAMPLE_DATA has 286 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

MPRINT(TRAIN):  ;
MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End TRAIN: GrfExpl;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22532      *------------------------------------------------------------*;
22533      * End TRAIN: GrfExpl;
22534      *------------------------------------------------------------*;
22535      

22536      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
22537      * Close any missing semi colons;
MPRINT(EM_DIAGRAM):   * Close any missing semi colons;
22538      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22539      ;
MPRINT(EM_DIAGRAM):   ;
22540      ;
MPRINT(EM_DIAGRAM):   ;
22541      ;
MPRINT(EM_DIAGRAM):   ;
22542      ;
MPRINT(EM_DIAGRAM):   ;
22543      quit;
MPRINT(EM_DIAGRAM):   quit;
22544      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22545      * Close any unbalanced quotes;
MPRINT(EM_DIAGRAM):   * Close any unbalanced quotes;
22546      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
22547      /*; *"; *'; */
22548      ;
MPRINT(EM_DIAGRAM):   ;
22549      run;
MPRINT(EM_DIAGRAM):   run;
22550      quit;
MPRINT(EM_DIAGRAM):   quit;
22551      /* Reset EM Options */
22552      options formchar="|----|+|---+=|-/\<>*";
MPRINT(EM_DIAGRAM):   options formchar="|----|+|---+=|-/\<>*";
22553      options nocenter ls=256 ps=10000;
MPRINT(EM_DIAGRAM):   options nocenter ls=256 ps=10000;
22554      goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):   goptions reset=all device=GIF NODISPLAY;
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;

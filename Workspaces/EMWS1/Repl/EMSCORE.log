MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "August 07, 2022" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "19:13:32" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                August 07, 2022
Time:                19:13:32
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O2KBO4WU "C:\Users\brahm\OneDrive\Desktop\BAN210_Project\Workspaces\EMWS1\Repl\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O2KBO4WU new;
MPRINT(EM_DIAGRAM):   run;
28762      %let EMEXCEPTIONSTRING=;
28763      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
28764      * SCORE: Repl;
MPRINT(EM_DIAGRAM):   * SCORE: Repl;
28765      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
28766      %let EM_ACTION = SCORE;
28767      %let syscc = 0;
28768      filename x CATALOG 'SASHELP.EMUTIL.EM_VARMACRO.SOURCE';
MPRINT(EM_DIAGRAM):     filename x CATALOG 'SASHELP.EMUTIL.EM_VARMACRO.SOURCE';
28769      %inc x;
NOTE: %INCLUDE (level 1) file X is file SASHELP.EMUTIL.EM_VARMACRO.SOURCE.
28771     +%macro em_varMacro(name=emMacro, metadata=, where=, key=NAME, nummacro=, maxvar=-1);
28773     +   filename macFile catalog 'work.emutil.macro.source';
28774     +   %let _METAOBS = 0;
28775     +   %let _maxvar = &maxvar;
28776     +   %if "&_maxvar" eq "" %then %let maxvar = -1;
28778     +   %if (%sysfunc(exist(&metadata))<1 and %sysfunc(exist(&metadata, VIEW))<1)
28779     +                   or (&metadata eq ) %then %do;
28780     +       %put * No metadata data set defined;
28781     +       %goto doend;
28782     +   %end;
28784     +   data _null_;
28785     +      length _STRING_ $80;
28786     +      retain _STRING_ '' maxvar 0;
28787     +      set &metadata end=eof;
28788     +      file macFile;
28789     +      %if %nrbquote(&where) ne %then %do;
28790     +          %let whereClause = where (%nrbquote(&where));
28791     +          %unquote(&whereClause);
28792     +      %end;
28793     +      if _N_=1 then do;
28794     +         string = "%"!!"macro &name;";
28795     +         put string;
28796     +      end;
28797     +      maxvar +1;
28798     +      if (length(_STRING_) + length(trim(&key))+ 4 < 80) then do;
28799     +         _STRING_ = trim(_STRING_)!!' '!!trim(&key);
28800     +         if eof
28801     +            %if  %sysevalf(&_maxvar > 0) %then %do;
28802     +                or maxvar >= &maxvar
28803     +            %end;
28804     +            then do;
28805     +            put _STRING_;
28806     +            string = "%"!!"mend &name;";
28807     +            put string;
28808     +            string = strip(put(_N_, best.));
28809     +            call symput('_METAOBS', string);
28810     +            %if (&nummacro ne ) %then %do;
28811     +                put "%" "global &nummacro;";
28812     +                put "%" "let &nummacro = " string ";";
28813     +            %end;
28814     +            stop;
28815     +         end;
28816     +      end;
28817     +      else do;
28818     +         put _STRING_;
28819     +         _string_ = TRIM(&key);
28820     +         if eof
28821     +            %if  %sysevalf(&_maxvar > 0) %then %do;
28822     +              or maxvar >= &maxvar
28823     +           %end;
28824     +            then do;
28825     +            put _STRING_;
28826     +            string = "%"!!"mend &name;";
28827     +            put string;
28828     +        end;
28829     +      end;
28830     +      if eof
28831     +         %if  %sysevalf(&_maxvar > 0) %then %do;
28832     +             or maxvar >= &maxvar
28833     +         %end;
28834     +         then do;
28835     +         string = strip(put(_N_, best.));
28836     +         call symput('_METAOBS', string);
28837     +         %if (&nummacro ne ) %then %do;
28838     +             put "%" "global &nummacro;";
28839     +             put "%" "let &nummacro = " string ";";
28840     +         %end;
28841     +         stop;
28842     +      end;
28843     +   run;
28845     +   %doend:
28846     +   %if ^&_METAOBS %then %do;
28847     +       data _null_;
28848     +          file macFile;
28849     +          put "%" "macro &name;";
28850     +          put "%" "mend &name;";
28851     +          %if (&nummacro ne ) %then %do;
28852     +              put "%" "global &nummacro;";
28853     +              put "%" "let &nummacro = 0;";
28854     +          %end;
28855     +      run;
28856     +   %end;
28857     +   %inc macFile;
28858     +   filename macFile;
28859     +%mend em_varMacro;
NOTE: %INCLUDE (level 1) ending.
28860      filename X;
MPRINT(EM_DIAGRAM):   filename X;
NOTE: Fileref X has been deassigned.
28861       %macro main;
28862      
28863         filename temp catalog 'sashelp.emmdfy.Replace_macros.source';
28864         %include temp;
28865         filename temp;
28866      
28867         %if %upcase(&EM_ACTION) = CREATE %then %do;
28868      
28869             filename temp catalog 'sashelp.emmdfy.Replace_create.source';
28870             %include temp;
28871             filename temp;
28872             %create;
28873         %end;
28874         %else
28875         %if %upcase(&EM_ACTION) = TRAIN %then %do;
28876      
28877             filename temp catalog 'sashelp.emmdfy.Replace_train.source';
28878             %include temp;
28879             filename temp;
28880             %train;
28881         %end;
28882         %else
28883         %if %upcase(&EM_ACTION) = SCORE %then %do;
28884      
28885             filename temp catalog 'sashelp.emmdfy.Replace_score.source';
28886             %include temp;
28887             filename temp;
28888             %score;
28889         %end;
28890         %if %upcase(&EM_ACTION) = REPORT %then %do;
28891      
28892             filename temp catalog 'sashelp.emmdfy.Replace_report.source';
28893             %include temp;
28894             filename temp;
28895             %report;
28896         %end;
28897         %if %upcase(&EM_ACTION) = OPENOUTCLASSTABLE %then %do;
28898             filename temp catalog 'sashelp.emmdfy.replace_makeoutclass.source';
28899             %include temp;
28900             filename temp;
28901             %em_replace_openoutclass;
28902         %end;
28903         %if %upcase(&EM_ACTION) = CLOSEOUTCLASSTABLE %then %do;
28904             filename temp catalog 'sashelp.emmdfy.replace_makeoutclass.source';
28905             %include temp;
28906             filename temp;
28907             %em_replace_closeoutclass;
28908         %end;
28909      %mend main;
28910      
28911      %main;
MPRINT(MAIN):   filename temp catalog 'sashelp.emmdfy.Replace_macros.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.REPLACE_MACROS.SOURCE.
28912     +%macro SetProperties;
28913     +   %em_checkmacro(name=EM_PROPERTY_UNKNOWNLEVEL,    global=Y, value=MODE);
28914     +   %em_checkmacro(name=EM_PROPERTY_CALCMETHOD,      global=Y, value=NONE);
28915     +   %em_checkmacro(name=EM_PROPERTY_PERCENTSCUTOFF,  global=Y, value=0.5);
28916     +   %em_checkmacro(name=EM_PROPERTY_SPACINGSCUTOFF,  global=Y, value=9);
28917     +   %em_checkMacro(name=EM_PROPERTY_MADSCUTOFF,      global=Y, value=9);
28918     +   %em_checkMacro(name=EM_PROPERTY_STDDEVCUTOFF,    global=Y, value=3);
28919     +   %em_checkmacro(name=EM_PROPERTY_REPLACEMETHOD,   global=Y, value=COMPUTED);
28920     +   %em_checkmacro(name=EM_PROPERTY_HIDEVARIABLE,    global=Y, value=N);
28921     +   %em_checkmacro(name=EM_PROPERTY_INTERVALMETHOD,  global=Y, value=NONE);
28922     +   %em_checkmacro(name=EM_PROPERTY_REPORTCOUNT,     global=Y, value=Y);
28923     +
28924     +%mend SetProperties;
28925     +
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(MAIN):   filename temp catalog 'sashelp.emmdfy.Replace_score.source';
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMDFY.REPLACE_SCORE.SOURCE.
28926     +%macro makeLevelData(data=, outclass=);
28927     +   data REPLACE_MODE;
28928     +      set &OUTCLASS;
28929     +      by NAME;
28930     +      if first.name then do;
28931     +         MODEC    = CRAW;
28932     +         MODEN    = NRAW;
28933     +         NORMMODE = LEVEL;
28934     +         output;
28935     +      end;
28936     +      keep NAME MODEC MODEN NORMMODE UNKWOWNDEFAULT;
28937     +   run;
28938     +
28939     +   proc sort data=&EM_DATA_VARIABLESET;
28940     +      by NAME;
28941     +   run;
28942     +   data &data;
28943     +      length UNKWOWNDEFAULT $8;
28944     +      merge &OUTCLASS(in=_a) REPLACE_MODE &EM_DATA_VARIABLESET(keep=LABEL LENGTH NAME ROLE LEVEL LABEL FORMAT RENAME=(LEVEL=MLEVEL) where=(MLEVEL ne 'INTERVAL'));
28945     +      by NAME;
28946     +      if LEVEL = '_UNKNOWN_' then UNKWOWNDEFAULT = "&EM_PROPERTY_UNKNOWNLEVEL";
28947     +      if _a then output;
28948     +   run;
28949     +   proc datasets lib=work nolist;
28950     +      delete REPLACE_MODE;
28951     +   run;
28952     +   quit;
28953     +%mend makeLevelData;
28954     +
28955     +%macro makeNewNames(limitDs=, classValue=, className=);
28956     +     %let varname = invarname;
28957     +     %let newname = outname;
28958     +     proc sort data=&classValue out=&varname nodupkey;
28959     +        by NAME;
28960     +        where REPLACE_VALUE ^in('', '_DEFAULT_') or (REPLACE_VALUE eq '_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE');
28961     +     run;
28962     +     %let classnum=0;
28963     +     %let dsid = %sysfunc(open(&varname));
28964     +     %if &dsid>0 %then %do;
28965     +         %let classnum = %sysfunc(attrn(&dsid, NOBS));
28966     +         %let dsid = %sysfunc(close(&dsid));
28967     +     %end;
28968     +
28969     +     %let varnum=0;
28970     +     %let dsid = %sysfunc(open(&LimitDs));
28971     +     %if &dsid>0 %then %do;
28972     +         %let varnum = %sysfunc(attrn(&dsid, NOBS));
28973     +         %let dsid = %sysfunc(close(&dsid));
28974     +     %end;
28975     +
28976     +     %if ^&classnum and ^&varnum and ^%sysfunc(exist(&classname)) %then %do;
28977     +         %let lib    = %scan(&classname, 1, .);
28978     +         %let member = %scan(&classname, 2, .);
28979     +          proc datasets lib=&lib nolist;
28980     +             delete &member;
28981     +          run;
28982     +          quit;
28983     +         %goto doendmn;
28984     +     %end;
28985     +
28986     +     data &varname;
28987     +        set
28988     +        %if &classnum %then %do;
28989     +            &varname(keep=NAME)
28990     +        %end;
28991     +        %if &varnum %then %do;
28992     +            &limitDs(keep=NAME)
28993     +        %end;
28994     +        ;
28995     +     run;
28996     +     proc dmdb data=&varname outtable=&newname(rename=(REP=NEWNAME)) nameserver;
28997     +        names NAME;
28998     +        prefix REP_;
28999     +     run;
29000     +     proc sort data=&newname;
29001     +        by NAME;
29002     +     run;
29003     +
29004     +     /* Merge the new names with the limits data set */
29005     +     %if %sysfunc(exist(&limitDs)) %then %do;
29006     +         data &limitDs;
29007     +            merge &newname &limitDs(in=a);
29008     +            by NAME;
29009     +            if a then output;
29010     +         run;
29011     +
29012     +         %let lib    = %scan(&limitDs, 1, .);
29013     +         %let member = %scan(&limitDs, 2, .);
29014     +          proc datasets lib=&lib nolist;
29015     +             modify &member;
29016     +             label NAME    =     "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))"
29017     +              NEWNAME =     "%sysfunc(sasmsg(sashelp.dmine, rpt_replacevar_vlabel, NOQUOTE))"
29018     +              CALCMETHOD =  "%sysfunc(sasmsg(sashelp.dmine, rpt_calcmethod_vlabel , NOQUOTE))"
29019     +              REPLACEMETHODUSED =  "%sysfunc(sasmsg(sashelp.dmine, rpt_replacemethodused_vlabel, NOQUOTE))"
29020     +              LOWERLIMIT        =  "%sysfunc(sasmsg(sashelp.dmine, meta_lowerLimit_vlabel, NOQUOTE))"
29021     +              REPLACEMINUSED    =  "%sysfunc(sasmsg(sashelp.dmine, rpt_replacemin_vlabel, NOQUOTE))"
29022     +              UPPERLIMIT        =  "%sysfunc(sasmsg(sashelp.dmine, meta_upperLimit_vlabel, NOQUOTE))"
29023     +              REPLACEDMAXUSED   =  "%sysfunc(sasmsg(sashelp.dmine, rpt_replacemax_vlabel, NOQUOTE))"
29024     +              REPLACEMETHOD     =  "%sysfunc(sasmsg(sashelp.dmine, rpt_replacemethod_vlabel, NOQUOTE))"
29025     +              REPLACEMIN =  "%sysfunc(sasmsg(sashelp.dmine, rpt_userreplacemin_vlabel, NOQUOTE))"
29026     +              REPLACEMAX =  "%sysfunc(sasmsg(sashelp.dmine, rpt_userreplacemax_vlabel, NOQUOTE))"
29027     +              ROLE       =  "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))"
29028     +              LEVEL      =  "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))"
29029     +              LABEL      =  "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
29030     +         run;
29031     +         quit;
29032     +     %end;
29033     +
29034     +     /* Merge the new names with the Class Value data set */
29035     +     %if %sysfunc(exist(&classValue)) %then %do;
29036     +         data length;
29037     +            retain newlen 0;
29038     +            set &classValue;
29039     +            by NAME;
29040     +            if type eq 'C' then do;
29041     +               if first.name then do;
29042     +                  if REPLACE_VALUE ^in('_DEFAULT_', '_MODE_', '_MISSING_') then
29043     +                     newlen = max(length, length(strip(replace_value)));
29044     +                  else
29045     +                     newlen = length;
29046     +               end;
29047     +               else do;
29048     +                  if REPLACE_VALUE ^in('_DEFAULT_', '_MODE_', '_MISSING_') then
29049     +                     newlen = max(newlen, length(strip(replace_value)));
29050     +               end;
29051     +            end;
29052     +            else newlen = length;
29053     +            len=length;
29054     +            if last.name then output;
29055     +            keep name len newlen role format type label mlevel;
29056     +         run;
29057     +         data &className;
29058     +            length rformat formatroot $32;
29059     +            merge &newname(in=a) length(in=b);
29060     +            by NAME;
29061     +            length=len;
29062     +            if newlen > len then do;
29063     +               if type eq 'C' and format ne '' then do;
29064     +                  rformat = strip(reverse(format));
29065     +                  do while(indexc(rformat, '.0123456789')=1);
29066     +                     rformat = substr(rformat, 2);
29067     +                  end;
29068     +                  formatroot= upcase(reverse(rformat));
29069     +                  if strip(formatRoot) in('$','$F','$UPCASE','$CHAR') then do;
29070     +                     format = strip(formatroot)!!strip(put(newlen, best.))!!'.';
29071     +                  end;
29072     +               end;
29073     +               length = newlen;
29074     +            end;
29075     +            if a and b then output;
29076     +            KEEP name newname role format mlevel type label length;
29077     +         run;
29078     +     %end;
29079     +
29080     +     proc datasets lib=work nolist;
29081     +        delete length &varname &newname;
29082     +     run;
29083     +     quit;
29084     +
29085     +     %doendmn:
29086     +
29087     +%mend makeNewNames;
29088     +
29089     +%macro makeVarDeltaCode(LimitDs=);
29090     +    %if ^%sysfunc(exist(&LimitDs)) %then %goto doendd;
29091     +
29092     +    filename _F1 "&EM_FILE_CDELTA_TRAIN";
29093     +     data _null_;
29094     +        set &LimitDs end=eof;
29095     +        length string $400;
29096     +        file _F1;
29097     +        %if &EM_PROPERTY_HIDEVARIABLE eq Y %then %do;
29098     +            string = 'if NAME="'!!strip(NAME)!!'" then delete;';  put string;
29099     +        %end;
29100     +        %else %do;
29101     +            string = 'if NAME="'!!strip(NAME)!!'" then do;';        put string;
29102     +            string = '   ROLE="REJECTED";';                         put string;
29103     +            string = '   COMMENT= "Replaced by '!!"&EM_NODEID"!!'";'; put string;
29104     +            string = 'end;';                                        put string;
29105     +        %end;
29106     +        put 'else';
29107     +        string = '   if NAME="'!!strip(NEWNAME)!!'" then do;'; put string;
29108     +        string = '      ROLE="'!!strip(ROLE)!!'";';            put string;
29109     +        string = '      LEVEL="'!!strip(LEVEL)!!'";';          put string;
29110     +        put      'end;';
29111     +        if ^eof then
29112     +           put 'else';
29113     +   run;
29114     +   filename _F1;
29115     +
29116     +    %doendd:
29117     +%mend makeVarDeltaCode;
29118     +
29119     +%macro makeVarScoreCode(LimitDs=, File=);
29120     +    %if ^%sysfunc(exist(&LimitDs)) or "&File" eq "" %then %goto doendm;
29121     +
29122     +     filename sFile "&file";
29123     +     data &LimitDs;
29124     +        set &LimitDs end=eof;
29125     +        length REPLACEMETHODUSED $8 string $400;
29126     +        file sFile;
29127     +        put'* ;';
29128     +        put'* Variable: ' name ';';
29129     +        put '* ;';
29130     +        if strip(label) = '' then label = name;
29131     +        string= 'Label '!!strip(newname)!!"='Replacement: "!!strip(tranwrd(label, "'","''"))!!"';";
29132     +        put string;
29133     +        put newname '=' name ';';
29134     +        REPLACEMETHODUSED = REPLACEMETHOD;
29135     +        if REPLACEMETHOD = 'DEFAULT' then
29136     +            %if "&EM_PROPERTY_REPLACEMETHOD" = "COMPUTED" %then %do;
29137     +                REPLACEMETHODUSED = 'COMPUTED';
29138     +            %end;
29139     +            %else
29140     +            %if "&EM_PROPERTY_REPLACEMETHOD" = "MISSING" %then %do;
29141     +                REPLACEMETHODUSED = 'MISSING';
29142     +            %end;
29143     +            %else %do;
29144     +                REPLACEMETHODUSED = 'MANUAL';
29145     +            %end;
29146     +
29147     +        put 'if ' name ' eq . then ' newname  '= . ;';
29148     +        if LowerLimit ne . then do;
29149     +           select(REPLACEMETHODUSED);
29150     +              when('COMPUTED') REPLACEMINUSED = lowerLimit;
29151     +              when('MISSING')  REPLACEMINUSED = .;
29152     +              when('MANUAL')   REPLACEMINUSED = replaceMin;
29153     +              otherwise;
29154     +           end;
29155     +           put 'else';
29156     +           put 'if ' name '<' lowerLimit ' then ' newname ' = ' REPLACEMINUSED ';';
29157     +        end;
29158     +        if upperLimit ne . then do;
29159     +           select(REPLACEMETHODUSED);
29160     +              when('COMPUTED') REPLACEMAXUSED = upperLimit;
29161     +              when('MISSING')  REPLACEMAXUSED = .;
29162     +              when('MANUAL')   REPLACEMAXUSED = replaceMax;
29163     +              otherwise;
29164     +           end;
29165     +           put 'else';
29166     +           put 'if ' name '>' upperLimit  ' then ' newname ' = ' REPLACEMAXUSED ';';
29167     +        end;
29168     +        drop string;
29169     +    run;
29170     +    filename sfile;
29171     +    %doendm:
29172     +%mend makeVarScoreCode;
29173     +
29174     +
29175     +%macro makeUnknownOptCode(Folder=, Data=);
29176     +    %if ^%sysfunc(exist(&Data)) %then %goto doendu;
29177     +
29178     +    %let dsid = %sysfunc(open(&data));
29179     +    %let nameNum    = %sysfunc(varnum(&dsid, Name));
29180     +    %let newnameNum = %sysfunc(varnum(&dsid, NewName));
29181     +
29182     +    %let oldname=;
29183     +    %do %while(^%sysfunc(fetch(&dsid)));
29184     +        %let name    = %sysfunc(getvarc(&dsid, &nameNum));
29185     +        %let newName = %sysfunc(getvarc(&dsid, &newnameNum));
29186     +
29187     +        %if &name ne &oldname %then %do;
29188     +            filename _F1 "&Folder&em_dsep.&newname..sas" MOD;
29189     +            data _null_;
29190     +               set &Data end=eof;
29191     +               where NAME ="&name";
29192     +               length string $400;
29193     +               length newlevel replaceLevel $400;
29194     +               retain string missingFlag;
29195     +               file _F1;
29196     +               if _N_=1 then do;
29197     +                  put '*;';
29198     +                  if format ne '' then do;
29199     +                     string = '_UFORMAT200 = '!!'strip(put('!!strip(NAME)!!','!!strip(format)!!'));';
29200     +                     put string;
29201     +                     put 'if ^(_UFORMAT200 in(';
29202     +                  end;
29203     +                  else do;
29204     +                     if type eq 'C' then do;
29205     +                        string = '_UFORMAT200 = '!!'strip('!!strip(NAME)!!');';
29206     +                        put string;
29207     +                        put 'if ^(_UFORMAT200 in(';
29208     +                     end;
29209     +                     else
29210     +                        put 'if (';
29211     +                  end;
29212     +                  string='';
29213     +                  missingFlag = 0;
29214     +               end;
29215     +
29216     +               if ^eof and LEVEL ne '_UNKNOWN_' then do;
29217     +                  if format ne '' or type eq 'C' then do;
29218     +                     newlevel = tranwrd(strip(LEVEL),'"','""');
29219     +                     if strip(newLevel) = '' then missingFlag = 1;
29220     +                     if length(strip(newlevel))+length(strip(string))+4<80 then do;
29221     +                        if string='' then
29222     +                           string = strip(string)!!' "'!!strip(newlevel)!!'" ';
29223     +                        else
29224     +                           string = strip(string)!!', "'!!strip(newlevel)!!'" ';
29225     +                     end;
29226     +                     else do;
29227     +                        put string;
29228     +                        string =', "'!!tranwrd(strip(LEVEL),'"','""')!!'"';
29229     +                     end;
29230     +                  end;
29231     +                  else do;
29232     +                     string = strip(name)!!' ne '!!strip(level)!!' and ';
29233     +                     put string;
29234     +                  end;
29235     +                  newlevel = ' ';
29236     +               end;
29237     +               else do;
29238     +                  if format ne '' or type eq 'C' then do;
29239     +                     put string;
29240     +                     if ^missingFlag then
29241     +                        string = ', "" )) then ';
29242     +                     else
29243     +                        string = ')) then ';
29244     +                  end;
29245     +                  else
29246     +                     string = strip(name)!!' ne . ) then ';
29247     +                  put string;
29248     +
29249     +                 select(REPLACE_VALUE);
29250     +                 when('_MODE_') do;
29251     +                    if type eq 'C' then
29252     +                       replaceLevel = NORMMODE;
29253     +                    else
29254     +                       replaceLevel =strip(put(MODEN,BEST.));
29255     +                 end;
29256     +                 when('_MISSING_') do;
29257     +                    if type eq 'C' then replaceLevel = '';
29258     +                    else replaceLevel = '.';
29259     +                 end;
29260     +                 when('_DEFAULT_') do;
29261     +                    %if &EM_PROPERTY_UNKNOWNLEVEL = MODE %then %do;
29262     +                        if type eq 'C' then
29263     +                           replaceLevel = NORMMODE;
29264     +                        else
29265     +                           replaceLevel = strip(put(MODEN,BEST.));
29266     +                    %end;
29267     +                    %else %do;
29268     +                        if type eq 'C' then replaceLevel = '';
29269     +                         else replaceLevel = '.';
29270     +                    %end;
29271     +                  end;
29272     +                  when('') do;
29273     +                  end;
29274     +                  otherwise do;
29275     +                     if type eq 'C' then replaceLevel= replace_Value;
29276     +                     else replaceLevel = replace_Value;
29277     +                  end;
29278     +               end;
29279     +               if type eq 'C' then do;
29280     +                  string = strip(newname)!!'= "'!!tranwrd(strip(replaceLevel),'"','""')!!'";';
29281     +               end;
29282     +               else do;
29283     +                  string = strip(newname)!!'= '!!strip(replaceLevel)!!';';
29284     +               end;
29285     +               put string;
29286     +            end;
29287     +
29288     +           run;
29289     +           filename _F1;
29290     +           proc datasets lib=work nolist;
29291     +              delete _temp;
29292     +           run;
29293     +           quit;
29294     +
29295     +           %let oldname = &name;
29296     +        %end;
29297     +    %end;
29298     +    %let dsid = %sysfunc(close(&dsid));
29299     +
29300     +    %doendu:
29301     +%mend makeUnknownOptCode;
29302     +
29303     +%macro makeUnknownCode(ScoreFile=, Data=);
29304     +   %if ^%sysfunc(exist(&Data)) %then %goto doendm;
29305     +
29306     +   filename _F1 "&ScoreFile" MOD;
29307     +   data _null_;
29308     +      set &Data;
29309     +      length string $400;
29310     +      length newlevel replaceLevel $200;
29311     +      retain string missingFlag;
29312     +      file _F1;
29313     +      by NAME;
29314     +
29315     +      if _N_=1 then do;
29316     +         put '* ;';
29317     +         put '* Replace Unknown Class Levels ;';
29318     +         put '* ;';
29319     +         put 'length _UFORMAT200 $200;';
29320     +         put 'drop   _UFORMAT200;';
29321     +         put '_UFORMAT200 = " ";';
29322     +      end;
29323     +
29324     +      if first.name then do;
29325     +         missingFlag = 0;
29326     +         put '*;';
29327     +
29328     +         if format ne '' then do;
29329     +            call symput('UFormatFlag', '1');
29330     +            string = '_UFORMAT200 = '!!'strip(put('!!strip(NAME)!!','!!strip(format)!!'));';
29331     +            put string;
29332     +            put 'if ^(_UFORMAT200 in(';
29333     +         end;
29334     +         else do;
29335     +            if type eq 'C' then do;
29336     +               call symput('UFormatFlag', '1');
29337     +               string = '_UFORMAT200 = '!!'strip('!!strip(NAME)!!');';
29338     +               put string;
29339     +               put 'if ^(_UFORMAT200 in(';
29340     +            end;
29341     +            else
29342     +               put 'if (';
29343     +         end;
29344     +         string='';
29345     +      end;
29346     +
29347     +      if ^last.name and LEVEL ne '_UNKNOWN_' then do;
29348     +        if format ne '' or type eq 'C' then do;
29349     +           newlevel = tranwrd(strip(LEVEL),'"','""');
29350     +           if strip(newLevel) = '' then missingFlag = 1;
29351     +           if length(strip(newlevel))+length(strip(string))+4<80 then do;
29352     +              if string='' then
29353     +                 string = strip(string)!!' "'!!strip(newlevel)!!'" ';
29354     +              else
29355     +                 string = strip(string)!!', "'!!strip(newlevel)!!'" ';
29356     +           end;
29357     +           else do;
29358     +              put string;
29359     +              string =', "'!!tranwrd(strip(LEVEL),'"','""')!!'"';
29360     +           end;
29361     +        end;
29362     +        else do;
29363     +           string = strip(name)!!' ne '!!strip(level)!!' and ';
29364     +           put string;
29365     +        end;
29366     +        newlevel = ' ';
29367     +     end;
29368     +     else do;
29369     +        if format ne '' or type eq 'C' then do;
29370     +           put string;
29371     +           if ^missingFlag then
29372     +              string = ', "" )) then ';
29373     +           else
29374     +              string = ')) then ';
29375     +        end;
29376     +        else
29377     +           string = strip(name)!!' ne . ) then ';
29378     +        put string;
29379     +
29380     +        select(REPLACE_VALUE);
29381     +           when('_MODE_') do;
29382     +              if type eq 'C' then
29383     +                 replaceLevel = NORMMODE;
29384     +              else
29385     +                 replaceLevel =strip(put(MODEN,BEST.));
29386     +           end;
29387     +           when('_MISSING_') do;
29388     +              if type eq 'C' then replaceLevel = '';
29389     +              else replaceLevel = '.';
29390     +           end;
29391     +           when('_DEFAULT_') do;
29392     +              %if &EM_PROPERTY_UNKNOWNLEVEL = MODE %then %do;
29393     +                  if type eq 'C' then
29394     +                     replaceLevel = NORMMODE;
29395     +                  else
29396     +                     replaceLevel = strip(put(MODEN,BEST.));
29397     +              %end;
29398     +              %else %do;
29399     +                  if type eq 'C' then replaceLevel = '';
29400     +                  else replaceLevel = '.';
29401     +              %end;
29402     +           end;
29403     +           when('') do;
29404     +           end;
29405     +           otherwise do;
29406     +               if type eq 'C' then replaceLevel= replace_Value;
29407     +               else replaceLevel = replace_Value;
29408     +           end;
29409     +        end;
29410     +        if type eq 'C' then do;
29411     +           string = strip(newname)!!'= "'!!tranwrd(strip(replaceLevel),'"','""')!!'";';
29412     +        end;
29413     +        else do;
29414     +           string = strip(newname)!!'= '!!strip(replaceLevel)!!';';
29415     +        end;
29416     +        put string;
29417     +     end;
29418     +
29419     +     run;
29420     +     filename _F1;
29421     +    %doendm:
29422     +%mend makeUnknownCode;
29423     +
29424     +%macro makeReplaceCode(ScoreFile=, Data=);
29425     +   filename _F1 "&ScoreFile"  MOD;
29426     +   data _null_;
29427     +      length string $400;
29428     +      set &data end=eof;
29429     +      file _F1;
29430     +      by NAME;
29431     +      if _N_=1 then do;
29432     +         put '   ';
29433     +         put '* ;';
29434     +         put '* Replace Specific Class Levels ;';
29435     +         put '* ;';
29436     +         put 'length _UFormat200 $200;';
29437     +         put 'drop   _UFORMAT200;';
29438     +         put '_UFORMAT200 = " ";';
29439     +      end;
29440     +      if first.name then do;
29441     +         put '* ;';
29442     +         string = '* Variable: '!!strip(NAME)!!';';
29443     +         put string;
29444     +         put '* ;';
29445     +         if format ne '' then do;
29446     +            call symput('UFormatFlag', '1');
29447     +            string = "_UFORMAT200 = strip("; put string;
29448     +            string ='put('!!strip(NAME)!!','!!strip(format)!!'));';
29449     +            put string;
29450     +         end;
29451     +         else
29452     +           if type eq 'C' then do;
29453     +              call symput('UFormatFlag', '1');
29454     +              string = "_UFORMAT200 = strip("!!strip(NAME)!!');';
29455     +              put string;
29456     +           end;
29457     +      end;
29458     +      if ^first.name then
29459     +         put 'else';
29460     +      if format ne '' then do;
29461     +         string = tranwrd(strip(LEVEL),'"','""');
29462     +         string =' if _UFORMAT200 =  "'!!strip(string)!!'" then ';
29463     +         put string;
29464     +      end;
29465     +      else do;
29466     +         if type eq 'N' then do;
29467     +            string = 'if '!!strip(name)!!' = '!!strip(put(nraw, BEST.))!!' then ';
29468     +            put string;
29469     +         end;
29470     +         else do;
29471     +            string = tranwrd(strip(craw),'"','""');
29472     +            string = ' if _UFORMAT200 =  "'!!strip(string)!!'" then ';
29473     +            put string;
29474     +         end;
29475     +      end;
29476     +      string = strip(newname)!!'=';
29477     +      if type eq 'C' then do;
29478     +         if upcase(replace_value) eq '_MISSING_' or
29479     +            (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT)= 'MISSING')) then replace_Value ='';
29480     +         else
29481     +           if upcase(replace_value) eq '_MODE_' or
29482     +            (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT)= 'MODE'))
29483     +            then replace_Value =modec;
29484     +           string = strip(string)!!'"'!!tranwrd(strip(replace_Value),'"','""')!!'";';
29485     +      end;
29486     +      else do;
29487     +         if upcase(replace_value) eq '_MISSING_' or
29488     +            (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT) = 'MISSING')) then replace_Value ='.';
29489     +         else
29490     +           if upcase(replace_value) eq '_MODE_' or
29491     +            (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT) = 'MODE')) then
29492     +                  replace_Value =strip(put(moden, BEST.));
29493     +
29494     +         string = strip(string)!!''!!strip(replace_value)!!';';
29495     +      end;
29496     +      put string;
29497     +    run;
29498     +    filename _F1;
29499     +
29500     +%mend makeReplaceCode;
29501     +
29502     +%macro makeReplaceOptCode(Folder=, Data=);
29503     +    %if ^%sysfunc(exist(&Data)) %then %goto doendr;
29504     +
29505     +    %let dsid = %sysfunc(open(&data));
29506     +    %let nameNum    = %sysfunc(varnum(&dsid, Name));
29507     +    %let newnameNum = %sysfunc(varnum(&dsid, NewName));
29508     +
29509     +    %let oldname=;
29510     +    %do %while(^%sysfunc(fetch(&dsid)));
29511     +        %let name    = %sysfunc(getvarc(&dsid, &nameNum));
29512     +        %let newName = %sysfunc(getvarc(&dsid, &newnameNum));
29513     +
29514     +        %if &name ne &oldname %then %do;
29515     +            filename _F1 "&Folder&em_dsep.&newname..sas" MOD;
29516     +            data _null_;
29517     +               length string $400;
29518     +               set &Data end=eof;
29519     +               by NAME;
29520     +               where NAME ="&name";
29521     +               file _F1;
29522     +               if _N_=1 then do;
29523     +                  put '* ;';
29524     +                  string = '* Variable: '!!strip(NAME)!!';';
29525     +                  put string;
29526     +                  put '* ;';
29527     +                  if format ne '' then do;
29528     +                     string = "_UFORMAT200 = strip("; put string;
29529     +                     string ='put('!!strip(NAME)!!','!!strip(format)!!'));';
29530     +                     put string;
29531     +                  end;
29532     +                  else
29533     +                     if type eq 'C' then do;
29534     +                        call symput('UFormatFlag', '1');
29535     +                        string = "_UFORMAT200 = strip("!!strip(NAME)!!');';
29536     +                        put string;
29537     +                    end;
29538     +               end;
29539     +               if ^first.name then
29540     +                  put 'else';
29541     +               if format ne '' then do;
29542     +                  string = tranwrd(strip(LEVEL),'"','""');
29543     +                  string =' if _UFORMAT200 =  "'!!strip(string)!!'" then ';
29544     +                  put string;
29545     +               end;
29546     +               else do;
29547     +                  if type eq 'N' then do;
29548     +                     string = 'if '!!strip(name)!!' = '!!strip(put(nraw, BEST.))!!' then ';
29549     +                     put string;
29550     +                  end;
29551     +                  else do;
29552     +                     string = tranwrd(strip(craw),'"','""');
29553     +                     string = ' if _UFORMAT200 =  "'!!strip(string)!!'" then ';
29554     +                     put string;
29555     +                  end;
29556     +               end;
29557     +               string = strip(newname)!!'=';
29558     +               if type eq 'C' then do;
29559     +                  if upcase(replace_value) eq '_MISSING_' or
29560     +                     (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT)= 'MISSING')) then replace_Value ='';
29561     +                  else
29562     +                     if upcase(replace_value) eq '_MODE_' or
29563     +                       (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT)= 'MODE'))
29564     +                       then replace_Value =modec;
29565     +                          string = strip(string)!!'"'!!tranwrd(strip(replace_Value),'"','""')!!'";';
29566     +               end;
29567     +              else do;
29568     +                 if upcase(replace_value) eq '_MISSING_' or
29569     +                    (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT) = 'MISSING')) then replace_Value ='.';
29570     +                 else
29571     +                    if upcase(replace_value) eq '_MODE_' or
29572     +                       (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT) = 'MODE')) then
29573     +                        replace_Value =strip(put(moden, BEST.));
29574     +
29575     +                 string = strip(string)!!''!!strip(replace_value)!!';';
29576     +              end;
29577     +             put string;
29578     +          run;
29579     +          filename _F1;
29580     +
29581     +           %let oldname = &name;
29582     +        %end;
29583     +    %end;
29584     +    %let dsid = %sysfunc(close(&dsid));
29585     +
29586     +    %doendr:
29587     +
29588     +%mend makeReplaceOptCode;
29589     +
29590     +
29591     +%macro makeNewVarCode(ScoreFile=, Data=);
29592     +   filename _F1 "&ScoreFile"  MOD;
29593     +   data _null_;
29594     +     length string $400;
29595     +      set &data end=eof;
29596     +      file _F1;
29597     +      if _N_=1 then do;
29598     +         put '   ';
29599     +         put '* ;';
29600     +         put '* Defining New Variables;';
29601     +         put '* ;';
29602     +      end;
29603     +      if type eq 'C' then do;
29604     +         string = 'Length '!!strip(newname)!!' $'!!strip(put(length,BEST12.))!!';';
29605     +         put string;
29606     +      end;
29607     +      if strip(label) = '' then label = name;
29608     +      string= 'Label '!!strip(newname)!!"='Replacement: "!!strip(tranwrd(label, "'","''"))!!"';";
29609     +      put string;
29610     +
29611     +      if format ne '' then do;
29612     +         string ='format '!!strip(newname)!!' '!!strip(format)!!';';
29613     +         put string;
29614     +      end;
29615     +      string = strip(newname)!!'= '!!strip(NAME)!!';';
29616     +      put string;
29617     +   run;
29618     +%mend makeNewVarCode;
29619     +
29620     +%macro makeNewVarOptCode(Folder=, Data=);
29621     +    %if ^%sysfunc(exist(&data)) or "&Folder" eq "" %then %goto doendo;
29622     +    data _temp_;set &data;run;
29623     +    %let dsid = %sysfunc(open(_temp_));
29624     +    %let nobs  = %sysfunc(attrn(&dsid, NLOBS));
29625     +    %do %while(^%sysfunc(fetch(&dsid)));
29626     +        %let newNum     = %sysfunc(varnum(&dsid, NewName));
29627     +        %let newname = %sysfunc(getvarc(&dsid, &newNum));
29628     +
29629     +        filename _F1 "&Folder.&em_dsep.&newname..sas";
29630     +        data _null_;
29631     +           length string $400;
29632     +           set &data;
29633     +           where NEWNAME="&newname";
29634     +           file _F1;
29635     +           put '   ';
29636     +           put '* ;';
29637     +           put "* Defining: &newname;";
29638     +           put '* ;';
29639     +           if type eq 'C' then  do;
29640     +              string = 'Length '!!strip(newname)!!'$'!!strip(put(length, best.))!!';';
29641     +              put string;
29642     +           end;
29643     +           if strip(label) = '' then label = name;
29644     +           string= 'Label '!!strip(newname)!!"='Replacement: "!!strip(tranwrd(label, "'","''"))!!"';";
29645     +           put string;
29646     +           if format ne '' then do;
29647     +              string= 'format '!!strip(newname)!!' '!!strip(format)!!';';
29648     +              put string;
29649     +           end;
29650     +           string = strip(newname)!!'='!!strip(name)!!';';
29651     +           put string;
29652     +        run;
29653     +    %end;
29654     +    %let dsid = %sysfunc(close(&dsid));
29655     +   %doendo:
29656     +%mend makeNewVarOptCode;
29657     +
29658     +%macro makeClassScoreCode(LevelData=, nameData=_newNames);
29659     +   %let UFormatFlag = 0;
29660     +
29661     +   %em_register(key=REPLACECODE, type=FOLDER);
29662     +
29663     +   /* Generating New Variable Score Code */
29664     +   %makeNewVarCode(ScoreFile=&EM_FILE_EMFLOWSCORECODE,  Data=&nameData);
29665     +
29666     +   data _tempNewVars;
29667     +      set &nameData;
29668     +      where ROLE ne 'TARGET';
29669     +   run;
29670     +   %makeNewVarCode(ScoreFile=&EM_FILE_EMPUBLISHSCORECODE, Data=_tempNewVars);
29671     +   %makeNewVarOptCode(Folder=&em_user_replacecode, Data=_tempNewVars);
29672     +
29673     +   proc datasets lib=WORK nolist;
29674     +      delete _tempNewVars;
29675     +   run;
29676     +   quit;
29677     +
29678     +   /* Generating Publish Score Code */
29679     +   data _temp;
29680     +      set &LevelData;
29681     +      where ROLE ne 'TARGET' and LEVEL='_UNKNOWN_' and (REPLACE_VALUE ^in('', '_DEFAULT_') or
29682     +                             (REPLACE_VALUE='_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE'));
29683     +      keep NAME;
29684     +   run;
29685     +
29686     +   data _temp;
29687     +      merge _temp(in=_a) &Leveldata &nameData;
29688     +      by NAME;
29689     +      if _a then output;
29690     +   run;
29691     +
29692     +   %makeUnknownCode(ScoreFile=&EM_FILE_EMPUBLISHSCORECODE, Data=_temp);
29693     +   %makeUnknownOptCode(Folder=&em_user_replacecode,        Data=_temp);
29694     +   proc datasets lib=work nolist;
29695     +      delete _temp;
29696     +   run;
29697     +   quit;
29698     +
29699     +   data _temp;
29700     +      merge &LevelData(in=_a where=( ROLE ne 'TARGET' and LEVEL ne '_UNKNOWN_' and
29701     +        (REPLACE_VALUE ^in('', '_DEFAULT_') or (REPLACE_VALUE='_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE')) ))  &nameData;
29702     +      by NAME;
29703     +      if _a then output;
29704     +   run;
29705     +
29706     +   %makeReplaceCode(ScoreFile=&EM_FILE_EMPUBLISHSCORECODE, Data=_temp);
29707     +   %makeReplaceOptCode(Folder=&em_user_replacecode,        Data=_temp);
29708     +
29709     +   /* Generating Flow Score Code */
29710     +   data _temp;
29711     +      set &LevelData;
29712     +      where LEVEL='_UNKNOWN_' and (REPLACE_VALUE ^in('', '_DEFAULT_') or
29713     +                             (REPLACE_VALUE='_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE'));
29714     +      keep NAME;
29715     +   run;
29716     +
29717     +   data _temp;
29718     +      merge _temp(in=_a) &Leveldata &nameData;
29719     +      by NAME;
29720     +      if _a then output;
29721     +   run;
29722     +   %makeUnknownCode(ScoreFile=&EM_FILE_EMFLOWSCORECODE, Data=_temp);
29723     +
29724     +   data _temp;
29725     +      merge &LevelData(in=_a where=(LEVEL ne '_UNKNOWN_' and (REPLACE_VALUE ^in('', '_DEFAULT_') or
29726     +                             (REPLACE_VALUE='_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE')) )) &nameData;
29727     +      by NAME;
29728     +      if _a then output;
29729     +   run;
29730     +
29731     +   %makeReplaceCode(ScoreFile=&EM_FILE_EMFLOWSCORECODE, Data=_temp);
29732     +
29733     +   %if "&UFormatFlag" = "1" %then %do;
29734     +       filename _F1 "&em_user_replacecode&em_dsep._ALL_.sas" MOD;
29735     +       data _null_;
29736     +          file _F1;
29737     +          put 'length _UFormat200 $200;';
29738     +          put 'drop   _UFORMAT200;';
29739     +          put '_UFORMAT200 = " ";';
29740     +       run;
29741     +       filename _F1;
29742     +   %end;
29743     +
29744     +%mend makeClassScoreCode;
29745     +
29746     +%macro makeClassDeltaCode(nameData=_newNames);
29747     +   %if ^%sysfunc(exist(&nameData)) %then %goto doendm;
29748     +
29749     +   filename _F1 "&EM_FILE_CDELTA_TRAIN" MOD;
29750     +   data _null_;
29751     +        set &nameData end=eof;
29752     +        length string $400;
29753     +        file _F1;
29754     +        %if &EM_PROPERTY_HIDEVARIABLE eq Y %then %do;
29755     +            string = 'if NAME="'!!strip(NAME)!!'" then delete;';  put string;
29756     +        %end;
29757     +        %else %do;
29758     +            string = 'if NAME="'!!strip(NAME)!!'" then ROLE="REJECTED";'; put string;
29759     +        %end;
29760     +        put 'else';
29761     +        string = '   if NAME="'!!strip(NEWNAME)!!'" then do;'; put string;
29762     +        string = '      ROLE="'!!strip(ROLE)!!'";';            put string;
29763     +        string = '      LEVEL="'!!strip(MLEVEL)!!'";';         put string;
29764     +        put      'end;';
29765     +        if ^eof then
29766     +           put 'else';
29767     +   run;
29768     +   %doendm:
29769     +   filename _F1;
29770     +%mend makeClassDeltaCode;
29771     +
29772     +%macro makeValueReport(Data=, outData=);
29773     +   data &outData;
29774     +      set &data;
29775     +      where REPLACE_VALUE ^in('', '_DEFAULT_') or (REPLACE_VALUE eq '_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE');
29776     +      if LEVEL = '_UNKNOWN_' then do;
29777     +         LEVEL='Unknown';
29778     +         %if &EM_PROPERTY_UNKNOWNLEVEL = MODE %then %do;
29779     +         if REPLACE_VALUE in('_MODE_', '_DEFAULT_') then REPLACE_VALUE = strip(NORMMODE);
29780     +         else
29781     +            if REPLACE_VALUE ='_MISSING_' then do;
29782     +               if type eq 'N' then REPLACE_VALUE='.';
29783     +               else REPLACE_VALUE='_blank_';
29784     +            end;
29785     +         %end;
29786     +         %else  %do;
29787     +         if REPLACE_VALUE = '_MODE_' then REPLACE_VALUE = strip(NORMMODE);
29788     +         else
29789     +            if REPLACE_VALUE in('_MISSING_', '_DEFAULT_') then do;
29790     +               if type eq 'N' then REPLACE_VALUE='.';
29791     +               else REPLACE_VALUE='_blank_';
29792     +            end;
29793     +         %end;
29794     +      end;
29795     +      else do;
29796     +         if REPLACE_VALUE ='_MISSING_' then do;
29797     +            if type eq 'N' then REPLACE_VALUE='.';
29798     +            else REPLACE_VALUE='_blank_';
29799     +         end;
29800     +         else
29801     +            if REPLACE_VALUE = '_MODE_' then REPLACE_VALUE = strip(NORMMODE);
29802     +      end;
29803     +      keep NAME LEVEL CRAW NRAW REPLACE_VALUE TYPE LABEL ;
29804     +   run;
29805     +%mend makeValueReport;
29806     +
29807     +%macro makeVarOptCode(LimitDs=, Folder=);
29808     +    %if ^%sysfunc(exist(&LimitDs)) or "&Folder" eq "" %then %goto doendo;
29809     +
29810     +    %let dsid = %sysfunc(open(&limitDs));
29811     +    %do %while(^%sysfunc(fetch(&dsid)));
29812     +        %let newNum     = %sysfunc(varnum(&dsid, NewName));
29813     +        %let newname = %sysfunc(getvarc(&dsid, &newNum));
29814     +
29815     +    filename sfile "&Folder.&em_dsep.&newname..sas";
29816     +    data _null_;
29817     +       length string $400;
29818     +       set &LimitDs;
29819     +       where NEWNAME="&newname";
29820     +       file sfile;
29821     +       put '* ;';
29822     +       string = '*Variable: '!!strip(name)!!';';
29823     +       put string;
29824     +       put '* ;';
29825     +       if label eq '' then
29826     +          string = 'Label '!!strip(newname)!!"= 'Replacement: "!!strip(name)!!"';";
29827     +       else
29828     +          string = 'Label '!!strip(newname)!!"= 'Replacement: "!!strip(tranwrd(label, "'", "''"))!!"';";
29829     +       put string;
29830     +       string = strip(newname)!!'= '!!strip(NAME)!!';';
29831     +       put string;
29832     +       replacemin = .;
29833     +       string = 'if '!!strip(name)!!' eq . then '!!strip(newname)!!' = .;';
29834     +       put string;
29835     +       if LowerLimit ne . then do;
29836     +          if ReplaceMethodUsed="COMPUTED" then replaceMin=LowerLimit;
29837     +          if ReplaceMethodUsed="MANUAL"   then replaceMin = ReplaceMinUsed;
29838     +          put 'else';
29839     +          string = 'if '!!strip(name)!!'<'!!strip(put(lowerlimit,best.))
29840     +                    !!' then '!!strip(newname)!!'='!!strip(put(replaceMin,best.))!!';';
29841     +          put string;
29842     +       end;
29843     +       if UpperLimit ne . then do;
29844     +          if ReplaceMethodUsed="COMPUTED" then replaceMax=UpperLimit;
29845     +          if ReplaceMethodUsed="MANUAL"   then replaceMax = ReplaceMaxUsed;
29846     +          put 'else';
29847     +          string = 'if '!!strip(name)!!'>'!!strip(put(upperlimit,best.))
29848     +                    !!' then '!!strip(newname)!!'='!!strip(put(replaceMax,best.))!!';';
29849     +          put string;
29850     +       end;
29851     +        run;
29852     +        filename sfile;
29853     +    %end;
29854     +    %let dsid = %sysfunc(close(&dsid));
29855     +
29856     +    %doendo:
29857     +%mend makeVarOptCode;
29858     +
29859     +%macro score;
29860     +   %em_register(key=REPLACECODE, type=FOLDER);
29861     +
29862     +   filename x catalog 'sashelp.emutil.em_deldir.source';
29863     +   %inc x;
29864     +   filename x;
29865     +   %delDir(folder=%nrbquote(&em_user_replacecode));
29866     +
29867     +   data _null_; length rc $200;
29868     +      rc = dcreate('REPLACECODE', "&EM_NODEDIR");
29869     +   run;
29870     +
29871     +   filename _F1 "&EM_FILE_EMFLOWSCORECODE";
29872     +   filename _F2 "&EM_FILE_EMPUBLISHSCORECODE";
29873     +   filename _F3 "&EM_FILE_CDELTA_TRAIN";
29874     +   data _null_;
29875     +      rc=fdelete('_F1');
29876     +      rc=fdelete('_F2');
29877     +      rc=fdelete('_F3');
29878     +   run;
29879     +   filename _F1;
29880     +   filename _F2;
29881     +   filename _F3;
29882     +
29883     +   %em_getname(key=OUTCLASS,  type=DATA);
29884     +   %em_getname(key=LIMITS, type=DATA);
29885     +   %em_getname(key=CLASSINFO, type=DATA);
29886     +
29887     +   /* Retrieve Replacement Values for Class Variables */
29888     +   %makeLevelData(outclass=&em_user_outclass, data=CLASSTEMP);
29889     +
29890     +   /* Generate Names for Replaced Variables */
29891     +   %makeNewNames(limitDs =&em_user_limits, classValue=CLASSTEMP, classname=&em_user_classinfo);
29892     +
29893     +   /* Generate score and delta code for Var Variables */
29894     +   %if %sysfunc(exist(&EM_USER_LIMITS)) %then %do;
29895     +       %makeVarScoreCode(LimitDs = &EM_USER_LIMITS, File=&EM_FILE_EMFLOWSCORECODE);
29896     +       %makeVarScoreCode(LimitDs = &EM_USER_LIMITS, File=&EM_FILE_EMPUBLISHSCORECODE);
29897     +       %makeVarOptCode(LimitDs= &EM_USER_LIMITS,    Folder=&em_user_replacecode);
29898     +       %makeVarDeltaCode(LimitDs = &EM_USER_LIMITS);
29899     +
29900     +       proc print data=&EM_USER_LIMITS label noobs;
29901     +          var Name newname lowerLimit REPLACEMINUSED UpperLimit REPLACEMAXUSED;
29902     +          label REPLACEMINUSED  =  "%sysfunc(sasmsg(sashelp.dmine, rpt_replacemin_vlabel, NOQUOTE))"
29903     +                REPLACEMAXUSED  =  "%sysfunc(sasmsg(sashelp.dmine, rpt_replacemax_vlabel, NOQUOTE))";
29904     +          title9  ' ';
29905     +          title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varlimits_title, NOQUOTE))";
29906     +       run;
29907     +       title10;
29908     +  %end;
29909     +
29910     +   %if %sysfunc(exist(&EM_USER_CLASSINFO)) %then %do;
29911     +       %makeClassScoreCode(LevelData=CLASSTEMP, nameData=&em_user_classinfo);
29912     +       %makeClassDeltaCode(nameData=&em_user_classinfo);
29913     +   %end;
29914     +
29915     +   %em_getname(key=VALUES, type=DATA);
29916     +   %makeValueReport(data=CLASSTEMP, outData=&EM_USER_VALUES);
29917     +   %if %sysfunc(exist(&EM_USER_VALUES)) %then %do;
29918     +       %let nobs = 0;
29919     +       %let dsid = %sysfunc(open(&EM_USER_VALUES));
29920     +       %if &dsid %then %do;
29921     +           %let nobs =  %sysfunc(attrn(&dsid, NOBS));
29922     +           %let dsid = %sysfunc(close(&dsid));
29923     +       %end;
29924     +       %if &nobs %then
29925     +           %EM_REPORT(key=VALUES, viewtype=DATA, block=MODEL, description=ReplaceLevels,autoDisplay=N);
29926     +   %end;
29927     +
29928     +   %if %sysfunc(exist(&EM_USER_VALUES)) %then %do;
29929     +       proc print data=&EM_USER_VALUES label noobs;
29930     +          title9  ' ';
29931     +          title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classreplacement_title, NOQUOTE))";
29932     +      run;
29933     +      title10;
29934     +  %end;
29935     +
29936     +   proc datasets lib=work nolist;
29937     +      delete CLASSTEMP;
29938     +   run;
29939     +   quit;
29940     +
29941     +   %em_register(key=EMSCOREVAR, type=DATA);
29942     +   %let scorevarDs = %scan(&em_user_emscorevar, 2, .);
29943     +   proc datasets lib=&em_lib nolist;
29944     +      delete &scorevarDs;
29945     +   run;
29946     +   quit;
29947     +
29948     +   %let filrf=mydir;
29949     +   %let rc=%sysfunc(filename(filrf,&em_user_replacecode));
29950     +   %let did=%sysfunc(dopen(&filrf));
29951     +
29952     +   %if &did %then %do;
29953     +       %let memcount=%sysfunc(dnum(&did));
29954     +       %if &memcount > 0 %then %do;
29955     +           data &em_user_emscorevar;
29956     +              length Name $32 formula $70 file $200;
29957     +              keep NAME Formula file;
29958     +
29959     +           %if %sysfunc(fileexist(&em_user_replacecode&em_dsep._ALL_.sas)) %then %do;
29960     +               name=''; file="REPLACECODE&em_dsep._ALL_.sas";
29961     +               output;
29962     +           %end;
29963     +           %do i=1 %to &memcount;
29964     +               %let name =%nrbquote(%sysfunc(dread(&did,&i)));
29965     +               %let newvar = %scan(&name, 1, .);
29966     +               %if "&newvar" ne "_ALL_" %then %do;
29967     +                   name = "&newvar"; file="REPLACECODE&em_dsep&name";
29968     +                   output;
29969     +               %end;
29970     +           %end;
29971     +           run;
29972     +       %end;
29973     +  %end;
29974     +  %if &did %then %let did = %sysfunc(dclose(&did));
29975     +
29976     +
29977     +%mend score;
NOTE: %INCLUDE (level 1) ending.
MPRINT(MAIN):   filename temp;
NOTE: Fileref TEMP has been deassigned.
MPRINT(EM_REGISTER):   data WORK.EM_USER_KEY;
MPRINT(EM_REGISTER):   length KEY $32 TYPE $10 FILE $200 FOLDER $32 EXTENSION $8 AUTODELETE $1 property $1 action $8;
MPRINT(EM_REGISTER):   key = upcase("REPLACECODE");
MPRINT(EM_REGISTER):   type = upcase("FOLDER");
MPRINT(EM_REGISTER):   file = "REPLACECODE";
MPRINT(EM_REGISTER):   folder = "";
MPRINT(EM_REGISTER):   extension = "";
MPRINT(EM_REGISTER):   AUTODELETE = "Y";
MPRINT(EM_REGISTER):   property = "N";
MPRINT(EM_REGISTER):   action = "";
MPRINT(EM_REGISTER):   run;

NOTE: The data set WORK.EM_USER_KEY has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(SCORE):  ;
MPRINT(SCORE):   filename x catalog 'sashelp.emutil.em_deldir.source';
NOTE: %INCLUDE (level 1) file X is file SASHELP.EMUTIL.EM_DELDIR.SOURCE.
29978     +%macro delDir(folder=);
29979     +   %let filrf=mydir;
29980     +   %let rc=%sysfunc(filename(filrf,&folder));
29981     +   %let did=%sysfunc(dopen(&filrf));
29982     +
29983     +   %if &did %then %do;
29984     +       %let memcount=%sysfunc(dnum(&did));
29985     +       %if &memcount > 0 %then %do;
29986     +           %do i=1 %to &memcount;
29987     +               %let name =%nrbquote(%sysfunc(dread(&did,&i)));
29988     +               data _null_;
29989     +                  fname="_temp&i";
29990     +                  rc=filename(fname,"&folder&em_dsep.&name");
29991     +                  if rc = 0 and fexist(fname) then
29992     +                     rc=fdelete(fname);
29993     +                  rc=filename(fname);
29994     +               run;
29995     +           %end;
29996     +       %end;
29997     +       %let rc=%sysfunc(dclose(&did));
29998     +   %end;
29999     +   %let rc = %sysfunc(fdelete(&filrf));
30000     +   %let rc=%sysfunc(filename(filrf));
30001     +%mend delDir;
NOTE: %INCLUDE (level 1) ending.
MPRINT(SCORE):   filename x;
NOTE: Fileref X has been deassigned.
MPRINT(DELDIR):   data _null_;
MPRINT(DELDIR):   fname="_temp1";
MPRINT(DELDIR):   rc=filename(fname,"C:\Users\brahm\OneDrive\Desktop\BAN210_Project\Workspaces\EMWS1\Repl\REPLACECODE\REP_deg_malig.sas");
MPRINT(DELDIR):   if rc = 0 and fexist(fname) then rc=fdelete(fname);
MPRINT(DELDIR):   rc=filename(fname);
MPRINT(DELDIR):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(SCORE):  ;
MPRINT(SCORE):   data _null_;
MPRINT(SCORE):   length rc $200;
MPRINT(SCORE):   rc = dcreate('REPLACECODE', "C:\Users\brahm\OneDrive\Desktop\BAN210_Project\Workspaces\EMWS1\Repl");
MPRINT(SCORE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SCORE):   filename _F1 "C:\Users\brahm\OneDrive\Desktop\BAN210_Project\Workspaces\EMWS1\Repl\EMFLOWSCORE.sas";
MPRINT(SCORE):   filename _F2 "C:\Users\brahm\OneDrive\Desktop\BAN210_Project\Workspaces\EMWS1\Repl\EMPUBLISHSCORE.sas";
MPRINT(SCORE):   filename _F3 "C:\Users\brahm\OneDrive\Desktop\BAN210_Project\Workspaces\EMWS1\Repl\CDELTA_TRAIN.sas";
MPRINT(SCORE):   data _null_;
MPRINT(SCORE):   rc=fdelete('_F1');
MPRINT(SCORE):   rc=fdelete('_F2');
MPRINT(SCORE):   rc=fdelete('_F3');
MPRINT(SCORE):   run;

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SCORE):   filename _F1;
NOTE: Fileref _F1 has been deassigned.
MPRINT(SCORE):   filename _F2;
NOTE: Fileref _F2 has been deassigned.
MPRINT(SCORE):   filename _F3;
NOTE: Fileref _F3 has been deassigned.
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(MAKELEVELDATA):   data REPLACE_MODE;
MPRINT(MAKELEVELDATA):   set EMWS1.Repl_OUTCLASS;
MPRINT(MAKELEVELDATA):   by NAME;
MPRINT(MAKELEVELDATA):   if first.name then do;
MPRINT(MAKELEVELDATA):   MODEC = CRAW;
MPRINT(MAKELEVELDATA):   MODEN = NRAW;
MPRINT(MAKELEVELDATA):   NORMMODE = LEVEL;
MPRINT(MAKELEVELDATA):   output;
MPRINT(MAKELEVELDATA):   end;
MPRINT(MAKELEVELDATA):   keep NAME MODEC MODEN NORMMODE UNKWOWNDEFAULT;
MPRINT(MAKELEVELDATA):   run;

WARNING: The variable UNKWOWNDEFAULT in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 51 observations read from the data set EMWS1.REPL_OUTCLASS.
NOTE: The data set WORK.REPLACE_MODE has 9 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKELEVELDATA):   proc sort data=EMWS1.Repl_VariableSet;
MPRINT(MAKELEVELDATA):   by NAME;
MPRINT(MAKELEVELDATA):   run;

NOTE: There were 10 observations read from the data set EMWS1.REPL_VARIABLESET.
NOTE: The data set EMWS1.REPL_VARIABLESET has 10 observations and 27 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKELEVELDATA):   data CLASSTEMP;
MPRINT(MAKELEVELDATA):   length UNKWOWNDEFAULT $8;
MPRINT(MAKELEVELDATA):   merge EMWS1.Repl_OUTCLASS(in=_a) REPLACE_MODE EMWS1.Repl_VariableSet(keep=LABEL LENGTH NAME ROLE LEVEL LABEL FORMAT RENAME=(LEVEL=MLEVEL) where=(MLEVEL ne 'INTERVAL'));
MPRINT(MAKELEVELDATA):   by NAME;
MPRINT(MAKELEVELDATA):   if LEVEL = '_UNKNOWN_' then UNKWOWNDEFAULT = "NONE";
MPRINT(MAKELEVELDATA):   if _a then output;
MPRINT(MAKELEVELDATA):   run;

WARNING: Multiple lengths were specified for the BY variable Name by input data sets. This might cause unexpected results.
NOTE: There were 51 observations read from the data set EMWS1.REPL_OUTCLASS.
NOTE: There were 9 observations read from the data set WORK.REPLACE_MODE.
NOTE: There were 9 observations read from the data set EMWS1.REPL_VARIABLESET.
      WHERE MLEVEL not = 'INTERVAL';
NOTE: The data set WORK.CLASSTEMP has 51 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKELEVELDATA):   proc datasets lib=work nolist;
MPRINT(MAKELEVELDATA):   delete REPLACE_MODE;
MPRINT(MAKELEVELDATA):   run;
NOTE: Deleting WORK.REPLACE_MODE (memtype=DATA).
MPRINT(MAKELEVELDATA):   quit;
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(SCORE):  ;
MPRINT(MAKENEWNAMES):   proc sort data=CLASSTEMP out=invarname nodupkey;
MPRINT(MAKENEWNAMES):   by NAME;
MPRINT(MAKENEWNAMES):   where REPLACE_VALUE ^in('', '_DEFAULT_') or (REPLACE_VALUE eq '_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE');
MPRINT(MAKENEWNAMES):   run;

NOTE: Input data set is empty.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: There were 0 observations read from the data set WORK.CLASSTEMP.
      WHERE REPLACE_VALUE not in (' ', '_DEFAULT_') or ((REPLACE_VALUE='_DEFAULT_') and (UNKWOWNDEFAULT not = 'NONE'));
NOTE: The data set WORK.INVARNAME has 0 observations and 16 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKENEWNAMES):   data invarname;
MPRINT(MAKENEWNAMES):   set EMWS1.Repl_LIMITS(keep=NAME) ;
MPRINT(MAKENEWNAMES):   run;

NOTE: There were 1 observations read from the data set EMWS1.REPL_LIMITS.
NOTE: The data set WORK.INVARNAME has 1 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKENEWNAMES):   proc dmdb data=invarname outtable=outname(rename=(REP=NEWNAME)) nameserver;
MPRINT(MAKENEWNAMES):   names NAME;
MPRINT(MAKENEWNAMES):   prefix REP_;
MPRINT(MAKENEWNAMES):   run;

NOTE: There were 1 observations read from the data set WORK.INVARNAME.
NOTE: The data set WORK.OUTNAME has 1 observations and 2 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKENEWNAMES):   proc sort data=outname;
MPRINT(MAKENEWNAMES):   by NAME;
MPRINT(MAKENEWNAMES):   run;

NOTE: There were 1 observations read from the data set WORK.OUTNAME.
NOTE: The data set WORK.OUTNAME has 1 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKENEWNAMES):   data EMWS1.Repl_LIMITS;
MPRINT(MAKENEWNAMES):   merge outname EMWS1.Repl_LIMITS(in=a);
MPRINT(MAKENEWNAMES):   by NAME;
MPRINT(MAKENEWNAMES):   if a then output;
MPRINT(MAKENEWNAMES):   run;

NOTE: There were 1 observations read from the data set WORK.OUTNAME.
NOTE: There were 1 observations read from the data set EMWS1.REPL_LIMITS.
NOTE: The data set EMWS1.REPL_LIMITS has 1 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKENEWNAMES):   proc datasets lib=EMWS1 nolist;
MPRINT(MAKENEWNAMES):   modify Repl_LIMITS;
WARNING: Variable REPLACEMETHODUSED not found in data set EMWS1.REPL_LIMITS.
WARNING: Variable REPLACEMINUSED not found in data set EMWS1.REPL_LIMITS.
WARNING: Variable REPLACEDMAXUSED not found in data set EMWS1.REPL_LIMITS.
MPRINT(MAKENEWNAMES):   label NAME = "Variable" NEWNAME = "Replace Variable" CALCMETHOD = "Limits Method" REPLACEMETHODUSED = "Replacement Method Used" LOWERLIMIT = "Lower limit" REPLACEMINUSED = "Lower Replacement Value" UPPERLIMIT = "Upper Limit" 
REPLACEDMAXUSED = "Upper Replacement Value" REPLACEMETHOD = "Replacement Method" REPLACEMIN = "User-Specified Lower Replacement Value" REPLACEMAX = "User-Specified Upper Replacement Value" ROLE = "Role" LEVEL = "Measurement Level" LABEL = "Label";
MPRINT(MAKENEWNAMES):   run;

NOTE: MODIFY was successful for EMWS1.REPL_LIMITS.DATA.
MPRINT(MAKENEWNAMES):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.07 seconds
      cpu time            0.04 seconds
      

MPRINT(MAKENEWNAMES):   data length;
MPRINT(MAKENEWNAMES):   retain newlen 0;
MPRINT(MAKENEWNAMES):   set CLASSTEMP;
MPRINT(MAKENEWNAMES):   by NAME;
MPRINT(MAKENEWNAMES):   if type eq 'C' then do;
MPRINT(MAKENEWNAMES):   if first.name then do;
MPRINT(MAKENEWNAMES):   if REPLACE_VALUE ^in('_DEFAULT_', '_MODE_', '_MISSING_') then newlen = max(length, length(strip(replace_value)));
MPRINT(MAKENEWNAMES):   else newlen = length;
MPRINT(MAKENEWNAMES):   end;
MPRINT(MAKENEWNAMES):   else do;
MPRINT(MAKENEWNAMES):   if REPLACE_VALUE ^in('_DEFAULT_', '_MODE_', '_MISSING_') then newlen = max(newlen, length(strip(replace_value)));
MPRINT(MAKENEWNAMES):   end;
MPRINT(MAKENEWNAMES):   end;
MPRINT(MAKENEWNAMES):   else newlen = length;
MPRINT(MAKENEWNAMES):   len=length;
MPRINT(MAKENEWNAMES):   if last.name then output;
MPRINT(MAKENEWNAMES):   keep name len newlen role format type label mlevel;
MPRINT(MAKENEWNAMES):   run;

NOTE: There were 51 observations read from the data set WORK.CLASSTEMP.
NOTE: The data set WORK.LENGTH has 9 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKENEWNAMES):   data EMWS1.Repl_CLASSINFO;
MPRINT(MAKENEWNAMES):   length rformat formatroot $32;
MPRINT(MAKENEWNAMES):   merge outname(in=a) length(in=b);
MPRINT(MAKENEWNAMES):   by NAME;
MPRINT(MAKENEWNAMES):   length=len;
MPRINT(MAKENEWNAMES):   if newlen > len then do;
MPRINT(MAKENEWNAMES):   if type eq 'C' and format ne '' then do;
MPRINT(MAKENEWNAMES):   rformat = strip(reverse(format));
MPRINT(MAKENEWNAMES):   do while(indexc(rformat, '.0123456789')=1);
MPRINT(MAKENEWNAMES):   rformat = substr(rformat, 2);
MPRINT(MAKENEWNAMES):   end;
MPRINT(MAKENEWNAMES):   formatroot= upcase(reverse(rformat));
MPRINT(MAKENEWNAMES):   if strip(formatRoot) in('$','$F','$UPCASE','$CHAR') then do;
MPRINT(MAKENEWNAMES):   format = strip(formatroot)!!strip(put(newlen, best.))!!'.';
MPRINT(MAKENEWNAMES):   end;
MPRINT(MAKENEWNAMES):   end;
MPRINT(MAKENEWNAMES):   length = newlen;
MPRINT(MAKENEWNAMES):   end;
MPRINT(MAKENEWNAMES):   if a and b then output;
MPRINT(MAKENEWNAMES):   KEEP name newname role format mlevel type label length;
MPRINT(MAKENEWNAMES):   run;

WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This might cause unexpected results.
NOTE: There were 1 observations read from the data set WORK.OUTNAME.
NOTE: There were 9 observations read from the data set WORK.LENGTH.
NOTE: The data set EMWS1.REPL_CLASSINFO has 0 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKENEWNAMES):   proc datasets lib=work nolist;
MPRINT(MAKENEWNAMES):   delete length invarname outname;
MPRINT(MAKENEWNAMES):   run;

NOTE: Deleting WORK.LENGTH (memtype=DATA).
NOTE: Deleting WORK.INVARNAME (memtype=DATA).
NOTE: Deleting WORK.OUTNAME (memtype=DATA).
MPRINT(MAKENEWNAMES):   quit;
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SCORE):  ;
MPRINT(MAKEVARSCORECODE):   filename sFile "C:\Users\brahm\OneDrive\Desktop\BAN210_Project\Workspaces\EMWS1\Repl\EMFLOWSCORE.sas";
MPRINT(MAKEVARSCORECODE):   data EMWS1.Repl_LIMITS;
MPRINT(MAKEVARSCORECODE):   set EMWS1.Repl_LIMITS end=eof;
MPRINT(MAKEVARSCORECODE):   length REPLACEMETHODUSED $8 string $400;
MPRINT(MAKEVARSCORECODE):   file sFile;
MPRINT(MAKEVARSCORECODE):   put'* ;';
MPRINT(MAKEVARSCORECODE):   put'* Variable: ' name ';';
MPRINT(MAKEVARSCORECODE):   put '* ;';
MPRINT(MAKEVARSCORECODE):   if strip(label) = '' then label = name;
MPRINT(MAKEVARSCORECODE):   string= 'Label '!!strip(newname)!!"='Replacement: "!!strip(tranwrd(label, "'","''"))!!"';";
MPRINT(MAKEVARSCORECODE):   put string;
MPRINT(MAKEVARSCORECODE):   put newname '=' name ';';
MPRINT(MAKEVARSCORECODE):   REPLACEMETHODUSED = REPLACEMETHOD;
MPRINT(MAKEVARSCORECODE):   if REPLACEMETHOD = 'DEFAULT' then REPLACEMETHODUSED = 'COMPUTED';
MPRINT(MAKEVARSCORECODE):   put 'if ' name ' eq . then ' newname '= . ;';
MPRINT(MAKEVARSCORECODE):   if LowerLimit ne . then do;
MPRINT(MAKEVARSCORECODE):   select(REPLACEMETHODUSED);
MPRINT(MAKEVARSCORECODE):   when('COMPUTED') REPLACEMINUSED = lowerLimit;
MPRINT(MAKEVARSCORECODE):   when('MISSING') REPLACEMINUSED = .;
MPRINT(MAKEVARSCORECODE):   when('MANUAL') REPLACEMINUSED = replaceMin;
MPRINT(MAKEVARSCORECODE):   otherwise;
MPRINT(MAKEVARSCORECODE):   end;
MPRINT(MAKEVARSCORECODE):   put 'else';
MPRINT(MAKEVARSCORECODE):   put 'if ' name '<' lowerLimit ' then ' newname ' = ' REPLACEMINUSED ';';
MPRINT(MAKEVARSCORECODE):   end;
MPRINT(MAKEVARSCORECODE):   if upperLimit ne . then do;
MPRINT(MAKEVARSCORECODE):   select(REPLACEMETHODUSED);
MPRINT(MAKEVARSCORECODE):   when('COMPUTED') REPLACEMAXUSED = upperLimit;
MPRINT(MAKEVARSCORECODE):   when('MISSING') REPLACEMAXUSED = .;
MPRINT(MAKEVARSCORECODE):   when('MANUAL') REPLACEMAXUSED = replaceMax;
MPRINT(MAKEVARSCORECODE):   otherwise;
MPRINT(MAKEVARSCORECODE):   end;
MPRINT(MAKEVARSCORECODE):   put 'else';
MPRINT(MAKEVARSCORECODE):   put 'if ' name '>' upperLimit ' then ' newname ' = ' REPLACEMAXUSED ';';
MPRINT(MAKEVARSCORECODE):   end;
MPRINT(MAKEVARSCORECODE):   drop string;
MPRINT(MAKEVARSCORECODE):   run;

NOTE: The file SFILE is:
      Filename=C:\Users\brahm\OneDrive\Desktop\BAN210_Project\Workspaces\EMWS1\Repl\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=07Aug2022:19:13:32,
      Create Time=07Aug2022:18:31:21

NOTE: 10 records were written to the file SFILE.
      The minimum record length was 3.
      The maximum record length was 64.
NOTE: There were 1 observations read from the data set EMWS1.REPL_LIMITS.
NOTE: The data set EMWS1.REPL_LIMITS has 1 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEVARSCORECODE):   filename sfile;
NOTE: Fileref SFILE has been deassigned.
MPRINT(SCORE):  ;
MPRINT(MAKEVARSCORECODE):   filename sFile "C:\Users\brahm\OneDrive\Desktop\BAN210_Project\Workspaces\EMWS1\Repl\EMPUBLISHSCORE.sas";
MPRINT(MAKEVARSCORECODE):   data EMWS1.Repl_LIMITS;
MPRINT(MAKEVARSCORECODE):   set EMWS1.Repl_LIMITS end=eof;
MPRINT(MAKEVARSCORECODE):   length REPLACEMETHODUSED $8 string $400;
MPRINT(MAKEVARSCORECODE):   file sFile;
MPRINT(MAKEVARSCORECODE):   put'* ;';
MPRINT(MAKEVARSCORECODE):   put'* Variable: ' name ';';
MPRINT(MAKEVARSCORECODE):   put '* ;';
MPRINT(MAKEVARSCORECODE):   if strip(label) = '' then label = name;
MPRINT(MAKEVARSCORECODE):   string= 'Label '!!strip(newname)!!"='Replacement: "!!strip(tranwrd(label, "'","''"))!!"';";
MPRINT(MAKEVARSCORECODE):   put string;
MPRINT(MAKEVARSCORECODE):   put newname '=' name ';';
MPRINT(MAKEVARSCORECODE):   REPLACEMETHODUSED = REPLACEMETHOD;
MPRINT(MAKEVARSCORECODE):   if REPLACEMETHOD = 'DEFAULT' then REPLACEMETHODUSED = 'COMPUTED';
MPRINT(MAKEVARSCORECODE):   put 'if ' name ' eq . then ' newname '= . ;';
MPRINT(MAKEVARSCORECODE):   if LowerLimit ne . then do;
MPRINT(MAKEVARSCORECODE):   select(REPLACEMETHODUSED);
MPRINT(MAKEVARSCORECODE):   when('COMPUTED') REPLACEMINUSED = lowerLimit;
MPRINT(MAKEVARSCORECODE):   when('MISSING') REPLACEMINUSED = .;
MPRINT(MAKEVARSCORECODE):   when('MANUAL') REPLACEMINUSED = replaceMin;
MPRINT(MAKEVARSCORECODE):   otherwise;
MPRINT(MAKEVARSCORECODE):   end;
MPRINT(MAKEVARSCORECODE):   put 'else';
MPRINT(MAKEVARSCORECODE):   put 'if ' name '<' lowerLimit ' then ' newname ' = ' REPLACEMINUSED ';';
MPRINT(MAKEVARSCORECODE):   end;
MPRINT(MAKEVARSCORECODE):   if upperLimit ne . then do;
MPRINT(MAKEVARSCORECODE):   select(REPLACEMETHODUSED);
MPRINT(MAKEVARSCORECODE):   when('COMPUTED') REPLACEMAXUSED = upperLimit;
MPRINT(MAKEVARSCORECODE):   when('MISSING') REPLACEMAXUSED = .;
MPRINT(MAKEVARSCORECODE):   when('MANUAL') REPLACEMAXUSED = replaceMax;
MPRINT(MAKEVARSCORECODE):   otherwise;
MPRINT(MAKEVARSCORECODE):   end;
MPRINT(MAKEVARSCORECODE):   put 'else';
MPRINT(MAKEVARSCORECODE):   put 'if ' name '>' upperLimit ' then ' newname ' = ' REPLACEMAXUSED ';';
MPRINT(MAKEVARSCORECODE):   end;
MPRINT(MAKEVARSCORECODE):   drop string;
MPRINT(MAKEVARSCORECODE):   run;

NOTE: The file SFILE is:
      Filename=C:\Users\brahm\OneDrive\Desktop\BAN210_Project\Workspaces\EMWS1\Repl\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=07Aug2022:19:13:32,
      Create Time=07Aug2022:18:31:21

NOTE: 10 records were written to the file SFILE.
      The minimum record length was 3.
      The maximum record length was 64.
NOTE: There were 1 observations read from the data set EMWS1.REPL_LIMITS.
NOTE: The data set EMWS1.REPL_LIMITS has 1 observations and 14 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARSCORECODE):   filename sfile;
NOTE: Fileref SFILE has been deassigned.
MPRINT(SCORE):  ;
MPRINT(MAKEVAROPTCODE):   filename sfile "C:\Users\brahm\OneDrive\Desktop\BAN210_Project\Workspaces\EMWS1\Repl\REPLACECODE\REP_deg_malig.sas";
MPRINT(MAKEVAROPTCODE):   data _null_;
MPRINT(MAKEVAROPTCODE):   length string $400;
MPRINT(MAKEVAROPTCODE):   set EMWS1.Repl_LIMITS;
MPRINT(MAKEVAROPTCODE):   where NEWNAME="REP_deg_malig";
MPRINT(MAKEVAROPTCODE):   file sfile;
MPRINT(MAKEVAROPTCODE):   put '* ;';
MPRINT(MAKEVAROPTCODE):   string = '*Variable: '!!strip(name)!!';';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   put '* ;';
MPRINT(MAKEVAROPTCODE):   if label eq '' then string = 'Label '!!strip(newname)!!"= 'Replacement: "!!strip(name)!!"';";
MPRINT(MAKEVAROPTCODE):   else string = 'Label '!!strip(newname)!!"= 'Replacement: "!!strip(tranwrd(label, "'", "''"))!!"';";
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   string = strip(newname)!!'= '!!strip(NAME)!!';';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   replacemin = .;
MPRINT(MAKEVAROPTCODE):   string = 'if '!!strip(name)!!' eq . then '!!strip(newname)!!' = .;';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   if LowerLimit ne . then do;
MPRINT(MAKEVAROPTCODE):   if ReplaceMethodUsed="COMPUTED" then replaceMin=LowerLimit;
MPRINT(MAKEVAROPTCODE):   if ReplaceMethodUsed="MANUAL" then replaceMin = ReplaceMinUsed;
MPRINT(MAKEVAROPTCODE):   put 'else';
MPRINT(MAKEVAROPTCODE):   string = 'if '!!strip(name)!!'<'!!strip(put(lowerlimit,best.)) !!' then '!!strip(newname)!!'='!!strip(put(replaceMin,best.))!!';';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   end;
MPRINT(MAKEVAROPTCODE):   if UpperLimit ne . then do;
MPRINT(MAKEVAROPTCODE):   if ReplaceMethodUsed="COMPUTED" then replaceMax=UpperLimit;
MPRINT(MAKEVAROPTCODE):   if ReplaceMethodUsed="MANUAL" then replaceMax = ReplaceMaxUsed;
MPRINT(MAKEVAROPTCODE):   put 'else';
MPRINT(MAKEVAROPTCODE):   string = 'if '!!strip(name)!!'>'!!strip(put(upperlimit,best.)) !!' then '!!strip(newname)!!'='!!strip(put(replaceMax,best.))!!';';
MPRINT(MAKEVAROPTCODE):   put string;
MPRINT(MAKEVAROPTCODE):   end;
MPRINT(MAKEVAROPTCODE):   run;

NOTE: The file SFILE is:
      Filename=C:\Users\brahm\OneDrive\Desktop\BAN210_Project\Workspaces\EMWS1\Repl\REPLACECODE\REP_deg_malig.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=07Aug2022:19:13:32,
      Create Time=07Aug2022:19:13:32

NOTE: 10 records were written to the file SFILE.
      The minimum record length was 3.
      The maximum record length was 58.
NOTE: There were 1 observations read from the data set EMWS1.REPL_LIMITS.
      WHERE NEWNAME='REP_deg_malig';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEVAROPTCODE):   filename sfile;
NOTE: Fileref SFILE has been deassigned.
MPRINT(SCORE):  ;
MPRINT(MAKEVARDELTACODE):   filename _F1 "C:\Users\brahm\OneDrive\Desktop\BAN210_Project\Workspaces\EMWS1\Repl\CDELTA_TRAIN.sas";
MPRINT(MAKEVARDELTACODE):   data _null_;
MPRINT(MAKEVARDELTACODE):   set EMWS1.Repl_LIMITS end=eof;
MPRINT(MAKEVARDELTACODE):   length string $400;
MPRINT(MAKEVARDELTACODE):   file _F1;
MPRINT(MAKEVARDELTACODE):   string = 'if NAME="'!!strip(NAME)!!'" then do;';
MPRINT(MAKEVARDELTACODE):   put string;
MPRINT(MAKEVARDELTACODE):   string = '   ROLE="REJECTED";';
MPRINT(MAKEVARDELTACODE):   put string;
MPRINT(MAKEVARDELTACODE):   string = '   COMMENT= "Replaced by '!!"Repl"!!'";';
MPRINT(MAKEVARDELTACODE):   put string;
MPRINT(MAKEVARDELTACODE):   string = 'end;';
MPRINT(MAKEVARDELTACODE):   put string;
MPRINT(MAKEVARDELTACODE):   put 'else';
MPRINT(MAKEVARDELTACODE):   string = '   if NAME="'!!strip(NEWNAME)!!'" then do;';
MPRINT(MAKEVARDELTACODE):   put string;
MPRINT(MAKEVARDELTACODE):   string = '      ROLE="'!!strip(ROLE)!!'";';
MPRINT(MAKEVARDELTACODE):   put string;
MPRINT(MAKEVARDELTACODE):   string = '      LEVEL="'!!strip(LEVEL)!!'";';
MPRINT(MAKEVARDELTACODE):   put string;
MPRINT(MAKEVARDELTACODE):   put 'end;';
MPRINT(MAKEVARDELTACODE):   if ^eof then put 'else';
MPRINT(MAKEVARDELTACODE):   run;

NOTE: The file _F1 is:
      Filename=C:\Users\brahm\OneDrive\Desktop\BAN210_Project\Workspaces\EMWS1\Repl\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=07Aug2022:19:13:32,
      Create Time=07Aug2022:18:31:21

NOTE: 9 records were written to the file _F1.
      The minimum record length was 4.
      The maximum record length was 32.
NOTE: There were 1 observations read from the data set EMWS1.REPL_LIMITS.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEVARDELTACODE):   filename _F1;
NOTE: Fileref _F1 has been deassigned.
MPRINT(SCORE):  ;
MPRINT(SCORE):   proc print data=EMWS1.Repl_LIMITS label noobs;
MPRINT(SCORE):   var Name newname lowerLimit REPLACEMINUSED UpperLimit REPLACEMAXUSED;
MPRINT(SCORE):   label REPLACEMINUSED = "Lower Replacement Value" REPLACEMAXUSED = "Upper Replacement Value";
MPRINT(SCORE):   title9 ' ';
MPRINT(SCORE):   title10 "Limits and Replacement Values for Interval Variables";
MPRINT(SCORE):   run;
NOTE: There were 1 observations read from the data set EMWS1.REPL_LIMITS.
NOTE: The PROCEDURE PRINT printed page 5.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(SCORE):   title10;
MPRINT(EM_REGISTER):   data WORK.EM_USER_KEY;
MPRINT(EM_REGISTER):   set WORK.EM_USER_KEY end=eof;
MPRINT(EM_REGISTER):   output;
MPRINT(EM_REGISTER):   if eof then do;
MPRINT(EM_REGISTER):   key = upcase("REPLACECODE");
MPRINT(EM_REGISTER):   type = upcase("FOLDER");
MPRINT(EM_REGISTER):   file = "REPLACECODE";
MPRINT(EM_REGISTER):   folder = "";
MPRINT(EM_REGISTER):   extension = "";
MPRINT(EM_REGISTER):   AUTODELETE = "Y";
MPRINT(EM_REGISTER):   property = "N";
MPRINT(EM_REGISTER):   action = "";
MPRINT(EM_REGISTER):   output;
MPRINT(EM_REGISTER):   end;
MPRINT(EM_REGISTER):   run;

NOTE: There were 1 observations read from the data set WORK.EM_USER_KEY.
NOTE: The data set WORK.EM_USER_KEY has 2 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKECLASSSCORECODE):  ;
MPRINT(MAKENEWVARCODE):   filename _F1 "C:\Users\brahm\OneDrive\Desktop\BAN210_Project\Workspaces\EMWS1\Repl\EMFLOWSCORE.sas" MOD;
MPRINT(MAKENEWVARCODE):   data _null_;
MPRINT(MAKENEWVARCODE):   length string $400;
MPRINT(MAKENEWVARCODE):   set EMWS1.Repl_CLASSINFO end=eof;
MPRINT(MAKENEWVARCODE):   file _F1;
MPRINT(MAKENEWVARCODE):   if _N_=1 then do;
MPRINT(MAKENEWVARCODE):   put '   ';
MPRINT(MAKENEWVARCODE):   put '* ;';
MPRINT(MAKENEWVARCODE):   put '* Defining New Variables;';
MPRINT(MAKENEWVARCODE):   put '* ;';
MPRINT(MAKENEWVARCODE):   end;
MPRINT(MAKENEWVARCODE):   if type eq 'C' then do;
MPRINT(MAKENEWVARCODE):   string = 'Length '!!strip(newname)!!' $'!!strip(put(length,BEST12.))!!';';
MPRINT(MAKENEWVARCODE):   put string;
MPRINT(MAKENEWVARCODE):   end;
MPRINT(MAKENEWVARCODE):   if strip(label) = '' then label = name;
MPRINT(MAKENEWVARCODE):   string= 'Label '!!strip(newname)!!"='Replacement: "!!strip(tranwrd(label, "'","''"))!!"';";
MPRINT(MAKENEWVARCODE):   put string;
MPRINT(MAKENEWVARCODE):   if format ne '' then do;
MPRINT(MAKENEWVARCODE):   string ='format '!!strip(newname)!!' '!!strip(format)!!';';
MPRINT(MAKENEWVARCODE):   put string;
MPRINT(MAKENEWVARCODE):   end;
MPRINT(MAKENEWVARCODE):   string = strip(newname)!!'= '!!strip(NAME)!!';';
MPRINT(MAKENEWVARCODE):   put string;
MPRINT(MAKENEWVARCODE):   run;

NOTE: The file _F1 is:
      Filename=C:\Users\brahm\OneDrive\Desktop\BAN210_Project\Workspaces\EMWS1\Repl\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=299,
      Last Modified=07Aug2022:19:13:32,
      Create Time=07Aug2022:18:31:21

NOTE: 0 records were written to the file _F1.
NOTE: There were 0 observations read from the data set EMWS1.REPL_CLASSINFO.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKECLASSSCORECODE):  ;
MPRINT(MAKECLASSSCORECODE):   data _tempNewVars;
MPRINT(MAKECLASSSCORECODE):   set EMWS1.Repl_CLASSINFO;
MPRINT(MAKECLASSSCORECODE):   where ROLE ne 'TARGET';
MPRINT(MAKECLASSSCORECODE):   run;

NOTE: There were 0 observations read from the data set EMWS1.REPL_CLASSINFO.
      WHERE ROLE not = 'TARGET';
NOTE: The data set WORK._TEMPNEWVARS has 0 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKENEWVARCODE):   filename _F1 "C:\Users\brahm\OneDrive\Desktop\BAN210_Project\Workspaces\EMWS1\Repl\EMPUBLISHSCORE.sas" MOD;
MPRINT(MAKENEWVARCODE):   data _null_;
MPRINT(MAKENEWVARCODE):   length string $400;
MPRINT(MAKENEWVARCODE):   set _tempNewVars end=eof;
MPRINT(MAKENEWVARCODE):   file _F1;
MPRINT(MAKENEWVARCODE):   if _N_=1 then do;
MPRINT(MAKENEWVARCODE):   put '   ';
MPRINT(MAKENEWVARCODE):   put '* ;';
MPRINT(MAKENEWVARCODE):   put '* Defining New Variables;';
MPRINT(MAKENEWVARCODE):   put '* ;';
MPRINT(MAKENEWVARCODE):   end;
MPRINT(MAKENEWVARCODE):   if type eq 'C' then do;
MPRINT(MAKENEWVARCODE):   string = 'Length '!!strip(newname)!!' $'!!strip(put(length,BEST12.))!!';';
MPRINT(MAKENEWVARCODE):   put string;
MPRINT(MAKENEWVARCODE):   end;
MPRINT(MAKENEWVARCODE):   if strip(label) = '' then label = name;
MPRINT(MAKENEWVARCODE):   string= 'Label '!!strip(newname)!!"='Replacement: "!!strip(tranwrd(label, "'","''"))!!"';";
MPRINT(MAKENEWVARCODE):   put string;
MPRINT(MAKENEWVARCODE):   if format ne '' then do;
MPRINT(MAKENEWVARCODE):   string ='format '!!strip(newname)!!' '!!strip(format)!!';';
MPRINT(MAKENEWVARCODE):   put string;
MPRINT(MAKENEWVARCODE):   end;
MPRINT(MAKENEWVARCODE):   string = strip(newname)!!'= '!!strip(NAME)!!';';
MPRINT(MAKENEWVARCODE):   put string;
MPRINT(MAKENEWVARCODE):   run;

NOTE: The file _F1 is:
      Filename=C:\Users\brahm\OneDrive\Desktop\BAN210_Project\Workspaces\EMWS1\Repl\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=299,
      Last Modified=07Aug2022:19:13:32,
      Create Time=07Aug2022:18:31:21

NOTE: 0 records were written to the file _F1.
NOTE: There were 0 observations read from the data set WORK._TEMPNEWVARS.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKECLASSSCORECODE):  ;
MPRINT(MAKENEWVAROPTCODE):   data _temp_;
MPRINT(MAKENEWVAROPTCODE):  set _tempNewVars;
MPRINT(MAKENEWVAROPTCODE):  run;

NOTE: There were 0 observations read from the data set WORK._TEMPNEWVARS.
NOTE: The data set WORK._TEMP_ has 0 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKECLASSSCORECODE):  ;
MPRINT(MAKECLASSSCORECODE):   proc datasets lib=WORK nolist;
MPRINT(MAKECLASSSCORECODE):   delete _tempNewVars;
MPRINT(MAKECLASSSCORECODE):   run;
NOTE: Deleting WORK._TEMPNEWVARS (memtype=DATA).
MPRINT(MAKECLASSSCORECODE):   quit;
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKECLASSSCORECODE):   data _temp;
MPRINT(MAKECLASSSCORECODE):   set CLASSTEMP;
MPRINT(MAKECLASSSCORECODE):   where ROLE ne 'TARGET' and LEVEL='_UNKNOWN_' and (REPLACE_VALUE ^in('', '_DEFAULT_') or (REPLACE_VALUE='_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE'));
MPRINT(MAKECLASSSCORECODE):   keep NAME;
MPRINT(MAKECLASSSCORECODE):   run;

NOTE: There were 0 observations read from the data set WORK.CLASSTEMP.
      WHERE (ROLE not = 'TARGET') and (LEVEL='_UNKNOWN_') and (REPLACE_VALUE not in (' ', '_DEFAULT_') or ((REPLACE_VALUE='_DEFAULT_') and (UNKWOWNDEFAULT not = 'NONE')));
NOTE: The data set WORK._TEMP has 0 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKECLASSSCORECODE):   data _temp;
MPRINT(MAKECLASSSCORECODE):   merge _temp(in=_a) CLASSTEMP EMWS1.Repl_CLASSINFO;
MPRINT(MAKECLASSSCORECODE):   by NAME;
MPRINT(MAKECLASSSCORECODE):   if _a then output;
MPRINT(MAKECLASSSCORECODE):   run;

NOTE: There were 0 observations read from the data set WORK._TEMP.
NOTE: There were 51 observations read from the data set WORK.CLASSTEMP.
NOTE: There were 0 observations read from the data set EMWS1.REPL_CLASSINFO.
NOTE: The data set WORK._TEMP has 0 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEUNKNOWNCODE):   filename _F1 "C:\Users\brahm\OneDrive\Desktop\BAN210_Project\Workspaces\EMWS1\Repl\EMPUBLISHSCORE.sas" MOD;
MPRINT(MAKEUNKNOWNCODE):   data _null_;
MPRINT(MAKEUNKNOWNCODE):   set _temp;
MPRINT(MAKEUNKNOWNCODE):   length string $400;
MPRINT(MAKEUNKNOWNCODE):   length newlevel replaceLevel $200;
MPRINT(MAKEUNKNOWNCODE):   retain string missingFlag;
MPRINT(MAKEUNKNOWNCODE):   file _F1;
MPRINT(MAKEUNKNOWNCODE):   by NAME;
MPRINT(MAKEUNKNOWNCODE):   if _N_=1 then do;
MPRINT(MAKEUNKNOWNCODE):   put '* ;';
MPRINT(MAKEUNKNOWNCODE):   put '* Replace Unknown Class Levels ;';
MPRINT(MAKEUNKNOWNCODE):   put '* ;';
MPRINT(MAKEUNKNOWNCODE):   put 'length _UFORMAT200 $200;';
MPRINT(MAKEUNKNOWNCODE):   put 'drop   _UFORMAT200;';
MPRINT(MAKEUNKNOWNCODE):   put '_UFORMAT200 = " ";';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   if first.name then do;
MPRINT(MAKEUNKNOWNCODE):   missingFlag = 0;
MPRINT(MAKEUNKNOWNCODE):   put '*;';
MPRINT(MAKEUNKNOWNCODE):   if format ne '' then do;
MPRINT(MAKEUNKNOWNCODE):   call symput('UFormatFlag', '1');
MPRINT(MAKEUNKNOWNCODE):   string = '_UFORMAT200 = '!!'strip(put('!!strip(NAME)!!','!!strip(format)!!'));';
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   put 'if ^(_UFORMAT200 in(';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else do;
MPRINT(MAKEUNKNOWNCODE):   if type eq 'C' then do;
MPRINT(MAKEUNKNOWNCODE):   call symput('UFormatFlag', '1');
MPRINT(MAKEUNKNOWNCODE):   string = '_UFORMAT200 = '!!'strip('!!strip(NAME)!!');';
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   put 'if ^(_UFORMAT200 in(';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else put 'if (';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   string='';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   if ^last.name and LEVEL ne '_UNKNOWN_' then do;
MPRINT(MAKEUNKNOWNCODE):   if format ne '' or type eq 'C' then do;
MPRINT(MAKEUNKNOWNCODE):   newlevel = tranwrd(strip(LEVEL),'"','""');
MPRINT(MAKEUNKNOWNCODE):   if strip(newLevel) = '' then missingFlag = 1;
MPRINT(MAKEUNKNOWNCODE):   if length(strip(newlevel))+length(strip(string))+4<80 then do;
MPRINT(MAKEUNKNOWNCODE):   if string='' then string = strip(string)!!' "'!!strip(newlevel)!!'" ';
MPRINT(MAKEUNKNOWNCODE):   else string = strip(string)!!', "'!!strip(newlevel)!!'" ';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else do;
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   string =', "'!!tranwrd(strip(LEVEL),'"','""')!!'"';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else do;
MPRINT(MAKEUNKNOWNCODE):   string = strip(name)!!' ne '!!strip(level)!!' and ';
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   newlevel = ' ';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else do;
MPRINT(MAKEUNKNOWNCODE):   if format ne '' or type eq 'C' then do;
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   if ^missingFlag then string = ', "" )) then ';
MPRINT(MAKEUNKNOWNCODE):   else string = ')) then ';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else string = strip(name)!!' ne . ) then ';
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   select(REPLACE_VALUE);
MPRINT(MAKEUNKNOWNCODE):   when('_MODE_') do;
MPRINT(MAKEUNKNOWNCODE):   if type eq 'C' then replaceLevel = NORMMODE;
MPRINT(MAKEUNKNOWNCODE):   else replaceLevel =strip(put(MODEN,BEST.));
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   when('_MISSING_') do;
MPRINT(MAKEUNKNOWNCODE):   if type eq 'C' then replaceLevel = '';
MPRINT(MAKEUNKNOWNCODE):   else replaceLevel = '.';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   when('_DEFAULT_') do;
MPRINT(MAKEUNKNOWNCODE):   if type eq 'C' then replaceLevel = '';
MPRINT(MAKEUNKNOWNCODE):   else replaceLevel = '.';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   when('') do;
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   otherwise do;
MPRINT(MAKEUNKNOWNCODE):   if type eq 'C' then replaceLevel= replace_Value;
MPRINT(MAKEUNKNOWNCODE):   else replaceLevel = replace_Value;
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   if type eq 'C' then do;
MPRINT(MAKEUNKNOWNCODE):   string = strip(newname)!!'= "'!!tranwrd(strip(replaceLevel),'"','""')!!'";';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else do;
MPRINT(MAKEUNKNOWNCODE):   string = strip(newname)!!'= '!!strip(replaceLevel)!!';';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   run;

NOTE: The file _F1 is:
      Filename=C:\Users\brahm\OneDrive\Desktop\BAN210_Project\Workspaces\EMWS1\Repl\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=299,
      Last Modified=07Aug2022:19:13:32,
      Create Time=07Aug2022:18:31:21

NOTE: 0 records were written to the file _F1.
NOTE: There were 0 observations read from the data set WORK._TEMP.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEUNKNOWNCODE):   filename _F1;
NOTE: Fileref _F1 has been deassigned.
MPRINT(MAKECLASSSCORECODE):  ;
MPRINT(MAKECLASSSCORECODE):  ;
MPRINT(MAKECLASSSCORECODE):   proc datasets lib=work nolist;
MPRINT(MAKECLASSSCORECODE):   delete _temp;
MPRINT(MAKECLASSSCORECODE):   run;

NOTE: Deleting WORK._TEMP (memtype=DATA).
MPRINT(MAKECLASSSCORECODE):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKECLASSSCORECODE):   data _temp;
MPRINT(MAKECLASSSCORECODE):   merge CLASSTEMP(in=_a where=( ROLE ne 'TARGET' and LEVEL ne '_UNKNOWN_' and (REPLACE_VALUE ^in('', '_DEFAULT_') or (REPLACE_VALUE='_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE')) )) EMWS1.Repl_CLASSINFO;
MPRINT(MAKECLASSSCORECODE):   by NAME;
MPRINT(MAKECLASSSCORECODE):   if _a then output;
MPRINT(MAKECLASSSCORECODE):   run;

NOTE: There were 0 observations read from the data set WORK.CLASSTEMP.
      WHERE (ROLE not = 'TARGET') and (LEVEL not = '_UNKNOWN_') and (REPLACE_VALUE not in (' ', '_DEFAULT_') or ((REPLACE_VALUE='_DEFAULT_') and (UNKWOWNDEFAULT not = 'NONE')));
NOTE: There were 0 observations read from the data set EMWS1.REPL_CLASSINFO.
NOTE: The data set WORK._TEMP has 0 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEREPLACECODE):   filename _F1 "C:\Users\brahm\OneDrive\Desktop\BAN210_Project\Workspaces\EMWS1\Repl\EMPUBLISHSCORE.sas" MOD;
MPRINT(MAKEREPLACECODE):   data _null_;
MPRINT(MAKEREPLACECODE):   length string $400;
MPRINT(MAKEREPLACECODE):   set _temp end=eof;
MPRINT(MAKEREPLACECODE):   file _F1;
MPRINT(MAKEREPLACECODE):   by NAME;
MPRINT(MAKEREPLACECODE):   if _N_=1 then do;
MPRINT(MAKEREPLACECODE):   put '   ';
MPRINT(MAKEREPLACECODE):   put '* ;';
MPRINT(MAKEREPLACECODE):   put '* Replace Specific Class Levels ;';
MPRINT(MAKEREPLACECODE):   put '* ;';
MPRINT(MAKEREPLACECODE):   put 'length _UFormat200 $200;';
MPRINT(MAKEREPLACECODE):   put 'drop   _UFORMAT200;';
MPRINT(MAKEREPLACECODE):   put '_UFORMAT200 = " ";';
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   if first.name then do;
MPRINT(MAKEREPLACECODE):   put '* ;';
MPRINT(MAKEREPLACECODE):   string = '* Variable: '!!strip(NAME)!!';';
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   put '* ;';
MPRINT(MAKEREPLACECODE):   if format ne '' then do;
MPRINT(MAKEREPLACECODE):   call symput('UFormatFlag', '1');
MPRINT(MAKEREPLACECODE):   string = "_UFORMAT200 = strip(";
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   string ='put('!!strip(NAME)!!','!!strip(format)!!'));';
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   else if type eq 'C' then do;
MPRINT(MAKEREPLACECODE):   call symput('UFormatFlag', '1');
MPRINT(MAKEREPLACECODE):   string = "_UFORMAT200 = strip("!!strip(NAME)!!');';
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   if ^first.name then put 'else';
MPRINT(MAKEREPLACECODE):   if format ne '' then do;
MPRINT(MAKEREPLACECODE):   string = tranwrd(strip(LEVEL),'"','""');
MPRINT(MAKEREPLACECODE):   string =' if _UFORMAT200 =  "'!!strip(string)!!'" then ';
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   else do;
MPRINT(MAKEREPLACECODE):   if type eq 'N' then do;
MPRINT(MAKEREPLACECODE):   string = 'if '!!strip(name)!!' = '!!strip(put(nraw, BEST.))!!' then ';
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   else do;
MPRINT(MAKEREPLACECODE):   string = tranwrd(strip(craw),'"','""');
MPRINT(MAKEREPLACECODE):   string = ' if _UFORMAT200 =  "'!!strip(string)!!'" then ';
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   string = strip(newname)!!'=';
MPRINT(MAKEREPLACECODE):   if type eq 'C' then do;
MPRINT(MAKEREPLACECODE):   if upcase(replace_value) eq '_MISSING_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT)= 'MISSING')) then replace_Value ='';
MPRINT(MAKEREPLACECODE):   else if upcase(replace_value) eq '_MODE_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT)= 'MODE')) then replace_Value =modec;
MPRINT(MAKEREPLACECODE):   string = strip(string)!!'"'!!tranwrd(strip(replace_Value),'"','""')!!'";';
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   else do;
MPRINT(MAKEREPLACECODE):   if upcase(replace_value) eq '_MISSING_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT) = 'MISSING')) then replace_Value ='.';
MPRINT(MAKEREPLACECODE):   else if upcase(replace_value) eq '_MODE_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT) = 'MODE')) then replace_Value =strip(put(moden, BEST.));
MPRINT(MAKEREPLACECODE):   string = strip(string)!!''!!strip(replace_value)!!';';
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   run;

NOTE: The file _F1 is:
      Filename=C:\Users\brahm\OneDrive\Desktop\BAN210_Project\Workspaces\EMWS1\Repl\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=299,
      Last Modified=07Aug2022:19:13:32,
      Create Time=07Aug2022:18:31:21

NOTE: 0 records were written to the file _F1.
NOTE: There were 0 observations read from the data set WORK._TEMP.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEREPLACECODE):   filename _F1;
NOTE: Fileref _F1 has been deassigned.
MPRINT(MAKECLASSSCORECODE):  ;
MPRINT(MAKECLASSSCORECODE):  ;
MPRINT(MAKECLASSSCORECODE):   data _temp;
MPRINT(MAKECLASSSCORECODE):   set CLASSTEMP;
MPRINT(MAKECLASSSCORECODE):   where LEVEL='_UNKNOWN_' and (REPLACE_VALUE ^in('', '_DEFAULT_') or (REPLACE_VALUE='_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE'));
MPRINT(MAKECLASSSCORECODE):   keep NAME;
MPRINT(MAKECLASSSCORECODE):   run;

NOTE: There were 0 observations read from the data set WORK.CLASSTEMP.
      WHERE (LEVEL='_UNKNOWN_') and (REPLACE_VALUE not in (' ', '_DEFAULT_') or ((REPLACE_VALUE='_DEFAULT_') and (UNKWOWNDEFAULT not = 'NONE')));
NOTE: The data set WORK._TEMP has 0 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKECLASSSCORECODE):   data _temp;
MPRINT(MAKECLASSSCORECODE):   merge _temp(in=_a) CLASSTEMP EMWS1.Repl_CLASSINFO;
MPRINT(MAKECLASSSCORECODE):   by NAME;
MPRINT(MAKECLASSSCORECODE):   if _a then output;
MPRINT(MAKECLASSSCORECODE):   run;

NOTE: There were 0 observations read from the data set WORK._TEMP.
NOTE: There were 51 observations read from the data set WORK.CLASSTEMP.
NOTE: There were 0 observations read from the data set EMWS1.REPL_CLASSINFO.
NOTE: The data set WORK._TEMP has 0 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEUNKNOWNCODE):   filename _F1 "C:\Users\brahm\OneDrive\Desktop\BAN210_Project\Workspaces\EMWS1\Repl\EMFLOWSCORE.sas" MOD;
MPRINT(MAKEUNKNOWNCODE):   data _null_;
MPRINT(MAKEUNKNOWNCODE):   set _temp;
MPRINT(MAKEUNKNOWNCODE):   length string $400;
MPRINT(MAKEUNKNOWNCODE):   length newlevel replaceLevel $200;
MPRINT(MAKEUNKNOWNCODE):   retain string missingFlag;
MPRINT(MAKEUNKNOWNCODE):   file _F1;
MPRINT(MAKEUNKNOWNCODE):   by NAME;
MPRINT(MAKEUNKNOWNCODE):   if _N_=1 then do;
MPRINT(MAKEUNKNOWNCODE):   put '* ;';
MPRINT(MAKEUNKNOWNCODE):   put '* Replace Unknown Class Levels ;';
MPRINT(MAKEUNKNOWNCODE):   put '* ;';
MPRINT(MAKEUNKNOWNCODE):   put 'length _UFORMAT200 $200;';
MPRINT(MAKEUNKNOWNCODE):   put 'drop   _UFORMAT200;';
MPRINT(MAKEUNKNOWNCODE):   put '_UFORMAT200 = " ";';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   if first.name then do;
MPRINT(MAKEUNKNOWNCODE):   missingFlag = 0;
MPRINT(MAKEUNKNOWNCODE):   put '*;';
MPRINT(MAKEUNKNOWNCODE):   if format ne '' then do;
MPRINT(MAKEUNKNOWNCODE):   call symput('UFormatFlag', '1');
MPRINT(MAKEUNKNOWNCODE):   string = '_UFORMAT200 = '!!'strip(put('!!strip(NAME)!!','!!strip(format)!!'));';
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   put 'if ^(_UFORMAT200 in(';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else do;
MPRINT(MAKEUNKNOWNCODE):   if type eq 'C' then do;
MPRINT(MAKEUNKNOWNCODE):   call symput('UFormatFlag', '1');
MPRINT(MAKEUNKNOWNCODE):   string = '_UFORMAT200 = '!!'strip('!!strip(NAME)!!');';
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   put 'if ^(_UFORMAT200 in(';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else put 'if (';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   string='';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   if ^last.name and LEVEL ne '_UNKNOWN_' then do;
MPRINT(MAKEUNKNOWNCODE):   if format ne '' or type eq 'C' then do;
MPRINT(MAKEUNKNOWNCODE):   newlevel = tranwrd(strip(LEVEL),'"','""');
MPRINT(MAKEUNKNOWNCODE):   if strip(newLevel) = '' then missingFlag = 1;
MPRINT(MAKEUNKNOWNCODE):   if length(strip(newlevel))+length(strip(string))+4<80 then do;
MPRINT(MAKEUNKNOWNCODE):   if string='' then string = strip(string)!!' "'!!strip(newlevel)!!'" ';
MPRINT(MAKEUNKNOWNCODE):   else string = strip(string)!!', "'!!strip(newlevel)!!'" ';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else do;
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   string =', "'!!tranwrd(strip(LEVEL),'"','""')!!'"';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else do;
MPRINT(MAKEUNKNOWNCODE):   string = strip(name)!!' ne '!!strip(level)!!' and ';
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   newlevel = ' ';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else do;
MPRINT(MAKEUNKNOWNCODE):   if format ne '' or type eq 'C' then do;
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   if ^missingFlag then string = ', "" )) then ';
MPRINT(MAKEUNKNOWNCODE):   else string = ')) then ';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else string = strip(name)!!' ne . ) then ';
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   select(REPLACE_VALUE);
MPRINT(MAKEUNKNOWNCODE):   when('_MODE_') do;
MPRINT(MAKEUNKNOWNCODE):   if type eq 'C' then replaceLevel = NORMMODE;
MPRINT(MAKEUNKNOWNCODE):   else replaceLevel =strip(put(MODEN,BEST.));
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   when('_MISSING_') do;
MPRINT(MAKEUNKNOWNCODE):   if type eq 'C' then replaceLevel = '';
MPRINT(MAKEUNKNOWNCODE):   else replaceLevel = '.';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   when('_DEFAULT_') do;
MPRINT(MAKEUNKNOWNCODE):   if type eq 'C' then replaceLevel = '';
MPRINT(MAKEUNKNOWNCODE):   else replaceLevel = '.';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   when('') do;
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   otherwise do;
MPRINT(MAKEUNKNOWNCODE):   if type eq 'C' then replaceLevel= replace_Value;
MPRINT(MAKEUNKNOWNCODE):   else replaceLevel = replace_Value;
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   if type eq 'C' then do;
MPRINT(MAKEUNKNOWNCODE):   string = strip(newname)!!'= "'!!tranwrd(strip(replaceLevel),'"','""')!!'";';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   else do;
MPRINT(MAKEUNKNOWNCODE):   string = strip(newname)!!'= '!!strip(replaceLevel)!!';';
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   put string;
MPRINT(MAKEUNKNOWNCODE):   end;
MPRINT(MAKEUNKNOWNCODE):   run;

NOTE: The file _F1 is:
      Filename=C:\Users\brahm\OneDrive\Desktop\BAN210_Project\Workspaces\EMWS1\Repl\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=299,
      Last Modified=07Aug2022:19:13:32,
      Create Time=07Aug2022:18:31:21

NOTE: 0 records were written to the file _F1.
NOTE: There were 0 observations read from the data set WORK._TEMP.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKEUNKNOWNCODE):   filename _F1;
NOTE: Fileref _F1 has been deassigned.
MPRINT(MAKECLASSSCORECODE):  ;
MPRINT(MAKECLASSSCORECODE):   data _temp;
MPRINT(MAKECLASSSCORECODE):   merge CLASSTEMP(in=_a where=(LEVEL ne '_UNKNOWN_' and (REPLACE_VALUE ^in('', '_DEFAULT_') or (REPLACE_VALUE='_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE')) )) EMWS1.Repl_CLASSINFO;
MPRINT(MAKECLASSSCORECODE):   by NAME;
MPRINT(MAKECLASSSCORECODE):   if _a then output;
MPRINT(MAKECLASSSCORECODE):   run;

NOTE: There were 0 observations read from the data set WORK.CLASSTEMP.
      WHERE (LEVEL not = '_UNKNOWN_') and (REPLACE_VALUE not in (' ', '_DEFAULT_') or ((REPLACE_VALUE='_DEFAULT_') and (UNKWOWNDEFAULT not = 'NONE')));
NOTE: There were 0 observations read from the data set EMWS1.REPL_CLASSINFO.
NOTE: The data set WORK._TEMP has 0 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEREPLACECODE):   filename _F1 "C:\Users\brahm\OneDrive\Desktop\BAN210_Project\Workspaces\EMWS1\Repl\EMFLOWSCORE.sas" MOD;
MPRINT(MAKEREPLACECODE):   data _null_;
MPRINT(MAKEREPLACECODE):   length string $400;
MPRINT(MAKEREPLACECODE):   set _temp end=eof;
MPRINT(MAKEREPLACECODE):   file _F1;
MPRINT(MAKEREPLACECODE):   by NAME;
MPRINT(MAKEREPLACECODE):   if _N_=1 then do;
MPRINT(MAKEREPLACECODE):   put '   ';
MPRINT(MAKEREPLACECODE):   put '* ;';
MPRINT(MAKEREPLACECODE):   put '* Replace Specific Class Levels ;';
MPRINT(MAKEREPLACECODE):   put '* ;';
MPRINT(MAKEREPLACECODE):   put 'length _UFormat200 $200;';
MPRINT(MAKEREPLACECODE):   put 'drop   _UFORMAT200;';
MPRINT(MAKEREPLACECODE):   put '_UFORMAT200 = " ";';
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   if first.name then do;
MPRINT(MAKEREPLACECODE):   put '* ;';
MPRINT(MAKEREPLACECODE):   string = '* Variable: '!!strip(NAME)!!';';
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   put '* ;';
MPRINT(MAKEREPLACECODE):   if format ne '' then do;
MPRINT(MAKEREPLACECODE):   call symput('UFormatFlag', '1');
MPRINT(MAKEREPLACECODE):   string = "_UFORMAT200 = strip(";
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   string ='put('!!strip(NAME)!!','!!strip(format)!!'));';
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   else if type eq 'C' then do;
MPRINT(MAKEREPLACECODE):   call symput('UFormatFlag', '1');
MPRINT(MAKEREPLACECODE):   string = "_UFORMAT200 = strip("!!strip(NAME)!!');';
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   if ^first.name then put 'else';
MPRINT(MAKEREPLACECODE):   if format ne '' then do;
MPRINT(MAKEREPLACECODE):   string = tranwrd(strip(LEVEL),'"','""');
MPRINT(MAKEREPLACECODE):   string =' if _UFORMAT200 =  "'!!strip(string)!!'" then ';
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   else do;
MPRINT(MAKEREPLACECODE):   if type eq 'N' then do;
MPRINT(MAKEREPLACECODE):   string = 'if '!!strip(name)!!' = '!!strip(put(nraw, BEST.))!!' then ';
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   else do;
MPRINT(MAKEREPLACECODE):   string = tranwrd(strip(craw),'"','""');
MPRINT(MAKEREPLACECODE):   string = ' if _UFORMAT200 =  "'!!strip(string)!!'" then ';
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   string = strip(newname)!!'=';
MPRINT(MAKEREPLACECODE):   if type eq 'C' then do;
MPRINT(MAKEREPLACECODE):   if upcase(replace_value) eq '_MISSING_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT)= 'MISSING')) then replace_Value ='';
MPRINT(MAKEREPLACECODE):   else if upcase(replace_value) eq '_MODE_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT)= 'MODE')) then replace_Value =modec;
MPRINT(MAKEREPLACECODE):   string = strip(string)!!'"'!!tranwrd(strip(replace_Value),'"','""')!!'";';
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   else do;
MPRINT(MAKEREPLACECODE):   if upcase(replace_value) eq '_MISSING_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT) = 'MISSING')) then replace_Value ='.';
MPRINT(MAKEREPLACECODE):   else if upcase(replace_value) eq '_MODE_' or (upcase(replace_value) eq '_DEFAULT_' and (upcase(UNKWOWNDEFAULT) = 'MODE')) then replace_Value =strip(put(moden, BEST.));
MPRINT(MAKEREPLACECODE):   string = strip(string)!!''!!strip(replace_value)!!';';
MPRINT(MAKEREPLACECODE):   end;
MPRINT(MAKEREPLACECODE):   put string;
MPRINT(MAKEREPLACECODE):   run;

NOTE: The file _F1 is:
      Filename=C:\Users\brahm\OneDrive\Desktop\BAN210_Project\Workspaces\EMWS1\Repl\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=299,
      Last Modified=07Aug2022:19:13:32,
      Create Time=07Aug2022:18:31:21

NOTE: 0 records were written to the file _F1.
NOTE: There were 0 observations read from the data set WORK._TEMP.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(MAKEREPLACECODE):   filename _F1;
NOTE: Fileref _F1 has been deassigned.
MPRINT(MAKECLASSSCORECODE):  ;
MPRINT(SCORE):  ;
MPRINT(MAKECLASSDELTACODE):   filename _F1 "C:\Users\brahm\OneDrive\Desktop\BAN210_Project\Workspaces\EMWS1\Repl\CDELTA_TRAIN.sas" MOD;
MPRINT(MAKECLASSDELTACODE):   data _null_;
MPRINT(MAKECLASSDELTACODE):   set EMWS1.Repl_CLASSINFO end=eof;
MPRINT(MAKECLASSDELTACODE):   length string $400;
MPRINT(MAKECLASSDELTACODE):   file _F1;
MPRINT(MAKECLASSDELTACODE):   string = 'if NAME="'!!strip(NAME)!!'" then ROLE="REJECTED";';
MPRINT(MAKECLASSDELTACODE):   put string;
MPRINT(MAKECLASSDELTACODE):   put 'else';
MPRINT(MAKECLASSDELTACODE):   string = '   if NAME="'!!strip(NEWNAME)!!'" then do;';
MPRINT(MAKECLASSDELTACODE):   put string;
MPRINT(MAKECLASSDELTACODE):   string = '      ROLE="'!!strip(ROLE)!!'";';
MPRINT(MAKECLASSDELTACODE):   put string;
MPRINT(MAKECLASSDELTACODE):   string = '      LEVEL="'!!strip(MLEVEL)!!'";';
MPRINT(MAKECLASSDELTACODE):   put string;
MPRINT(MAKECLASSDELTACODE):   put 'end;';
MPRINT(MAKECLASSDELTACODE):   if ^eof then put 'else';
MPRINT(MAKECLASSDELTACODE):   run;

NOTE: The file _F1 is:
      Filename=C:\Users\brahm\OneDrive\Desktop\BAN210_Project\Workspaces\EMWS1\Repl\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=164,
      Last Modified=07Aug2022:19:13:32,
      Create Time=07Aug2022:18:31:21

NOTE: 0 records were written to the file _F1.
NOTE: There were 0 observations read from the data set EMWS1.REPL_CLASSINFO.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAKECLASSDELTACODE):   filename _F1;
NOTE: Fileref _F1 has been deassigned.
MPRINT(SCORE):  ;
MPRINT(SCORE):  ;
MPRINT(MAKEVALUEREPORT):   data EMWS1.Repl_VALUES;
MPRINT(MAKEVALUEREPORT):   set CLASSTEMP;
MPRINT(MAKEVALUEREPORT):   where REPLACE_VALUE ^in('', '_DEFAULT_') or (REPLACE_VALUE eq '_DEFAULT_' and UNKWOWNDEFAULT ne 'NONE');
MPRINT(MAKEVALUEREPORT):   if LEVEL = '_UNKNOWN_' then do;
MPRINT(MAKEVALUEREPORT):   LEVEL='Unknown';
MPRINT(MAKEVALUEREPORT):   if REPLACE_VALUE = '_MODE_' then REPLACE_VALUE = strip(NORMMODE);
MPRINT(MAKEVALUEREPORT):   else if REPLACE_VALUE in('_MISSING_', '_DEFAULT_') then do;
MPRINT(MAKEVALUEREPORT):   if type eq 'N' then REPLACE_VALUE='.';
MPRINT(MAKEVALUEREPORT):   else REPLACE_VALUE='_blank_';
MPRINT(MAKEVALUEREPORT):   end;
MPRINT(MAKEVALUEREPORT):   end;
MPRINT(MAKEVALUEREPORT):   else do;
MPRINT(MAKEVALUEREPORT):   if REPLACE_VALUE ='_MISSING_' then do;
MPRINT(MAKEVALUEREPORT):   if type eq 'N' then REPLACE_VALUE='.';
MPRINT(MAKEVALUEREPORT):   else REPLACE_VALUE='_blank_';
MPRINT(MAKEVALUEREPORT):   end;
MPRINT(MAKEVALUEREPORT):   else if REPLACE_VALUE = '_MODE_' then REPLACE_VALUE = strip(NORMMODE);
MPRINT(MAKEVALUEREPORT):   end;
MPRINT(MAKEVALUEREPORT):   keep NAME LEVEL CRAW NRAW REPLACE_VALUE TYPE LABEL ;
MPRINT(MAKEVALUEREPORT):   run;

NOTE: There were 0 observations read from the data set WORK.CLASSTEMP.
      WHERE REPLACE_VALUE not in (' ', '_DEFAULT_') or ((REPLACE_VALUE='_DEFAULT_') and (UNKWOWNDEFAULT not = 'NONE'));
NOTE: The data set EMWS1.REPL_VALUES has 0 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SCORE):  ;
MPRINT(SCORE):   proc print data=EMWS1.Repl_VALUES label noobs;
MPRINT(SCORE):   title9 ' ';
MPRINT(SCORE):   title10 "Replacement Values for Class Variables";
MPRINT(SCORE):   run;
NOTE: No observations in data set EMWS1.REPL_VALUES.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(SCORE):   title10;
MPRINT(SCORE):   proc datasets lib=work nolist;
MPRINT(SCORE):   delete CLASSTEMP;
MPRINT(SCORE):   run;

NOTE: Deleting WORK.CLASSTEMP (memtype=DATA).
MPRINT(SCORE):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_REGISTER):   data WORK.EM_USER_KEY;
MPRINT(EM_REGISTER):   set WORK.EM_USER_KEY end=eof;
MPRINT(EM_REGISTER):   output;
MPRINT(EM_REGISTER):   if eof then do;
MPRINT(EM_REGISTER):   key = upcase("EMSCOREVAR");
MPRINT(EM_REGISTER):   type = upcase("DATA");
MPRINT(EM_REGISTER):   file = "Repl_EMSCOREVAR";
MPRINT(EM_REGISTER):   folder = "";
MPRINT(EM_REGISTER):   extension = "";
MPRINT(EM_REGISTER):   AUTODELETE = "Y";
MPRINT(EM_REGISTER):   property = "N";
MPRINT(EM_REGISTER):   action = "";
MPRINT(EM_REGISTER):   output;
MPRINT(EM_REGISTER):   end;
MPRINT(EM_REGISTER):   run;

NOTE: There were 2 observations read from the data set WORK.EM_USER_KEY.
NOTE: The data set WORK.EM_USER_KEY has 3 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(SCORE):  ;
MPRINT(SCORE):   proc datasets lib=EMWS1 nolist;
MPRINT(SCORE):   delete Repl_EMSCOREVAR;
MPRINT(SCORE):   run;

NOTE: Deleting EMWS1.REPL_EMSCOREVAR (memtype=DATA).
MPRINT(SCORE):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

MPRINT(SCORE):   data EMWS1.Repl_EMSCOREVAR;
MPRINT(SCORE):   length Name $32 formula $70 file $200;
MPRINT(SCORE):   keep NAME Formula file;
MPRINT(SCORE):   name = "REP_deg_malig";
MPRINT(SCORE):   file="REPLACECODE\REP_deg_malig.sas";
MPRINT(SCORE):   output;
MPRINT(SCORE):   run;

NOTE: Variable formula is uninitialized.
NOTE: The data set EMWS1.REPL_EMSCOREVAR has 1 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

MPRINT(MAIN):  ;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * End SCORE: Repl;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
30002      *------------------------------------------------------------*;
30003      * End SCORE: Repl;
30004      *------------------------------------------------------------*;
30005      

30006      filename emflow "C:\Users\brahm\OneDrive\Desktop\BAN210_Project\Workspaces\EMWS1\Repl\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\brahm\OneDrive\Desktop\BAN210_Project\Workspaces\EMWS1\Repl\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Repl: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
30007      *------------------------------------------------------------*;
30008      * Repl: Scoring DATA data;
30009      *------------------------------------------------------------*;
30010      data EMWS1.Repl_TRAIN
30011      / view=EMWS1.Repl_TRAIN
30012      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Repl_TRAIN / view=EMWS1.Repl_TRAIN ;
30013      set EMWS1.Part_TRAIN
30014      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Part_TRAIN ;
30015      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\brahm\OneDrive\Desktop\BAN210_Project\Workspaces\EMWS1\Repl\EMFLOWSCORE.sas.
30016     +* ;
MPRINT(EM_DIAGRAM):   * ;
30017     +* Variable: deg_malig ;
MPRINT(EM_DIAGRAM):   * Variable: deg_malig ;
30018     +* ;
MPRINT(EM_DIAGRAM):   * ;
30019     +Label REP_deg_malig='Replacement: deg-malig';
MPRINT(EM_DIAGRAM):   Label REP_deg_malig= 'Replacement: deg-malig';
30020     +REP_deg_malig =deg_malig ;
MPRINT(EM_DIAGRAM):   REP_deg_malig =deg_malig ;
30021     +if deg_malig  eq . then REP_deg_malig = . ;
MPRINT(EM_DIAGRAM):   if deg_malig eq . then REP_deg_malig = . ;
30022     +else
30023     +if deg_malig <-0.160234986  then REP_deg_malig  = -0.160234986 ;
MPRINT(EM_DIAGRAM):   else if deg_malig <-0.160234986 then REP_deg_malig = -0.160234986 ;
30024     +else
30025     +if deg_malig >4.2607374989  then REP_deg_malig  = 4.2607374989 ;
MPRINT(EM_DIAGRAM):   else if deg_malig >4.2607374989 then REP_deg_malig = 4.2607374989 ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
30026      run;

NOTE: DATA STEP view saved on file EMWS1.REPL_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

MPRINT(EM_DIAGRAM):   quit;
30027      quit;
30028      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
30029      filename emflow "C:\Users\brahm\OneDrive\Desktop\BAN210_Project\Workspaces\EMWS1\Repl\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow "C:\Users\brahm\OneDrive\Desktop\BAN210_Project\Workspaces\EMWS1\Repl\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Repl: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
30030      *------------------------------------------------------------*;
30031      * Repl: Scoring VALIDATE data;
30032      *------------------------------------------------------------*;
30033      data EMWS1.Repl_VALIDATE
30034      / view=EMWS1.Repl_VALIDATE
30035      ;
MPRINT(EM_DIAGRAM):   data EMWS1.Repl_VALIDATE / view=EMWS1.Repl_VALIDATE ;
30036      set EMWS1.Part_VALIDATE
30037      ;
MPRINT(EM_DIAGRAM):   set EMWS1.Part_VALIDATE ;
30038      %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\brahm\OneDrive\Desktop\BAN210_Project\Workspaces\EMWS1\Repl\EMFLOWSCORE.sas.
30039     +* ;
MPRINT(EM_DIAGRAM):   * ;
30040     +* Variable: deg_malig ;
MPRINT(EM_DIAGRAM):   * Variable: deg_malig ;
30041     +* ;
MPRINT(EM_DIAGRAM):   * ;
30042     +Label REP_deg_malig='Replacement: deg-malig';
MPRINT(EM_DIAGRAM):   Label REP_deg_malig= 'Replacement: deg-malig';
30043     +REP_deg_malig =deg_malig ;
MPRINT(EM_DIAGRAM):   REP_deg_malig =deg_malig ;
30044     +if deg_malig  eq . then REP_deg_malig = . ;
MPRINT(EM_DIAGRAM):   if deg_malig eq . then REP_deg_malig = . ;
30045     +else
30046     +if deg_malig <-0.160234986  then REP_deg_malig  = -0.160234986 ;
MPRINT(EM_DIAGRAM):   else if deg_malig <-0.160234986 then REP_deg_malig = -0.160234986 ;
30047     +else
30048     +if deg_malig >4.2607374989  then REP_deg_malig  = 4.2607374989 ;
MPRINT(EM_DIAGRAM):   else if deg_malig >4.2607374989 then REP_deg_malig = 4.2607374989 ;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
30049      run;

NOTE: DATA STEP view saved on file EMWS1.REPL_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):   quit;
30050      quit;
30051      filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
30053      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):     *------------------------------------------------------------*;
30054      * Repl: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Repl: Computing metadata for TRAIN data;
30055      *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS1.REPL_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta "C:\Users\brahm\OneDrive\Desktop\BAN210_Project\Workspaces\EMWS1\Repl\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS1.Repl_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS1.Repl_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS1.Repl_TRAIN out=WORK.M2SNMXR3 noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2SNMXR3;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 36 INFORMAT $36 INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M2SNMXR3(keep=name type length label format formatl formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne '' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then format = strip(format)!!strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(format)!!strip(put(formatl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type='N' then informat = strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(informat)!!strip(put(informl, best12.))!!'.';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2SNMXR3;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M2SNMXR3;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M23LJ2DD NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M23LJ2DD;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M23LJ2DD;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1IUQH0H(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M23LJ2DD;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M23LJ2DD;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M23LJ2DD;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" "MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" "QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" 
"YEAR" "YYMMDD" "YYMON" "YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" "EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" "NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if compress(tempfmt, '0123456789.', '') = '' then formattype='NUM';
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = "DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_PARTIND_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('Q') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   if symexist('RATEMKG_ROLE') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('RATEMKG_ROLE')) in('Y', 'YES') then do;
MPRINT(EMADVISECOLUMNS):   if _uname =: 'POLICY' then ROLE = 'POLICYID';
MPRINT(EMADVISECOLUMNS):   else if _uname in ('PARTITION', '_PARTIND_') then ROLE = 'PARTITION';
MPRINT(EMADVISECOLUMNS):   else if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   if _uname = 'EXPOSURE' then ROLE = 'EXPOSURE';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'YEAR' then ROLE = 'YEAR';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'WEIGHT' then ROLE = 'WEIGHT';
MPRINT(EMADVISECOLUMNS):   else if _uname = 'OFFSET' then ROLE = 'OFFSET';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   if symexist('dmwb_product') then do;
MPRINT(EMADVISECOLUMNS):   if upcase(symget('dmwb_product')) = 'FACTORYMINER_DATASOURCE' then do;
MPRINT(EMADVISECOLUMNS):   if ROLE ^in('INPUT', 'TARGET', 'REJECTED', 'SEGMENT', 'FREQ', 'ID', 'KEY') then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M23LJ2DD;
MPRINT(EMADVISECOLUMNS):   set WORK.M23LJ2DD;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= "Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= "Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower 
limit" UPPERLIMIT= "Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= "Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS1.Part_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS1.Part_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS1.Repl_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Repl";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Repl: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if NAME="deg_malig" then do;
MPRINT(EM_DIAGRAM):   ROLE="REJECTED";
MPRINT(EM_DIAGRAM):   COMMENT= "Replaced by Repl";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if NAME="REP_deg_malig" then do;
MPRINT(EM_DIAGRAM):   ROLE="INPUT";
MPRINT(EM_DIAGRAM):   LEVEL="INTERVAL";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
NOTE: View EMWS1.REPL_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      
NOTE: View EMWS1.REPL_VALIDATE.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
